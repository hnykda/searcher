{"index.mdx": "---\ntitle: App Router\ndescription: Use the new App Router with Next.js' and React's latest features, including Layouts, Server Components, Suspense, and more.\n---\n\nThe Next.js App Router introduces a new model for building applications using React's latest features such as [Server Components](/docs/app/building-your-application/rendering/server-components), [Streaming with Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense), and [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\nGet started with the App Router by [creating your first page](/docs/app/building-your-application/routing/layouts-and-templates).\n\n## Frequently Asked Questions\n\n### How can I access the request object in a layout?\n\nYou intentionally cannot access the raw request object. However, you can access [`headers`](/docs/app/api-reference/functions/headers) and [`cookies`](/docs/app/api-reference/functions/cookies) through server-only functions. You can also [set cookies](#how-can-i-set-cookies).\n\n[Layouts](/docs/app/building-your-application/routing/layouts-and-templates#layouts) do not rerender. They can be cached and reused to avoid unnecessary computation when navigating between pages. By restricting layouts from accessing the raw request, Next.js can prevent the execution of potentially slow or expensive user code within the layout, which could negatively impact performance.\n\nThis design also enforces consistent and predictable behavior for layouts across different pages, which simplifies development and debugging.\n\nDepending on the UI pattern you're building, [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes) allow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params.\n\n### How can I access the URL on a page?\n\nBy default, pages are Server Components. You can access the route segments through the [`params`](/docs/app/api-reference/file-conventions/page#params-optional) prop and the URL search params through the [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) prop for a given page.\n\nIf you are using Client Components, you can use [`usePathname`](/docs/app/api-reference/functions/use-pathname), [`useSelectedLayoutSegment`](/docs/app/api-reference/functions/use-selected-layout-segment), and [`useSelectedLayoutSegments`](/docs/app/api-reference/functions/use-selected-layout-segments) for more complex routes.\n\nFurther, depending on the UI pattern you're building, [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes) allow you to render multiple pages in the same layout, and pages have access to the route segments as well as the URL search params.\n\n### How can I redirect from a Server Component?\n\nYou can use [`redirect`](/docs/app/api-reference/functions/redirect) to redirect from a page to a relative or absolute URL. [`redirect`](/docs/app/api-reference/functions/redirect) is a temporary (307) redirect, while [`permanentRedirect`](/docs/app/api-reference/functions/permanentRedirect) is a permanent (308) redirect. When these functions are used while streaming UI, they will insert a meta tag to emit the redirect on the client side.\n\n### How can I handle authentication with the App Router?\n\nHere are some common authentication solutions that support the App Router:\n\n- [NextAuth.js](https://next-auth.js.org/configuration/nextjs#in-app-router)\n- [Clerk](https://clerk.com/docs/quickstarts/nextjs)\n- [Lucia](https://lucia-auth.com/getting-started/nextjs-app)\n- [Auth0](https://github.com/auth0/nextjs-auth0#app-router)\n- [Stytch](https://stytch.com/docs/example-apps/frontend/nextjs)\n- [Kinde](https://kinde.com/docs/developer-tools/nextjs-sdk/)\n- [WorkOS](https://workos.com/docs/user-management)\n- Or manually handling sessions or JWTs\n\n### How can I set cookies?\n\nYou can set cookies in [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations#cookies) or [Route Handlers](/docs/app/building-your-application/routing/route-handlers) using the [`cookies`](/docs/app/api-reference/functions/cookies) function.\n\nSince HTTP does not allow setting cookies after streaming starts, you cannot set cookies from a page or layout directly. You can also set cookies from [Middleware](/docs/app/building-your-application/routing/middleware#using-cookies).\n\n### How can I build multi-tenant apps?\n\nIf you are looking to build a single Next.js application that serves multiple tenants, we have [built an example](https://vercel.com/templates/next.js/platforms-starter-kit) showing our recommended architecture.\n\n### How can I invalidate the App Router cache?\n\nThere are multiple layers of caching in Next.js, and thus, multiple ways to invalidate different parts of the cache. [Learn more about caching](/docs/app/building-your-application/caching).\n\n### Are there any comprehensive, open-source applications built on the App Router?\n\nYes. You can view [Next.js Commerce](https://vercel.com/templates/next.js/nextjs-commerce) or the [Platforms Starter Kit](https://vercel.com/templates/next.js/platforms-starter-kit) for two larger examples of using the App Router that are open-source.\n\n## Learn More\n\n- [Routing Fundamentals](/docs/app/building-your-application/routing)\n- [Data Fetching, Caching, and Revalidating](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating)\n- [Forms and Mutations](/docs/app/building-your-application/data-fetching/server-actions-and-mutations)\n- [Caching](/docs/app/building-your-application/caching)\n- [Rendering Fundamentals](/docs/app/building-your-application/rendering)\n- [Server Components](/docs/app/building-your-application/rendering/server-components)\n- [Client Components](/docs/app/building-your-application/rendering/client-components)\n", "02-api-reference/index.mdx": "---\ntitle: API Reference\ndescription: Next.js API Reference for the App Router.\n---\n\nThe Next.js API reference is divided into the following sections:\n", "02-api-reference/08-next-cli.mdx": "---\ntitle: Next.js CLI\ndescription: Learn how the Next.js CLI allows you to develop, build, and start your application, and more.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nTo get a list of the available CLI commands, run the following command inside your project directory:\n\n```bash filename=\"Terminal\"\nnext -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage next [options] [command]\n\nThe Next.js CLI allows you to develop, build, start your application, and more.\n\nOptions:\n  -v, --version                Outputs the Next.js version.\n  -h, --help                   Displays this message.\n\nCommands:\n  build [directory] [options]  Creates an optimized production build of your application.\n                               The output displays information about each route.\n  dev [directory] [options]    Starts Next.js in development mode with hot-code reloading,\n                               error reporting, and more.\n  info [options]               Prints relevant details about the current system which can be\n                               used to report Next.js bugs.\n  lint [directory] [options]   Runs ESLint for all files in the `/src`, `/app`, `/pages`,\n                               `/components`, and `/lib` directories. It also provides a\n                               guided setup to install any required dependencies if ESLint\n                               is not already configured in your application.\n  start [directory] [options]  Starts Next.js in production mode. The application should be\n                               compiled with `next build` first.\n  telemetry [options]          Allows you to enable or disable Next.js' completely\n                               anonymous telemetry collection.\n```\n\nYou can pass any [node arguments](https://nodejs.org/api/cli.html#cli_node_options_options) to `next` commands:\n\n```bash filename=\"Terminal\"\nNODE_OPTIONS='--throw-deprecation' next\nNODE_OPTIONS='-r esm' next\nNODE_OPTIONS='--inspect' next\n```\n\n> **Good to know**: Running `next` without a command is the same as running `next dev`\n\n## Development\n\n`next dev` starts the application in development mode with hot-code reloading, error reporting, and more.\n\nTo get a list of the available options with `next dev`, run the following command inside your project directory:\n\n```bash filename=\"Terminal\"\nnext dev -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage: next dev [directory] [options]\n\nStarts Next.js in development mode with hot-code reloading, error reporting, and more.\n\nArguments:\n  [directory]                              A directory on which to build the application.\n                                           If no directory is provided, the current\n                                           directory will be used.\n\nOptions:\n  --turbo                                  Starts development mode using Turbopack (beta).\n  -p, --port <port>                        Specify a port number on which to start the\n                                           application. (default: 3000, env: PORT)\n  -H, --hostname <hostname>                Specify a hostname on which to start the\n                                           application (default: 0.0.0.0).\n  --experimental-https                     Starts the server with HTTPS and generates a\n                                           self-signed certificate.\n  --experimental-https-key, <path>         Path to a HTTPS key file.\n  --experimental-https-cert, <path>        Path to a HTTPS certificate file.\n  --experimental-https-ca, <path>          Path to a HTTPS certificate authority file.\n  --experimental-upload-trace, <traceUrl>  Reports a subset of the debugging trace to a\n                                           remote HTTP URL. Includes sensitive data.\n  -h, --help                               Displays this message.\n```\n\nThe application will start at `http://localhost:3000` by default. The default port can be changed with `-p`, like so:\n\n```bash filename=\"Terminal\"\nnext dev -p 4000\n```\n\nOr using the `PORT` environment variable:\n\n```bash filename=\"Terminal\"\nPORT=4000 next dev\n```\n\n> **Good to know**:\n>\n> - `PORT` cannot be set in `.env` as booting up the HTTP server happens before any other code is initialized.\n> - Next.js will automatically retry with another port until a port is available if a port is not specified with the CLI option `--port` or the `PORT` environment variable.\n\nYou can also set the hostname to be different from the default of `0.0.0.0`, this can be useful for making the application available for other devices on the network. The default hostname can be changed with `-H`, like so:\n\n```bash filename=\"Terminal\"\nnext dev -H 192.168.1.2\n```\n\n### Turbopack\n\n[Turbopack](/docs/architecture/turbopack) (beta), our new bundler, which is being tested and stabilized in Next.js, helps speed up local iterations while working on your application.\n\nTo use Turbopack in development mode, add the `--turbo` option:\n\n```bash filename=\"Terminal\"\nnext dev --turbo\n```\n\n### HTTPS for Local Development\n\nFor certain use cases like webhooks or authentication, it may be required to use HTTPS to have a secure environment on `localhost`. Next.js can generate a self-signed certificate with `next dev` as follows:\n\n```bash filename=\"Terminal\"\nnext dev --experimental-https\n```\n\nYou can also provide a custom certificate and key with `--experimental-https-key` and `--experimental-https-cert`. Optionally, you can provide a custom CA certificate with `--experimental-https-ca` as well.\n\n```bash filename=\"Terminal\"\nnext dev --experimental-https --experimental-https-key ./certificates/localhost-key.pem --experimental-https-cert ./certificates/localhost.pem\n```\n\n`next dev --experimental-https` is only intended for development and creates a locally-trusted certificate with `mkcert`. In production, use properly issued certificates from trusted authorities. When deploying to Vercel, HTTPS is [automatically configured](https://vercel.com/docs/security/encryption) for your Next.js application.\n\n## Build\n\n`next build` creates an optimized production build of your application. The output displays information about each route:\n\n```bash filename=\"Terminal\"\nRoute (app)                               Size     First Load JS\n\u250c \u25cb /                                     5.3 kB         89.5 kB\n\u251c \u25cb /_not-found                           885 B          85.1 kB\n\u2514 \u25cb /about                                137 B          84.4 kB\n+ First Load JS shared by all             84.2 kB\n  \u251c chunks/184-d3bb186aac44da98.js        28.9 kB\n  \u251c chunks/30b509c0-f3503c24f98f3936.js   53.4 kB\n  \u2514 other shared chunks (total)\n\n\n\u25cb  (Static)  prerendered as static content\n```\n\n- **Size**: The number of assets downloaded when navigating to the page client-side. The size for each route only includes its dependencies.\n- **First Load JS**: The number of assets downloaded when visiting the page from the server. The amount of JS shared by all is shown as a separate metric.\n\nBoth of these values are [**compressed with gzip**](/docs/app/api-reference/next-config-js/compress). The first load is indicated by green, yellow, or red. Aim for green for performant applications.\n\nTo get a list of the available options with `next build`, run the following command inside your project directory:\n\n```bash filename=\"Terminal\"\nnext build -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage: next build [directory] [options]\n\nCreates an optimized production build of your application. The output displays information\nabout each route.\n\nArguments:\n  [directory]                       A directory on which to build the application. If no\n                                    provided, the current directory will be\n                                    used.\n\nOptions:\n  -d, --debug                       Enables a more verbose build output.\n  --profile                         Enables production profiling for React.\n  --no-lint                         Disables linting.\n  --no-mangling                     Disables mangling.\n  --experimental-app-only           Builds only App Router routes.\n  --experimental-build-mode [mode]  Uses an experimental build mode. (choices: \"compile\"\n                                    \"generate\", default: \"default\")\n  -h, --help                        Displays this message.\n```\n\n### Debug\n\nYou can enable more verbose build output with the `--debug` flag in `next build`.\n\n```bash filename=\"Terminal\"\nnext build --debug\n```\n\nWith this flag enabled additional build output like rewrites, redirects, and headers will be shown.\n\n### Linting\n\nYou can disable linting for builds like so:\n\n```bash filename=\"Terminal\"\nnext build --no-lint\n```\n\n### Mangling\n\nYou can disable [mangling](https://en.wikipedia.org/wiki/Name_mangling) for builds like so:\n\n```bash filename=\"Terminal\"\nnext build --no-mangling\n```\n\n> **Good to know**: This may affect performance and should only be used for debugging purposes.\n\n### Profiling\n\nYou can enable production profiling for React with the `--profile` flag in `next build`.\n\n```bash filename=\"Terminal\"\nnext build --profile\n```\n\nAfter that, you can use the profiler in the same way as you would in development.\n\n## Production\n\n`next start` starts the application in production mode. The application should be compiled with [`next build`](#build) first.\n\nTo get a list of the available options with `next start`, run the follow command inside your project directory:\n\n```bash filename=\"Terminal\"\nnext start -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage: next start [directory] [options]\n\nStarts Next.js in production mode. The application should be compiled with `next build`\nfirst.\n\nArguments:\n  [directory]                           A directory on which to start the application.\n                                        If not directory is provided, the current\n                                        directory will be used.\n\nOptions:\n  -p, --port <port>                     Specify a port number on which to start the\n                                        application. (default: 3000, env: PORT)\n  -H, --hostname <hostname>             Specify a hostname on which to start the\n                                        application (default: 0.0.0.0).\n  --keepAliveTimeout <keepAliveTimeout> Specify the maximum amount of milliseconds to wait\n                                        before closing the inactive connections.\n  -h, --help                            Displays this message.\n```\n\nThe application will start at `http://localhost:3000` by default. The default port can be changed with `-p`, like so:\n\n```bash filename=\"Terminal\"\nnext start -p 4000\n```\n\nOr using the `PORT` environment variable:\n\n```bash filename=\"Terminal\"\nPORT=4000 next start\n```\n\n> **Good to know**:\n>\n> - `PORT` cannot be set in `.env` as booting up the HTTP server happens before any other code is initialized.\n> - `next start` cannot be used with `output: 'standalone'` or `output: 'export'`.\n\n### Keep Alive Timeout\n\nWhen deploying Next.js behind a downstream proxy (e.g. a load-balancer like AWS ELB/ALB) it's important to configure Next's underlying HTTP server with [keep-alive timeouts](https://nodejs.org/api/http.html#http_server_keepalivetimeout) that are _larger_ than the downstream proxy's timeouts. Otherwise, once a keep-alive timeout is reached for a given TCP connection, Node.js will immediately terminate that connection without notifying the downstream proxy. This results in a proxy error whenever it attempts to reuse a connection that Node.js has already terminated.\n\nTo configure the timeout values for the production Next.js server, pass `--keepAliveTimeout` (in milliseconds) to `next start`, like so:\n\n```bash filename=\"Terminal\"\nnext start --keepAliveTimeout 70000\n```\n\n## Info\n\n`next info` prints relevant details about the current system which can be used to report Next.js bugs.\nThis information includes Operating System platform/arch/version, Binaries (Node.js, npm, Yarn, pnpm) and npm package versions (`next`, `react`, `react-dom`).\n\nTo get a list of the available options with `next info`, run the following command inside your project directory:\n\n```bash filename=\"Terminal\"\nnext info -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage: next info [options]\n\nPrints relevant details about the current system which can be used to report Next.js bugs.\n\nOptions:\n  --verbose   Collections additional information for debugging.\n  -h, --help  Displays this message.\n```\n\nRunning `next info` will give you information like this example:\n\n```bash filename=\"Terminal\"\n\nOperating System:\n  Platform: linux\n  Arch: x64\n  Version: #22-Ubuntu SMP Fri Nov 5 13:21:36 UTC 2021\n  Available memory (MB): 31795\n  Available CPU cores: 16\nBinaries:\n  Node: 16.13.0\n  npm: 8.1.0\n  Yarn: 1.22.17\n  pnpm: 6.24.2\nRelevant Packages:\n  next: 14.1.1-canary.61 // Latest available version is detected (14.1.1-canary.61).\n  react: 18.2.0\n  react-dom: 18.2.0\nNext.js Config:\n  output: N/A\n\n```\n\nThis information should then be pasted into GitHub Issues.\n\nYou can also run `next info --verbose` which will print additional information about the system and the installation of packages related to `next`.\n\n## Lint\n\n`next lint` runs ESLint for all files in the `pages/`, `app/`, `components/`, `lib/`, and `src/` directories. It also\nprovides a guided setup to install any required dependencies if ESLint is not already configured in\nyour application.\n\nTo get a list of the available options with `next lint`, run the following command inside your project directory:\n\n```bash filename=\"Terminal\"\nnext lint -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage: next lint [directory] [options]\n\nRuns ESLint for all files in the `/src`, `/app`, `/pages`, `/components`, and `/lib` directories. It also\nprovides a guided setup to install any required dependencies if ESLint is not already configured in your\napplication.\n\nArguments:\n  [directory]                                         A base directory on which to lint the application.\n                                                      If no directory is provided, the current directory\n                                                      will be used.\n\nOptions:\n  -d, --dir, <dirs...>                                Include directory, or directories, to run ESLint.\n  --file, <files...>                                  Include file, or files, to run ESLint.\n  --ext, [exts...]                                    Specify JavaScript file extensions. (default:\n                                                      [\".js\", \".mjs\", \".cjs\", \".jsx\", \".ts\", \".mts\", \".cts\", \".tsx\"])\n  -c, --config, <config>                              Uses this configuration file, overriding all other\n                                                      configuration options.\n  --resolve-plugins-relative-to, <rprt>               Specify a directory where plugins should be resolved\n                                                      from.\n  --strict                                            Creates a `.eslintrc.json` file using the Next.js\n                                                      strict configuration.\n  --rulesdir, <rulesdir...>                           Uses additional rules from this directory(s).\n  --fix                                               Automatically fix linting issues.\n  --fix-type <fixType>                                Specify the types of fixes to apply (e.g., problem,\n                                                      suggestion, layout).\n  --ignore-path <path>                                Specify a file to ignore.\n  --no-ignore <path>                                  Disables the `--ignore-path` option.\n  --quiet                                             Reports errors only.\n  --max-warnings [maxWarnings]                        Specify the number of warnings before triggering a\n                                                      non-zero exit code. (default: -1)\n  -o, --output-file, <outputFile>                     Specify a file to write report to.\n  -f, --format, <format>                              Uses a specifc output format.\n  --no-inline-config                                  Prevents comments from changing config or rules.\n  --report-unused-disable-directives-severity <level> Specify severity level for unused eslint-disable\n                                                      directives. (choices: \"error\", \"off\", \"warn\")\n  --no-cache                                          Disables caching.\n  --cache-location, <cacheLocation>                   Specify a location for cache.\n  --cache-strategy, [cacheStrategy]                   Specify a strategy to use for detecting changed files\n                                                      in the cache. (default: \"metadata\")\n  --error-on-unmatched-pattern                        Reports errors when any file patterns are unmatched.\n  -h, --help                                          Displays this message.\n```\n\nIf you have other directories that you would like to lint, you can specify them using the `--dir` flag:\n\n```bash filename=\"Terminal\"\nnext lint --dir utils\n```\n\nFor more information on the other options, check out our [ESLint](/docs/app/building-your-application/configuring/eslint) configuration documentation.\n\n## Telemetry\n\nNext.js collects **completely anonymous** telemetry data about general usage.\nParticipation in this anonymous program is optional, and you may opt-out if you'd not like to share any information.\n\nTo get a list of the available options with `next telemetry`, run the following command in your project directory:\n\n```bash filename=\"Terminal\"\nnext telemetry -h\n```\n\nThe output should look like this:\n\n```bash filename=\"Terminal\"\nUsage: next telemetry [options]\n\nAllows you to enable or disable Next.js' completely anonymous telemetry collection.\n\nOptions:\n  --enable    Eanbles Next.js' telemetry collection.\n  --disable   Disables Next.js' telemetry collection.\n  -h, --help  Displays this message.\n\nLearn more: https://nextjs.org/telemetry\n```\n\nLearn more about [Telemetry](/telemetry/).\n", "02-api-reference/07-edge.mdx": "---\ntitle: Edge Runtime\ndescription: API Reference for the Edge Runtime.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThe Next.js Edge Runtime is used for Middleware and supports the following APIs:\n\n## Network APIs\n\n| API                                                                             | Description                       |\n| ------------------------------------------------------------------------------- | --------------------------------- |\n| [`Blob`](https://developer.mozilla.org/docs/Web/API/Blob)                       | Represents a blob                 |\n| [`fetch`](https://developer.mozilla.org/docs/Web/API/Fetch_API)                 | Fetches a resource                |\n| [`FetchEvent`](https://developer.mozilla.org/docs/Web/API/FetchEvent)           | Represents a fetch event          |\n| [`File`](https://developer.mozilla.org/docs/Web/API/File)                       | Represents a file                 |\n| [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData)               | Represents form data              |\n| [`Headers`](https://developer.mozilla.org/docs/Web/API/Headers)                 | Represents HTTP headers           |\n| [`Request`](https://developer.mozilla.org/docs/Web/API/Request)                 | Represents an HTTP request        |\n| [`Response`](https://developer.mozilla.org/docs/Web/API/Response)               | Represents an HTTP response       |\n| [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) | Represents URL search parameters  |\n| [`WebSocket`](https://developer.mozilla.org/docs/Web/API/WebSocket)             | Represents a websocket connection |\n\n## Encoding APIs\n\n| API                                                                                 | Description                        |\n| ----------------------------------------------------------------------------------- | ---------------------------------- |\n| [`atob`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/atob) | Decodes a base-64 encoded string   |\n| [`btoa`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/btoa) | Encodes a string in base-64        |\n| [`TextDecoder`](https://developer.mozilla.org/docs/Web/API/TextDecoder)             | Decodes a Uint8Array into a string |\n| [`TextDecoderStream`](https://developer.mozilla.org/docs/Web/API/TextDecoderStream) | Chainable decoder for streams      |\n| [`TextEncoder`](https://developer.mozilla.org/docs/Web/API/TextEncoder)             | Encodes a string into a Uint8Array |\n| [`TextEncoderStream`](https://developer.mozilla.org/docs/Web/API/TextEncoderStream) | Chainable encoder for streams      |\n\n## Stream APIs\n\n| API                                                                                                     | Description                             |\n| ------------------------------------------------------------------------------------------------------- | --------------------------------------- |\n| [`ReadableStream`](https://developer.mozilla.org/docs/Web/API/ReadableStream)                           | Represents a readable stream            |\n| [`ReadableStreamBYOBReader`](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)       | Represents a reader of a ReadableStream |\n| [`ReadableStreamDefaultReader`](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader) | Represents a reader of a ReadableStream |\n| [`TransformStream`](https://developer.mozilla.org/docs/Web/API/TransformStream)                         | Represents a transform stream           |\n| [`WritableStream`](https://developer.mozilla.org/docs/Web/API/WritableStream)                           | Represents a writable stream            |\n| [`WritableStreamDefaultWriter`](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter) | Represents a writer of a WritableStream |\n\n## Crypto APIs\n\n| API                                                                       | Description                                                                                         |\n| ------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------- |\n| [`crypto`](https://developer.mozilla.org/docs/Web/API/Window/crypto)      | Provides access to the cryptographic functionality of the platform                                  |\n| [`CryptoKey`](https://developer.mozilla.org/docs/Web/API/CryptoKey)       | Represents a cryptographic key                                                                      |\n| [`SubtleCrypto`](https://developer.mozilla.org/docs/Web/API/SubtleCrypto) | Provides access to common cryptographic primitives, like hashing, signing, encryption or decryption |\n\n## Web Standard APIs\n\n| API                                                                                                                   | Description                                                                                                                                                                                          |\n| --------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [`AbortController`](https://developer.mozilla.org/docs/Web/API/AbortController)                                       | Allows you to abort one or more DOM requests as and when desired                                                                                                                                     |\n| [`Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array)                           | Represents an array of values                                                                                                                                                                        |\n| [`ArrayBuffer`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)               | Represents a generic, fixed-length raw binary data buffer                                                                                                                                            |\n| [`Atomics`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Atomics)                       | Provides atomic operations as static methods                                                                                                                                                         |\n| [`BigInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt)                         | Represents a whole number with arbitrary precision                                                                                                                                                   |\n| [`BigInt64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)           | Represents a typed array of 64-bit signed integers                                                                                                                                                   |\n| [`BigUint64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)         | Represents a typed array of 64-bit unsigned integers                                                                                                                                                 |\n| [`Boolean`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Boolean)                       | Represents a logical entity and can have two values: `true` and `false`                                                                                                                              |\n| [`clearInterval`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval)                 | Cancels a timed, repeating action which was previously established by a call to `setInterval()`                                                                                                      |\n| [`clearTimeout`](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout)                   | Cancels a timed, repeating action which was previously established by a call to `setTimeout()`                                                                                                       |\n| [`console`](https://developer.mozilla.org/docs/Web/API/Console)                                                       | Provides access to the browser's debugging console                                                                                                                                                   |\n| [`DataView`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/DataView)                     | Represents a generic view of an `ArrayBuffer`                                                                                                                                                        |\n| [`Date`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date)                             | Represents a single moment in time in a platform-independent format                                                                                                                                  |\n| [`decodeURI`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/decodeURI)                   | Decodes a Uniform Resource Identifier (URI) previously created by `encodeURI` or by a similar routine                                                                                                |\n| [`decodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) | Decodes a Uniform Resource Identifier (URI) component previously created by `encodeURIComponent` or by a similar routine                                                                             |\n| [`DOMException`](https://developer.mozilla.org/docs/Web/API/DOMException)                                             | Represents an error that occurs in the DOM                                                                                                                                                           |\n| [`encodeURI`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURI)                   | Encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character           |\n| [`encodeURIComponent`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) | Encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character |\n| [`Error`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error)                           | Represents an error when trying to execute a statement or accessing a property                                                                                                                       |\n| [`EvalError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/EvalError)                   | Represents an error that occurs regarding the global function `eval()`                                                                                                                               |\n| [`Float32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)             | Represents a typed array of 32-bit floating point numbers                                                                                                                                            |\n| [`Float64Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)             | Represents a typed array of 64-bit floating point numbers                                                                                                                                            |\n| [`Function`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function)                     | Represents a function                                                                                                                                                                                |\n| [`Infinity`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Infinity)                     | Represents the mathematical Infinity value                                                                                                                                                           |\n| [`Int8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)                   | Represents a typed array of 8-bit signed integers                                                                                                                                                    |\n| [`Int16Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)                 | Represents a typed array of 16-bit signed integers                                                                                                                                                   |\n| [`Int32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)                 | Represents a typed array of 32-bit signed integers                                                                                                                                                   |\n| [`Intl`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl)                             | Provides access to internationalization and localization functionality                                                                                                                               |\n| [`isFinite`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isFinite)                     | Determines whether a value is a finite number                                                                                                                                                        |\n| [`isNaN`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/isNaN)                           | Determines whether a value is `NaN` or not                                                                                                                                                           |\n| [`JSON`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/JSON)                             | Provides functionality to convert JavaScript values to and from the JSON format                                                                                                                      |\n| [`Map`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Map)                               | Represents a collection of values, where each value may occur only once                                                                                                                              |\n| [`Math`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Math)                             | Provides access to mathematical functions and constants                                                                                                                                              |\n| [`Number`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)                         | Represents a numeric value                                                                                                                                                                           |\n| [`Object`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object)                         | Represents the object that is the base of all JavaScript objects                                                                                                                                     |\n| [`parseFloat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/parseFloat)                 | Parses a string argument and returns a floating point number                                                                                                                                         |\n| [`parseInt`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/parseInt)                     | Parses a string argument and returns an integer of the specified radix                                                                                                                               |\n| [`Promise`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise)                       | Represents the eventual completion (or failure) of an asynchronous operation, and its resulting value                                                                                                |\n| [`Proxy`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy)                           | Represents an object that is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc)                                     |\n| [`queueMicrotask`](https://developer.mozilla.org/docs/Web/API/queueMicrotask)                                         | Queues a microtask to be executed                                                                                                                                                                    |\n| [`RangeError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RangeError)                 | Represents an error when a value is not in the set or range of allowed values                                                                                                                        |\n| [`ReferenceError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)         | Represents an error when a non-existent variable is referenced                                                                                                                                       |\n| [`Reflect`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Reflect)                       | Provides methods for interceptable JavaScript operations                                                                                                                                             |\n| [`RegExp`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp)                         | Represents a regular expression, allowing you to match combinations of characters                                                                                                                    |\n| [`Set`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Set)                               | Represents a collection of values, where each value may occur only once                                                                                                                              |\n| [`setInterval`](https://developer.mozilla.org/docs/Web/API/setInterval)                                               | Repeatedly calls a function, with a fixed time delay between each call                                                                                                                               |\n| [`setTimeout`](https://developer.mozilla.org/docs/Web/API/setTimeout)                                                 | Calls a function or evaluates an expression after a specified number of milliseconds                                                                                                                 |\n| [`SharedArrayBuffer`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer)   | Represents a generic, fixed-length raw binary data buffer                                                                                                                                            |\n| [`String`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)                         | Represents a sequence of characters                                                                                                                                                                  |\n| [`structuredClone`](https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm)            | Creates a deep copy of a value                                                                                                                                                                       |\n| [`Symbol`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Symbol)                         | Represents a unique and immutable data type that is used as the key of an object property                                                                                                            |\n| [`SyntaxError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError)               | Represents an error when trying to interpret syntactically invalid code                                                                                                                              |\n| [`TypeError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/TypeError)                   | Represents an error when a value is not of the expected type                                                                                                                                         |\n| [`Uint8Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)                 | Represents a typed array of 8-bit unsigned integers                                                                                                                                                  |\n| [`Uint8ClampedArray`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)   | Represents a typed array of 8-bit unsigned integers clamped to 0-255                                                                                                                                 |\n| [`Uint32Array`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)               | Represents a typed array of 32-bit unsigned integers                                                                                                                                                 |\n| [`URIError`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/URIError)                     | Represents an error when a global URI handling function was used in a wrong way                                                                                                                      |\n| [`URL`](https://developer.mozilla.org/docs/Web/API/URL)                                                               | Represents an object providing static methods used for creating object URLs                                                                                                                          |\n| [`URLPattern`](https://developer.mozilla.org/docs/Web/API/URLPattern)                                                 | Represents a URL pattern                                                                                                                                                                             |\n| [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams)                                       | Represents a collection of key/value pairs                                                                                                                                                           |\n| [`WeakMap`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)                       | Represents a collection of key/value pairs in which the keys are weakly referenced                                                                                                                   |\n| [`WeakSet`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WeakSet)                       | Represents a collection of objects in which each object may occur only once                                                                                                                          |\n| [`WebAssembly`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly)               | Provides access to WebAssembly                                                                                                                                                                       |\n\n## Next.js Specific Polyfills\n\n- [`AsyncLocalStorage`](https://nodejs.org/api/async_context.html#class-asynclocalstorage)\n\n## Environment Variables\n\nYou can use `process.env` to access [Environment Variables](/docs/app/building-your-application/configuring/environment-variables) for both `next dev` and `next build`.\n\n## Unsupported APIs\n\nThe Edge Runtime has some restrictions including:\n\n- Native Node.js APIs **are not supported**. For example, you can't read or write to the filesystem.\n- `node_modules` _can_ be used, as long as they implement ES Modules and do not use native Node.js APIs.\n- Calling `require` directly is **not allowed**. Use ES Modules instead.\n\nThe following JavaScript language features are disabled, and **will not work:**\n\n| API                                                                                                                             | Description                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------- |\n| [`eval`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/eval)                                       | Evaluates JavaScript code represented as a string                   |\n| [`new Function(evalString)`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function)               | Creates a new function with the code provided as an argument        |\n| [`WebAssembly.compile`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)         | Compiles a WebAssembly module from a buffer source                  |\n| [`WebAssembly.instantiate`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate) | Compiles and instantiates a WebAssembly module from a buffer source |\n\nIn rare cases, your code could contain (or import) some dynamic code evaluation statements which _can not be reached at runtime_ and which can not be removed by treeshaking.\nYou can relax the check to allow specific files with your Middleware configuration:\n\n```javascript filename=\"middleware.ts\"\nexport const config = {\n  unstable_allowDynamic: [\n    // allows a single file\n    '/lib/utilities.js',\n    // use a glob to allow anything in the function-bind 3rd party module\n    '/node_modules/function-bind/**',\n  ],\n}\n```\n\n`unstable_allowDynamic` is a [glob](https://github.com/micromatch/micromatch#matching-features), or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder.\n\nBe warned that if these statements are executed on the Edge, _they will throw and cause a runtime error_.\n", "02-api-reference/06-create-next-app.mdx": "---\ntitle: create-next-app\ndescription: Create Next.js apps in one command with create-next-app.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThe easiest way to get started with Next.js is by using `create-next-app`. This CLI tool enables you to quickly start building a new Next.js application, with everything set up for you.\n\nYou can create a new app using the default Next.js template, or by using one of the [official Next.js examples](https://github.com/vercel/next.js/tree/canary/examples).\n\n### Interactive\n\nYou can create a new project interactively by running:\n\n```bash filename=\"Terminal\"\nnpx create-next-app@latest\n```\n\n```bash filename=\"Terminal\"\nyarn create next-app\n```\n\n```bash filename=\"Terminal\"\npnpm create next-app\n```\n\n```bash filename=\"Terminal\"\nbun create next-app\n```\n\nYou will then be asked the following prompts:\n\n```txt filename=\"Terminal\"\nWhat is your project named?  my-app\nWould you like to use TypeScript?  No / Yes\nWould you like to use ESLint?  No / Yes\nWould you like to use Tailwind CSS?  No / Yes\nWould you like to use `src/` directory?  No / Yes\nWould you like to use App Router? (recommended)  No / Yes\nWould you like to customize the default import alias (@/*)?  No / Yes\n```\n\nOnce you've answered the prompts, a new project will be created with the correct configuration depending on your answers.\n\n### Non-interactive\n\nYou can also pass command line arguments to set up a new project non-interactively.\n\nFurther, you can negate default options by prefixing them with `--no-` (e.g. `--no-eslint`).\n\nSee `create-next-app --help`:\n\n```bash filename=\"Terminal\"\nUsage: create-next-app <project-directory> [options]\n\nOptions:\n  -V, --version                        output the version number\n  --ts, --typescript\n\n    Initialize as a TypeScript project. (default)\n\n  --js, --javascript\n\n    Initialize as a JavaScript project.\n\n  --tailwind\n\n    Initialize with Tailwind CSS config. (default)\n\n  --eslint\n\n    Initialize with ESLint config.\n\n  --app\n\n    Initialize as an App Router project.\n\n  --src-dir\n\n    Initialize inside a `src/` directory.\n\n  --import-alias <alias-to-configure>\n\n    Specify import alias to use (default \"@/*\").\n\n  --use-npm\n\n    Explicitly tell the CLI to bootstrap the app using npm\n\n  --use-pnpm\n\n    Explicitly tell the CLI to bootstrap the app using pnpm\n\n  --use-yarn\n\n    Explicitly tell the CLI to bootstrap the app using Yarn\n\n  --use-bun\n\n    Explicitly tell the CLI to bootstrap the app using Bun\n\n  -e, --example [name]|[github-url]\n\n    An example to bootstrap the app with. You can use an example name\n    from the official Next.js repo or a public GitHub URL. The URL can use\n    any branch and/or subdirectory\n\n  --example-path <path-to-example>\n\n    In a rare case, your GitHub URL might contain a branch name with\n    a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).\n    In this case, you must specify the path to the example separately:\n    --example-path foo/bar\n\n  --reset-preferences\n\n    Explicitly tell the CLI to reset any stored preferences\n\n  --skip-install\n\n    Explicitly tell the CLI to skip installing packages\n\n  -h, --help                           output usage information\n```\n\n### Why use Create Next App?\n\n`create-next-app` allows you to create a new Next.js app within seconds. It is officially maintained by the creators of Next.js, and includes a number of benefits:\n\n- **Interactive Experience**: Running `npx create-next-app@latest` (with no arguments) launches an interactive experience that guides you through setting up a project.\n- **Zero Dependencies**: Initializing a project is as quick as one second. Create Next App has zero dependencies.\n- **Offline Support**: Create Next App will automatically detect if you're offline and bootstrap your project using your local package cache.\n- **Support for Examples**: Create Next App can bootstrap your application using an example from the Next.js examples collection (e.g. `npx create-next-app --example api-routes`) or any public GitHub repository.\n- **Tested**: The package is part of the Next.js monorepo and tested using the same integration test suite as Next.js itself, ensuring it works as expected with every release.\n", "02-api-reference/04-functions/use-selected-layout-segment.mdx": "---\ntitle: useSelectedLayoutSegment\ndescription: API Reference for the useSelectedLayoutSegment hook.\n---\n\n`useSelectedLayoutSegment` is a **Client Component** hook that lets you read the active route segment **one level below** the Layout it is called from.\n\nIt is useful for navigation UI, such as tabs inside a parent layout that change style depending on the active child segment.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segment = useSelectedLayoutSegment()\n\n  return <p>Active segment: {segment}</p>\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segment = useSelectedLayoutSegment()\n\n  return <p>Active segment: {segment}</p>\n}\n```\n\n> **Good to know**:\n>\n> - Since `useSelectedLayoutSegment` is a [Client Component](/docs/app/building-your-application/rendering/client-components) hook, and Layouts are [Server Components](/docs/app/building-your-application/rendering/server-components) by default, `useSelectedLayoutSegment` is usually called via a Client Component that is imported into a Layout.\n> - `useSelectedLayoutSegment` only returns the segment one level down. To return all active segments, see [`useSelectedLayoutSegments`](/docs/app/api-reference/functions/use-selected-layout-segments)\n\n## Parameters\n\n```tsx\nconst segment = useSelectedLayoutSegment(parallelRoutesKey?: string)\n```\n\n`useSelectedLayoutSegment` _optionally_ accepts a [`parallelRoutesKey`](/docs/app/building-your-application/routing/parallel-routes#useselectedlayoutsegments), which allows you to read the active route segment within that slot.\n\n## Returns\n\n`useSelectedLayoutSegment` returns a string of the active segment or `null` if one doesn't exist.\n\nFor example, given the Layouts and URLs below, the returned segment would be:\n\n| Layout                    | Visited URL                    | Returned Segment |\n| ------------------------- | ------------------------------ | ---------------- |\n| `app/layout.js`           | `/`                            | `null`           |\n| `app/layout.js`           | `/dashboard`                   | `'dashboard'`    |\n| `app/dashboard/layout.js` | `/dashboard`                   | `null`           |\n| `app/dashboard/layout.js` | `/dashboard/settings`          | `'settings'`     |\n| `app/dashboard/layout.js` | `/dashboard/analytics`         | `'analytics'`    |\n| `app/dashboard/layout.js` | `/dashboard/analytics/monthly` | `'analytics'`    |\n\n## Examples\n\n### Creating an active link component\n\nYou can use `useSelectedLayoutSegment` to create an active link component that changes style depending on the active segment. For example, a featured posts list in the sidebar of a blog:\n\n```tsx filename=\"app/blog/blog-nav-link.tsx\" switcher\n'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\n// This *client* component will be imported into a blog layout\nexport default function BlogNavLink({\n  slug,\n  children,\n}: {\n  slug: string\n  children: React.ReactNode\n}) {\n  // Navigating to `/blog/hello-world` will return 'hello-world'\n  // for the selected layout segment\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      // Change style depending on whether the link is active\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\n```jsx filename=\"app/blog/blog-nav-link.js\" switcher\n'use client'\n\nimport Link from 'next/link'\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\n// This *client* component will be imported into a blog layout\nexport default function BlogNavLink({ slug, children }) {\n  // Navigating to `/blog/hello-world` will return 'hello-world'\n  // for the selected layout segment\n  const segment = useSelectedLayoutSegment()\n  const isActive = slug === segment\n\n  return (\n    <Link\n      href={`/blog/${slug}`}\n      // Change style depending on whether the link is active\n      style={{ fontWeight: isActive ? 'bold' : 'normal' }}\n    >\n      {children}\n    </Link>\n  )\n}\n```\n\n```tsx filename=\"app/blog/layout.tsx\" switcher\n// Import the Client Component into a parent Layout (Server Component)\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div>\n      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div>{children}</div>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/blog/layout.js\" switcher\n// Import the Client Component into a parent Layout (Server Component)\nimport { BlogNavLink } from './blog-nav-link'\nimport getFeaturedPosts from './get-featured-posts'\n\nexport default async function Layout({ children }) {\n  const featuredPosts = await getFeaturedPosts()\n  return (\n    <div>\n      {featuredPosts.map((post) => (\n        <div key={post.id}>\n          <BlogNavLink slug={post.slug}>{post.title}</BlogNavLink>\n        </div>\n      ))}\n      <div>{children}</div>\n    </div>\n  )\n}\n```\n\n## Version History\n\n| Version   | Changes                                |\n| --------- | -------------------------------------- |\n| `v13.0.0` | `useSelectedLayoutSegment` introduced. |\n", "02-api-reference/04-functions/generate-metadata.mdx": "---\ntitle: Metadata Object and generateMetadata Options\nnav_title: generateMetadata\ndescription: Learn how to add Metadata to your Next.js application for improved search engine optimization (SEO) and web shareability.\nrelated:\n  title: Next Steps\n  description: View all the Metadata API options.\n  links:\n    - app/api-reference/file-conventions/metadata\n    - app/api-reference/functions/generate-viewport\n    - app/building-your-application/optimizing/metadata\n---\n\nThis page covers all **Config-based Metadata** options with `generateMetadata` and the static metadata object.\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport { Metadata } from 'next'\n\n// either Static metadata\nexport const metadata: Metadata = {\n  title: '...',\n}\n\n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n```\n\n```jsx filename=\"layout.js | page.js\" switcher\n// either Static metadata\nexport const metadata = {\n  title: '...',\n}\n\n// or Dynamic metadata\nexport async function generateMetadata({ params }) {\n  return {\n    title: '...',\n  }\n}\n```\n\n> **Good to know**:\n>\n> - The `metadata` object and `generateMetadata` function exports are **only supported in Server Components**.\n> - You cannot export both the `metadata` object and `generateMetadata` function from the same route segment.\n\n## The `metadata` object\n\nTo define static metadata, export a [`Metadata` object](#metadata-fields) from a `layout.js` or `page.js` file.\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n```jsx filename=\"layout.js | page.js\" switcher\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\nSee the [Metadata Fields](#metadata-fields) for a complete list of supported options.\n\n## `generateMetadata` function\n\nDynamic metadata depends on **dynamic information**, such as the current route parameters, external data, or `metadata` in parent segments, can be set by exporting a `generateMetadata` function that returns a [`Metadata` object](#metadata-fields).\n\n```tsx filename=\"app/products/[id]/page.tsx\" switcher\nimport { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const id = params.id\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n```jsx filename=\"app/products/[id]/page.js\" switcher\nexport async function generateMetadata({ params, searchParams }, parent) {\n  // read route params\n  const id = params.id\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\n### Parameters\n\n`generateMetadata` function accepts the following parameters:\n\n- `props` - An object containing the parameters of the current route:\n\n  - `params` - An object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to the segment `generateMetadata` is called from. Examples:\n\n    | Route                           | URL         | `params`                  |\n    | ------------------------------- | ----------- | ------------------------- |\n    | `app/shop/[slug]/page.js`       | `/shop/1`   | `{ slug: '1' }`           |\n    | `app/shop/[tag]/[item]/page.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |\n    | `app/shop/[...slug]/page.js`    | `/shop/1/2` | `{ slug: ['1', '2'] }`    |\n\n  - `searchParams` - An object containing the current URL's [search params](https://developer.mozilla.org/docs/Learn/Common_questions/What_is_a_URL#parameters). Examples:\n\n    | URL             | `searchParams`       |\n    | --------------- | -------------------- |\n    | `/shop?a=1`     | `{ a: '1' }`         |\n    | `/shop?a=1&b=2` | `{ a: '1', b: '2' }` |\n    | `/shop?a=1&a=2` | `{ a: ['1', '2'] }`  |\n\n- `parent` - A promise of the resolved metadata from parent route segments.\n\n### Returns\n\n`generateMetadata` should return a [`Metadata` object](#metadata-fields) containing one or more metadata fields.\n\n> **Good to know**:\n>\n> - If metadata doesn't depend on runtime information, it should be defined using the static [`metadata` object](#the-metadata-object) rather than `generateMetadata`.\n> - `fetch` requests are automatically [memoized](/docs/app/building-your-application/caching#request-memoization) for the same data across `generateMetadata`, `generateStaticParams`, Layouts, Pages, and Server Components. React [`cache` can be used](/docs/app/building-your-application/caching#request-memoization) if `fetch` is unavailable.\n> - `searchParams` are only available in `page.js` segments.\n> - The [`redirect()`](/docs/app/api-reference/functions/redirect) and [`notFound()`](/docs/app/api-reference/functions/not-found) Next.js methods can also be used inside `generateMetadata`.\n\n## Metadata Fields\n\n### `title`\n\nThe `title` attribute is used to set the title of the document. It can be defined as a simple [string](#string) or an optional [template object](#template-object).\n\n#### String\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  title: 'Next.js',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<title>Next.js</title>\n```\n\n#### Template object\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '...',\n    default: '...',\n    absolute: '...',\n  },\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  title: {\n    default: '...',\n    template: '...',\n    absolute: '...',\n  },\n}\n```\n\n##### Default\n\n`title.default` can be used to provide a **fallback title** to child route segments that don't define a `title`.\n\n```tsx filename=\"app/layout.tsx\"\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    default: 'Acme',\n  },\n}\n```\n\n```tsx filename=\"app/about/page.tsx\"\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {}\n\n// Output: <title>Acme</title>\n```\n\n##### Template\n\n`title.template` can be used to add a prefix or a suffix to `titles` defined in **child** route segments.\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n    default: 'Acme', // a default is required when creating a template\n  },\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n    default: 'Acme', // a default is required when creating a template\n  },\n}\n```\n\n```tsx filename=\"app/about/page.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'About',\n}\n\n// Output: <title>About | Acme</title>\n```\n\n```jsx filename=\"app/about/page.js\" switcher\nexport const metadata = {\n  title: 'About',\n}\n\n// Output: <title>About | Acme</title>\n```\n\n> **Good to know**:\n>\n> - `title.template` applies to **child** route segments and **not** the segment it's defined in. This means:\n>\n>   - `title.default` is **required** when you add a `title.template`.\n>   - `title.template` defined in `layout.js` will not apply to a `title` defined in a `page.js` of the same route segment.\n>   - `title.template` defined in `page.js` has no effect because a page is always the terminating segment (it doesn't have any children route segments).\n>\n> - `title.template` has **no effect** if a route has not defined a `title` or `title.default`.\n\n##### Absolute\n\n`title.absolute` can be used to provide a title that **ignores** `title.template` set in parent segments.\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  title: {\n    template: '%s | Acme',\n  },\n}\n```\n\n```tsx filename=\"app/about/page.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n\n// Output: <title>About</title>\n```\n\n```jsx filename=\"app/about/page.js\" switcher\nexport const metadata = {\n  title: {\n    absolute: 'About',\n  },\n}\n\n// Output: <title>About</title>\n```\n\n> **Good to know**:\n>\n> - `layout.js`\n>\n>   - `title` (string) and `title.default` define the default title for child segments (that do not define their own `title`). It will augment `title.template` from the closest parent segment if it exists.\n>   - `title.absolute` defines the default title for child segments. It ignores `title.template` from parent segments.\n>   - `title.template` defines a new title template for child segments.\n>\n> - `page.js`\n>   - If a page does not define its own title the closest parents resolved title will be used.\n>   - `title` (string) defines the routes title. It will augment `title.template` from the closest parent segment if it exists.\n>   - `title.absolute` defines the route title. It ignores `title.template` from parent segments.\n>   - `title.template` has no effect in `page.js` because a page is always the terminating segment of a route.\n\n### `description`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  description: 'The React Framework for the Web',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"description\" content=\"The React Framework for the Web\" />\n```\n\n### Basic Fields\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  generator: 'Next.js',\n  applicationName: 'Next.js',\n  referrer: 'origin-when-cross-origin',\n  keywords: ['Next.js', 'React', 'JavaScript'],\n  authors: [{ name: 'Seb' }, { name: 'Josh', url: 'https://nextjs.org' }],\n  creator: 'Jiachi Liu',\n  publisher: 'Sebastian Markb\u00e5ge',\n  formatDetection: {\n    email: false,\n    address: false,\n    telephone: false,\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"application-name\" content=\"Next.js\" />\n<meta name=\"author\" content=\"Seb\" />\n<link rel=\"author\" href=\"https://nextjs.org\" />\n<meta name=\"author\" content=\"Josh\" />\n<meta name=\"generator\" content=\"Next.js\" />\n<meta name=\"keywords\" content=\"Next.js,React,JavaScript\" />\n<meta name=\"referrer\" content=\"origin-when-cross-origin\" />\n<meta name=\"color-scheme\" content=\"dark\" />\n<meta name=\"creator\" content=\"Jiachi Liu\" />\n<meta name=\"publisher\" content=\"Sebastian Markb\u00e5ge\" />\n<meta name=\"format-detection\" content=\"telephone=no, address=no, email=no\" />\n```\n\n### `metadataBase`\n\n`metadataBase` is a convenience option to set a base URL prefix for `metadata` fields that require a fully qualified URL.\n\n- `metadataBase` allows URL-based `metadata` fields defined in the **current route segment and below** to use a **relative path** instead of an otherwise required absolute URL.\n- The field's relative path will be composed with `metadataBase` to form a fully qualified URL.\n- If not configured, `metadataBase` is **automatically populated** with a [default value](#default-value).\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n  alternates: {\n    canonical: '/',\n    languages: {\n      'en-US': '/en-US',\n      'de-DE': '/de-DE',\n    },\n  },\n  openGraph: {\n    images: '/og-image.png',\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"canonical\" href=\"https://acme.com\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://acme.com/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://acme.com/de-DE\" />\n<meta property=\"og:image\" content=\"https://acme.com/og-image.png\" />\n```\n\n> **Good to know**:\n>\n> - `metadataBase` is typically set in root `app/layout.js` to apply to URL-based `metadata` fields across all routes.\n> - All URL-based `metadata` fields that require absolute URLs can be configured with a `metadataBase` option.\n> - `metadataBase` can contain a subdomain e.g. `https://app.acme.com` or base path e.g. `https://acme.com/start/from/here`\n> - If a `metadata` field provides an absolute URL, `metadataBase` will be ignored.\n> - Using a relative path in a URL-based `metadata` field without configuring a `metadataBase` will cause a build error.\n> - Next.js will normalize duplicate slashes between `metadataBase` (e.g. `https://acme.com/`) and a relative field (e.g. `/path`) to a single slash (e.g. `https://acme.com/path`)\n\n#### Default value\n\nIf not configured, `metadataBase` has a **default value**\n\n- When [`VERCEL_URL`](https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#:~:text=.-,VERCEL_URL,-The%20domain%20name) is detected: `https://${process.env.VERCEL_URL}` otherwise it falls back to `http://localhost:${process.env.PORT || 3000}`.\n- When overriding the default, we recommend using environment variables to compute the URL. This allows configuring a URL for local development, staging, and production environments.\n\n#### URL Composition\n\nURL composition favors developer intent over default directory traversal semantics.\n\n- Trailing slashes between `metadataBase` and `metadata` fields are normalized.\n- An \"absolute\" path in a `metadata` field (that typically would replace the whole URL path) is treated as a \"relative\" path (starting from the end of `metadataBase`).\n\nFor example, given the following `metadataBase`:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  metadataBase: new URL('https://acme.com'),\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  metadataBase: new URL('https://acme.com'),\n}\n```\n\nAny `metadata` fields that inherit the above `metadataBase` and set their own value will be resolved as follows:\n\n| `metadata` field                 | Resolved URL                     |\n| -------------------------------- | -------------------------------- |\n| `/`                              | `https://acme.com`               |\n| `./`                             | `https://acme.com`               |\n| `payments`                       | `https://acme.com/payments`      |\n| `/payments`                      | `https://acme.com/payments`      |\n| `./payments`                     | `https://acme.com/payments`      |\n| `../payments`                    | `https://acme.com/payments`      |\n| `https://beta.acme.com/payments` | `https://beta.acme.com/payments` |\n\n### `openGraph`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    url: 'https://nextjs.org',\n    siteName: 'Next.js',\n    images: [\n      {\n        url: 'https://nextjs.org/og.png', // Must be an absolute URL\n        width: 800,\n        height: 600,\n      },\n      {\n        url: 'https://nextjs.org/og-alt.png', // Must be an absolute URL\n        width: 1800,\n        height: 1600,\n        alt: 'My custom alt',\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:url\" content=\"https://nextjs.org/\" />\n<meta property=\"og:site_name\" content=\"Next.js\" />\n<meta property=\"og:locale\" content=\"en_US\" />\n<meta property=\"og:image:url\" content=\"https://nextjs.org/og.png\" />\n<meta property=\"og:image:width\" content=\"800\" />\n<meta property=\"og:image:height\" content=\"600\" />\n<meta property=\"og:image:url\" content=\"https://nextjs.org/og-alt.png\" />\n<meta property=\"og:image:width\" content=\"1800\" />\n<meta property=\"og:image:height\" content=\"1600\" />\n<meta property=\"og:image:alt\" content=\"My custom alt\" />\n<meta property=\"og:type\" content=\"website\" />\n```\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  openGraph: {\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    type: 'article',\n    publishedTime: '2023-01-01T00:00:00.000Z',\n    authors: ['Seb', 'Josh'],\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta property=\"og:title\" content=\"Next.js\" />\n<meta property=\"og:description\" content=\"The React Framework for the Web\" />\n<meta property=\"og:type\" content=\"article\" />\n<meta property=\"article:published_time\" content=\"2023-01-01T00:00:00.000Z\" />\n<meta property=\"article:author\" content=\"Seb\" />\n<meta property=\"article:author\" content=\"Josh\" />\n```\n\n> **Good to know**:\n>\n> - It may be more convenient to use the [file-based Metadata API](/docs/app/api-reference/file-conventions/metadata/opengraph-image#image-files-jpg-png-gif) for Open Graph images. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you.\n\n### `robots`\n\n```tsx\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  robots: {\n    index: false,\n    follow: true,\n    nocache: true,\n    googleBot: {\n      index: true,\n      follow: false,\n      noimageindex: true,\n      'max-video-preview': -1,\n      'max-image-preview': 'large',\n      'max-snippet': -1,\n    },\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"robots\" content=\"noindex, follow, nocache\" />\n<meta\n  name=\"googlebot\"\n  content=\"index, nofollow, noimageindex, max-video-preview:-1, max-image-preview:large, max-snippet:-1\"\n/>\n```\n\n### `icons`\n\n> **Good to know**: We recommend using the [file-based Metadata API](/docs/app/api-reference/file-conventions/metadata/app-icons#image-files-ico-jpg-png) for icons where possible. Rather than having to sync the config export with actual files, the file-based API will automatically generate the correct metadata for you.\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  icons: {\n    icon: '/icon.png',\n    shortcut: '/shortcut-icon.png',\n    apple: '/apple-icon.png',\n    other: {\n      rel: 'apple-touch-icon-precomposed',\n      url: '/apple-touch-icon-precomposed.png',\n    },\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n```\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  icons: {\n    icon: [\n      { url: '/icon.png' },\n      new URL('/icon.png', 'https://example.com'),\n      { url: '/icon-dark.png', media: '(prefers-color-scheme: dark)' },\n    ],\n    shortcut: ['/shortcut-icon.png'],\n    apple: [\n      { url: '/apple-icon.png' },\n      { url: '/apple-icon-x3.png', sizes: '180x180', type: 'image/png' },\n    ],\n    other: [\n      {\n        rel: 'apple-touch-icon-precomposed',\n        url: '/apple-touch-icon-precomposed.png',\n      },\n    ],\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"shortcut icon\" href=\"/shortcut-icon.png\" />\n<link rel=\"icon\" href=\"/icon.png\" />\n<link rel=\"icon\" href=\"https://example.com/icon.png\" />\n<link rel=\"icon\" href=\"/icon-dark.png\" media=\"(prefers-color-scheme: dark)\" />\n<link rel=\"apple-touch-icon\" href=\"/apple-icon.png\" />\n<link\n  rel=\"apple-touch-icon-precomposed\"\n  href=\"/apple-touch-icon-precomposed.png\"\n/>\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon-x3.png\"\n  sizes=\"180x180\"\n  type=\"image/png\"\n/>\n```\n\n> **Good to know**: The `msapplication-*` meta tags are no longer supported in Chromium builds of Microsoft Edge, and thus no longer needed.\n\n### `themeColor`\n\n> **Deprecated**: The `themeColor` option in `metadata` is deprecated as of Next.js 14. Please use the [`viewport` configuration](/docs/app/api-reference/functions/generate-viewport) instead.\n\n### `manifest`\n\nA web application manifest, as defined in the [Web Application Manifest specification](https://developer.mozilla.org/docs/Web/Manifest).\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  manifest: 'https://nextjs.org/manifest.json',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"manifest\" href=\"https://nextjs.org/manifest.json\" />\n```\n\n### `twitter`\n\nThe Twitter specification is (surprisingly) used for more than just X (formerly known as Twitter).\n\nLearn more about the [Twitter Card markup reference](https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/markup).\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  twitter: {\n    card: 'summary_large_image',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: ['https://nextjs.org/og.png'], // Must be an absolute URL\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n```\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  twitter: {\n    card: 'app',\n    title: 'Next.js',\n    description: 'The React Framework for the Web',\n    siteId: '1467726470533754880',\n    creator: '@nextjs',\n    creatorId: '1467726470533754880',\n    images: {\n      url: 'https://nextjs.org/og.png',\n      alt: 'Next.js Logo',\n    },\n    app: {\n      name: 'twitter_app',\n      id: {\n        iphone: 'twitter_app://iphone',\n        ipad: 'twitter_app://ipad',\n        googleplay: 'twitter_app://googleplay',\n      },\n      url: {\n        iphone: 'https://iphone_url',\n        ipad: 'https://ipad_url',\n      },\n    },\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"twitter:site:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:creator\" content=\"@nextjs\" />\n<meta name=\"twitter:creator:id\" content=\"1467726470533754880\" />\n<meta name=\"twitter:title\" content=\"Next.js\" />\n<meta name=\"twitter:description\" content=\"The React Framework for the Web\" />\n<meta name=\"twitter:card\" content=\"app\" />\n<meta name=\"twitter:image\" content=\"https://nextjs.org/og.png\" />\n<meta name=\"twitter:image:alt\" content=\"Next.js Logo\" />\n<meta name=\"twitter:app:name:iphone\" content=\"twitter_app\" />\n<meta name=\"twitter:app:id:iphone\" content=\"twitter_app://iphone\" />\n<meta name=\"twitter:app:id:ipad\" content=\"twitter_app://ipad\" />\n<meta name=\"twitter:app:id:googleplay\" content=\"twitter_app://googleplay\" />\n<meta name=\"twitter:app:url:iphone\" content=\"https://iphone_url\" />\n<meta name=\"twitter:app:url:ipad\" content=\"https://ipad_url\" />\n<meta name=\"twitter:app:name:ipad\" content=\"twitter_app\" />\n<meta name=\"twitter:app:name:googleplay\" content=\"twitter_app\" />\n```\n\n### `viewport`\n\n> **Deprecated**: The `viewport` option in `metadata` is deprecated as of Next.js 14. Please use the [`viewport` configuration](/docs/app/api-reference/functions/generate-viewport) instead.\n\n### `verification`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  verification: {\n    google: 'google',\n    yandex: 'yandex',\n    yahoo: 'yahoo',\n    other: {\n      me: ['my-email', 'my-link'],\n    },\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"google-site-verification\" content=\"google\" />\n<meta name=\"y_key\" content=\"yahoo\" />\n<meta name=\"yandex-verification\" content=\"yandex\" />\n<meta name=\"me\" content=\"my-email\" />\n<meta name=\"me\" content=\"my-link\" />\n```\n\n### `appleWebApp`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  itunes: {\n    appId: 'myAppStoreID',\n    appArgument: 'myAppArgument',\n  },\n  appleWebApp: {\n    title: 'Apple Web App',\n    statusBarStyle: 'black-translucent',\n    startupImage: [\n      '/assets/startup/apple-touch-startup-image-768x1004.png',\n      {\n        url: '/assets/startup/apple-touch-startup-image-1536x2008.png',\n        media: '(device-width: 768px) and (device-height: 1024px)',\n      },\n    ],\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta\n  name=\"apple-itunes-app\"\n  content=\"app-id=myAppStoreID, app-argument=myAppArgument\"\n/>\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n<meta name=\"apple-mobile-web-app-title\" content=\"Apple Web App\" />\n<link\n  href=\"/assets/startup/apple-touch-startup-image-768x1004.png\"\n  rel=\"apple-touch-startup-image\"\n/>\n<link\n  href=\"/assets/startup/apple-touch-startup-image-1536x2008.png\"\n  media=\"(device-width: 768px) and (device-height: 1024px)\"\n  rel=\"apple-touch-startup-image\"\n/>\n<meta\n  name=\"apple-mobile-web-app-status-bar-style\"\n  content=\"black-translucent\"\n/>\n```\n\n### `alternates`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  alternates: {\n    canonical: 'https://nextjs.org',\n    languages: {\n      'en-US': 'https://nextjs.org/en-US',\n      'de-DE': 'https://nextjs.org/de-DE',\n    },\n    media: {\n      'only screen and (max-width: 600px)': 'https://nextjs.org/mobile',\n    },\n    types: {\n      'application/rss+xml': 'https://nextjs.org/rss',\n    },\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"canonical\" href=\"https://nextjs.org\" />\n<link rel=\"alternate\" hreflang=\"en-US\" href=\"https://nextjs.org/en-US\" />\n<link rel=\"alternate\" hreflang=\"de-DE\" href=\"https://nextjs.org/de-DE\" />\n<link\n  rel=\"alternate\"\n  media=\"only screen and (max-width: 600px)\"\n  href=\"https://nextjs.org/mobile\"\n/>\n<link\n  rel=\"alternate\"\n  type=\"application/rss+xml\"\n  href=\"https://nextjs.org/rss\"\n/>\n```\n\n### `appLinks`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  appLinks: {\n    ios: {\n      url: 'https://nextjs.org/ios',\n      app_store_id: 'app_store_id',\n    },\n    android: {\n      package: 'com.example.android/package',\n      app_name: 'app_name_android',\n    },\n    web: {\n      url: 'https://nextjs.org/web',\n      should_fallback: true,\n    },\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta property=\"al:ios:url\" content=\"https://nextjs.org/ios\" />\n<meta property=\"al:ios:app_store_id\" content=\"app_store_id\" />\n<meta property=\"al:android:package\" content=\"com.example.android/package\" />\n<meta property=\"al:android:app_name\" content=\"app_name_android\" />\n<meta property=\"al:web:url\" content=\"https://nextjs.org/web\" />\n<meta property=\"al:web:should_fallback\" content=\"true\" />\n```\n\n### `archives`\n\nDescribes a collection of records, documents, or other materials of historical interest ([source](https://www.w3.org/TR/2011/WD-html5-20110113/links.html#rel-archives)).\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  archives: ['https://nextjs.org/13'],\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"archives\" href=\"https://nextjs.org/13\" />\n```\n\n### `assets`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  assets: ['https://nextjs.org/assets'],\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"assets\" href=\"https://nextjs.org/assets\" />\n```\n\n### `bookmarks`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  bookmarks: ['https://nextjs.org/13'],\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"bookmarks\" href=\"https://nextjs.org/13\" />\n```\n\n### `category`\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  category: 'technology',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"category\" content=\"technology\" />\n```\n\n### `other`\n\nAll metadata options should be covered using the built-in support. However, there may be custom metadata tags specific to your site, or brand new metadata tags just released. You can use the `other` option to render any custom metadata tag.\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  other: {\n    custom: 'meta',\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"custom\" content=\"meta\" />\n```\n\nIf you want to generate multiple same key meta tags you can use array value.\n\n```jsx filename=\"layout.js | page.js\"\nexport const metadata = {\n  other: {\n    custom: ['meta1', 'meta2'],\n  },\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"custom\" content=\"meta1\" /> <meta name=\"custom\" content=\"meta2\" />\n```\n\n## Unsupported Metadata\n\nThe following metadata types do not currently have built-in support. However, they can still be rendered in the layout or page itself.\n\n| Metadata                      | Recommendation                                                                                                                                                                                                                                     |\n| ----------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `<meta http-equiv=\"...\">`     | Use appropriate HTTP Headers via [`redirect()`](/docs/app/api-reference/functions/redirect), [Middleware](/docs/app/building-your-application/routing/middleware#nextresponse), [Security Headers](/docs/app/api-reference/next-config-js/headers) |\n| `<base>`                      | Render the tag in the layout or page itself.                                                                                                                                                                                                       |\n| `<noscript>`                  | Render the tag in the layout or page itself.                                                                                                                                                                                                       |\n| `<style>`                     | Learn more about [styling in Next.js](/docs/app/building-your-application/styling/css-modules).                                                                                                                                                    |\n| `<script>`                    | Learn more about [using scripts](/docs/app/building-your-application/optimizing/scripts).                                                                                                                                                          |\n| `<link rel=\"stylesheet\" />`   | `import` stylesheets directly in the layout or page itself.                                                                                                                                                                                        |\n| `<link rel=\"preload />`       | Use [ReactDOM preload method](#link-relpreload)                                                                                                                                                                                                    |\n| `<link rel=\"preconnect\" />`   | Use [ReactDOM preconnect method](#link-relpreconnect)                                                                                                                                                                                              |\n| `<link rel=\"dns-prefetch\" />` | Use [ReactDOM prefetchDNS method](#link-reldns-prefetch)                                                                                                                                                                                           |\n\n### Resource hints\n\nThe `<link>` element has a number of `rel` keywords that can be used to hint to the browser that an external resource is likely to be needed. The browser uses this information to apply preloading optimizations depending on the keyword.\n\nWhile the Metadata API doesn't directly support these hints, you can use new [`ReactDOM` methods](https://github.com/facebook/react/pull/26237) to safely insert them into the `<head>` of the document.\n\n```tsx filename=\"app/preload-resources.tsx\" switcher\n'use client'\n\nimport ReactDOM from 'react-dom'\n\nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n\n  return null\n}\n```\n\n```jsx filename=\"app/preload-resources.js\" switcher\n'use client'\n\nimport ReactDOM from 'react-dom'\n\nexport function PreloadResources() {\n  ReactDOM.preload('...', { as: '...' })\n  ReactDOM.preconnect('...', { crossOrigin: '...' })\n  ReactDOM.prefetchDNS('...')\n\n  return null\n}\n```\n\n##### `<link rel=\"preload\">`\n\nStart loading a resource early in the page rendering (browser) lifecycle. [MDN Docs](https://developer.mozilla.org/docs/Web/HTML/Attributes/rel/preload).\n\n```tsx\nReactDOM.preload(href: string, options: { as: string })\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"preload\" href=\"...\" as=\"...\" />\n```\n\n##### `<link rel=\"preconnect\">`\n\nPreemptively initiate a connection to an origin. [MDN Docs](https://developer.mozilla.org/docs/Web/HTML/Attributes/rel/preconnect).\n\n```tsx\nReactDOM.preconnect(href: string, options?: { crossOrigin?: string })\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"preconnect\" href=\"...\" crossorigin />\n```\n\n##### `<link rel=\"dns-prefetch\">`\n\nAttempt to resolve a domain name before resources get requested. [MDN Docs](https://developer.mozilla.org/docs/Web/HTML/Attributes/rel/dns-prefetch).\n\n```tsx\nReactDOM.prefetchDNS(href: string)\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<link rel=\"dns-prefetch\" href=\"...\" />\n```\n\n> **Good to know**:\n>\n> - These methods are currently only supported in Client Components, which are still Server Side Rendered on initial page load.\n> - Next.js in-built features such as `next/font`, `next/image` and `next/script` automatically handle relevant resource hints.\n\n## Types\n\nYou can add type safety to your metadata by using the `Metadata` type. If you are using the [built-in TypeScript plugin](/docs/app/building-your-application/configuring/typescript) in your IDE, you do not need to manually add the type, but you can still explicitly add it if you want.\n\n### `metadata` object\n\n```tsx\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n```\n\n### `generateMetadata` function\n\n#### Regular function\n\n```tsx\nimport type { Metadata } from 'next'\n\nexport function generateMetadata(): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\n#### Async function\n\n```tsx\nimport type { Metadata } from 'next'\n\nexport async function generateMetadata(): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\n#### With segment props\n\n```tsx\nimport type { Metadata } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport function generateMetadata({ params, searchParams }: Props): Metadata {\n  return {\n    title: 'Next.js',\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n#### With parent metadata\n\n```tsx\nimport type { Metadata, ResolvingMetadata } from 'next'\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  return {\n    title: 'Next.js',\n  }\n}\n```\n\n#### JavaScript Projects\n\nFor JavaScript projects, you can use JSDoc to add type safety.\n\n```js\n/** @type {import(\"next\").Metadata} */\nexport const metadata = {\n  title: 'Next.js',\n}\n```\n\n## Version History\n\n| Version   | Changes                                                                                                                                                 |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `v13.2.0` | `viewport`, `themeColor`, and `colorScheme` deprecated in favor of the [`viewport` configuration](/docs/app/api-reference/functions/generate-viewport). |\n| `v13.2.0` | `metadata` and `generateMetadata` introduced.                                                                                                           |\n", "02-api-reference/04-functions/unstable_noStore.mdx": "---\ntitle: unstable_noStore\ndescription: API Reference for the unstable_noStore function.\n---\n\n`unstable_noStore` can be used to declaratively opt out of static rendering and indicate a particular component should not be cached.\n\n```jsx\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default async function Component() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n```\n\n> **Good to know**:\n>\n> - `unstable_noStore` is equivalent to `cache: 'no-store'` on a `fetch`\n> - `unstable_noStore` is preferred over `export const dynamic = 'force-dynamic'` as it is more granular and can be used on a per-component basis\n\n- Using `unstable_noStore` inside [`unstable_cache`](/docs/app/api-reference/functions/unstable_cache) will not opt out of static generation. Instead, it will defer to the cache configuration to determine whether to cache the result or not.\n\n## Usage\n\nIf you prefer not to pass additional options to `fetch`, like `cache: 'no-store'` or `next: { revalidate: 0 }`, you can use `noStore()` as a replacement for all of these use cases.\n\n```jsx\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default async function Component() {\n  noStore();\n  const result = await db.query(...);\n  ...\n}\n```\n\n## Version History\n\n| Version   | Changes                        |\n| --------- | ------------------------------ |\n| `v14.0.0` | `unstable_noStore` introduced. |\n", "02-api-reference/04-functions/use-selected-layout-segments.mdx": "---\ntitle: useSelectedLayoutSegments\ndescription: API Reference for the useSelectedLayoutSegments hook.\n---\n\n`useSelectedLayoutSegments` is a **Client Component** hook that lets you read the active route segments **below** the Layout it is called from.\n\nIt is useful for creating UI in parent Layouts that need knowledge of active child segments such as breadcrumbs.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { useSelectedLayoutSegments } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n\n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { useSelectedLayoutSegments } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const segments = useSelectedLayoutSegments()\n\n  return (\n    <ul>\n      {segments.map((segment, index) => (\n        <li key={index}>{segment}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n> **Good to know**:\n>\n> - Since `useSelectedLayoutSegments` is a [Client Component](/docs/app/building-your-application/rendering/client-components) hook, and Layouts are [Server Components](/docs/app/building-your-application/rendering/server-components) by default, `useSelectedLayoutSegments` is usually called via a Client Component that is imported into a Layout.\n> - The returned segments include [Route Groups](/docs/app/building-your-application/routing/route-groups), which you might not want to be included in your UI. You can use the `filter()` array method to remove items that start with a bracket.\n\n## Parameters\n\n```tsx\nconst segments = useSelectedLayoutSegments(parallelRoutesKey?: string)\n```\n\n`useSelectedLayoutSegments` _optionally_ accepts a [`parallelRoutesKey`](/docs/app/building-your-application/routing/parallel-routes#useselectedlayoutsegments), which allows you to read the active route segment within that slot.\n\n## Returns\n\n`useSelectedLayoutSegments` returns an array of strings containing the active segments one level down from the layout the hook was called from. Or an empty array if none exist.\n\nFor example, given the Layouts and URLs below, the returned segments would be:\n\n| Layout                    | Visited URL           | Returned Segments           |\n| ------------------------- | --------------------- | --------------------------- |\n| `app/layout.js`           | `/`                   | `[]`                        |\n| `app/layout.js`           | `/dashboard`          | `['dashboard']`             |\n| `app/layout.js`           | `/dashboard/settings` | `['dashboard', 'settings']` |\n| `app/dashboard/layout.js` | `/dashboard`          | `[]`                        |\n| `app/dashboard/layout.js` | `/dashboard/settings` | `['settings']`              |\n\n## Version History\n\n| Version   | Changes                                 |\n| --------- | --------------------------------------- |\n| `v13.0.0` | `useSelectedLayoutSegments` introduced. |\n", "02-api-reference/04-functions/use-search-params.mdx": "---\ntitle: useSearchParams\ndescription: API Reference for the useSearchParams hook.\n---\n\n`useSearchParams` is a **Client Component** hook that lets you read the current URL's **query string**.\n\n`useSearchParams` returns a **read-only** version of the [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) interface.\n\n```tsx filename=\"app/dashboard/search-bar.tsx\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\n```\n\n```jsx filename=\"app/dashboard/search-bar.js\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // URL -> `/dashboard?search=my-project`\n  // `search` -> 'my-project'\n  return <>Search: {search}</>\n}\n```\n\n## Parameters\n\n```tsx\nconst searchParams = useSearchParams()\n```\n\n`useSearchParams` does not take any parameters.\n\n## Returns\n\n`useSearchParams` returns a **read-only** version of the [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams) interface, which includes utility methods for reading the URL's query string:\n\n- [`URLSearchParams.get()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get): Returns the first value associated with the search parameter. For example:\n\n  | URL                  | `searchParams.get(\"a\")`                                                                                         |\n  | -------------------- | --------------------------------------------------------------------------------------------------------------- |\n  | `/dashboard?a=1`     | `'1'`                                                                                                           |\n  | `/dashboard?a=`      | `''`                                                                                                            |\n  | `/dashboard?b=3`     | `null`                                                                                                          |\n  | `/dashboard?a=1&a=2` | `'1'` _- use [`getAll()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll) to get all values_ |\n\n- [`URLSearchParams.has()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has): Returns a boolean value indicating if the given parameter exists. For example:\n\n  | URL              | `searchParams.has(\"a\")` |\n  | ---------------- | ----------------------- |\n  | `/dashboard?a=1` | `true`                  |\n  | `/dashboard?b=3` | `false`                 |\n\n- Learn more about other **read-only** methods of [`URLSearchParams`](https://developer.mozilla.org/docs/Web/API/URLSearchParams), including the [`getAll()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll), [`keys()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/keys), [`values()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/values), [`entries()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/entries), [`forEach()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/forEach), and [`toString()`](https://developer.mozilla.org/docs/Web/API/URLSearchParams/toString).\n\n> **Good to know**:\n>\n> - `useSearchParams` is a [Client Component](/docs/app/building-your-application/rendering/client-components) hook and is **not supported** in [Server Components](/docs/app/building-your-application/rendering/server-components) to prevent stale values during [partial rendering](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering).\n> - If an application includes the `/pages` directory, `useSearchParams` will return `ReadonlyURLSearchParams | null`. The `null` value is for compatibility during migration since search params cannot be known during pre-rendering of a page that doesn't use `getServerSideProps`\n\n### Static Rendering\n\nIf a route is [statically rendered](/docs/app/building-your-application/rendering/server-components#static-rendering-default), calling `useSearchParams` will cause the Client Component tree up to the closest [`Suspense` boundary](/docs/app/building-your-application/routing/loading-ui-and-streaming#example) to be client-side rendered.\n\nThis allows a part of the route to be statically rendered while the dynamic part that uses `useSearchParams` is client-side rendered.\n\nWe recommend wrapping the Client Component that uses `useSearchParams` in a `<Suspense/>` boundary. This will allow any Client Components above it to be statically rendered and sent as part of initial HTML. [Example](/docs/app/api-reference/functions/use-search-params#static-rendering).\n\nFor example:\n\n```tsx filename=\"app/dashboard/search-bar.tsx\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will not be logged on the server when using static rendering\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n```\n\n```jsx filename=\"app/dashboard/search-bar.js\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will not be logged on the server when using static rendering\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n```\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/page.js\" switcher\nimport { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n## Behavior\n\n### Dynamic Rendering\n\nIf a route is [dynamically rendered](/docs/app/building-your-application/rendering/server-components#dynamic-rendering), `useSearchParams` will be available on the server during the initial server render of the Client Component.\n\nFor example:\n\n```tsx filename=\"app/dashboard/search-bar.tsx\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will be logged on the server during the initial render\n  // and on the client on subsequent navigations.\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n```\n\n```jsx filename=\"app/dashboard/search-bar.js\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SearchBar() {\n  const searchParams = useSearchParams()\n\n  const search = searchParams.get('search')\n\n  // This will be logged on the server during the initial render\n  // and on the client on subsequent navigations.\n  console.log(search)\n\n  return <>Search: {search}</>\n}\n```\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\nimport SearchBar from './search-bar'\n\nexport const dynamic = 'force-dynamic'\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/page.js\" switcher\nimport SearchBar from './search-bar'\n\nexport const dynamic = 'force-dynamic'\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <SearchBar />\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}\n```\n\n> **Good to know**: Setting the [`dynamic` route segment config option](/docs/app/api-reference/file-conventions/route-segment-config#dynamic) to `force-dynamic` can be used to force dynamic rendering.\n\n### Server Components\n\n#### Pages\n\nTo access search params in [Pages](/docs/app/api-reference/file-conventions/page) (Server Components), use the [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) prop.\n\n#### Layouts\n\nUnlike Pages, [Layouts](/docs/app/api-reference/file-conventions/layout) (Server Components) **do not** receive the `searchParams` prop. This is because a shared layout is [not re-rendered during navigation](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering) which could lead to stale `searchParams` between navigations. View [detailed explanation](/docs/app/api-reference/file-conventions/layout#layouts-do-not-receive-searchparams).\n\nInstead, use the Page [`searchParams`](/docs/app/api-reference/file-conventions/page) prop or the [`useSearchParams`](/docs/app/api-reference/functions/use-search-params) hook in a Client Component, which is re-rendered on the client with the latest `searchParams`.\n\n## Examples\n\n### Updating `searchParams`\n\nYou can use [`useRouter`](/docs/app/api-reference/functions/use-router) or [`Link`](/docs/app/api-reference/components/link) to set new `searchParams`. After a navigation is performed, the current [`page.js`](/docs/app/api-reference/file-conventions/page) will receive an updated [`searchParams` prop](/docs/app/api-reference/file-conventions/page#searchparams-optional).\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name: string, value: string) => {\n      const params = new URLSearchParams(searchParams.toString())\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // Get a new searchParams string by merging the current\n  // searchParams with a provided key/value pair\n  const createQueryString = useCallback(\n    (name, value) => {\n      const params = new URLSearchParams(searchParams)\n      params.set(name, value)\n\n      return params.toString()\n    },\n    [searchParams]\n  )\n\n  return (\n    <>\n      <p>Sort By</p>\n\n      {/* using useRouter */}\n      <button\n        onClick={() => {\n          // <pathname>?sort=asc\n          router.push(pathname + '?' + createQueryString('sort', 'asc'))\n        }}\n      >\n        ASC\n      </button>\n\n      {/* using <Link> */}\n      <Link\n        href={\n          // <pathname>?sort=desc\n          pathname + '?' + createQueryString('sort', 'desc')\n        }\n      >\n        DESC\n      </Link>\n    </>\n  )\n}\n```\n\n## Version History\n\n| Version   | Changes                       |\n| --------- | ----------------------------- |\n| `v13.0.0` | `useSearchParams` introduced. |\n", "02-api-reference/04-functions/generate-static-params.mdx": "---\ntitle: generateStaticParams\ndescription: API reference for the generateStaticParams function.\n---\n\nThe `generateStaticParams` function can be used in combination with [dynamic route segments](/docs/app/building-your-application/routing/dynamic-routes) to [**statically generate**](/docs/app/building-your-application/rendering/server-components#static-rendering-default) routes at build time instead of on-demand at request time.\n\n```jsx filename=\"app/blog/[slug]/page.js\"\n// Return a list of `params` to populate the [slug] dynamic segment\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n\n// Multiple versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\nexport default function Page({ params }) {\n  const { slug } = params\n  // ...\n}\n```\n\n> **Good to know**\n>\n> - You can use the [`dynamicParams`](/docs/app/api-reference/file-conventions/route-segment-config#dynamicparams) segment config option to control what happens when a dynamic segment is visited that was not generated with `generateStaticParams`.\n> - During `next dev`, `generateStaticParams` will be called when you navigate to a route.\n> - During `next build`, `generateStaticParams` runs before the corresponding Layouts or Pages are generated.\n> - During revalidation (ISR), `generateStaticParams` will not be called again.\n> - `generateStaticParams` replaces the [`getStaticPaths`](/docs/pages/api-reference/functions/get-static-paths) function in the Pages Router.\n\n## Parameters\n\n`options.params` (optional)\n\nIf multiple dynamic segments in a route use `generateStaticParams`, the child `generateStaticParams` function is executed once for each set of `params` the parent generates.\n\nThe `params` object contains the populated `params` from the parent `generateStaticParams`, which can be used to [generate the `params` in a child segment](#multiple-dynamic-segments-in-a-route).\n\n## Returns\n\n`generateStaticParams` should return an array of objects where each object represents the populated dynamic segments of a single route.\n\n- Each property in the object is a dynamic segment to be filled in for the route.\n- The properties name is the segment's name, and the properties value is what that segment should be filled in with.\n\n| Example Route                    | `generateStaticParams` Return Type        |\n| -------------------------------- | ----------------------------------------- |\n| `/product/[id]`                  | `{ id: string }[]`                        |\n| `/products/[category]/[product]` | `{ category: string, product: string }[]` |\n| `/products/[...slug]`            | `{ slug: string[] }[]`                    |\n\n## Single Dynamic Segment\n\n```tsx filename=\"app/product/[id]/page.tsx\" switcher\nexport function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/1\n// - /product/2\n// - /product/3\nexport default function Page({ params }: { params: { id: string } }) {\n  const { id } = params\n  // ...\n}\n```\n\n```jsx filename=\"app/product/[id]/page.js\" switcher\nexport function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }, { id: '3' }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/1\n// - /product/2\n// - /product/3\nexport default function Page({ params }) {\n  const { id } = params\n  // ...\n}\n```\n\n## Multiple Dynamic Segments\n\n```tsx filename=\"app/products/[category]/[product]/page.tsx\" switcher\nexport function generateStaticParams() {\n  return [\n    { category: 'a', product: '1' },\n    { category: 'b', product: '2' },\n    { category: 'c', product: '3' },\n  ]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /products/a/1\n// - /products/b/2\n// - /products/c/3\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  const { category, product } = params\n  // ...\n}\n```\n\n```jsx filename=\"app/products/[category]/[product]/page.js\" switcher\nexport function generateStaticParams() {\n  return [\n    { category: 'a', product: '1' },\n    { category: 'b', product: '2' },\n    { category: 'c', product: '3' },\n  ]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /products/a/1\n// - /products/b/2\n// - /products/c/3\nexport default function Page({ params }) {\n  const { category, product } = params\n  // ...\n}\n```\n\n## Catch-all Dynamic Segment\n\n```tsx filename=\"app/product/[...slug]/page.tsx\" switcher\nexport function generateStaticParams() {\n  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/a/1\n// - /product/b/2\n// - /product/c/3\nexport default function Page({ params }: { params: { slug: string[] } }) {\n  const { slug } = params\n  // ...\n}\n```\n\n```jsx filename=\"app/product/[...slug]/page.js\" switcher\nexport function generateStaticParams() {\n  return [{ slug: ['a', '1'] }, { slug: ['b', '2'] }, { slug: ['c', '3'] }]\n}\n\n// Three versions of this page will be statically generated\n// using the `params` returned by `generateStaticParams`\n// - /product/a/1\n// - /product/b/2\n// - /product/c/3\nexport default function Page({ params }) {\n  const { slug } = params\n  // ...\n}\n```\n\n## Examples\n\n### Multiple Dynamic Segments in a Route\n\nYou can generate params for dynamic segments above the current layout or page, but **not below**. For example, given the `app/products/[category]/[product]` route:\n\n- `app/products/[category]/[product]/page.js` can generate params for **both** `[category]` and `[product]`.\n- `app/products/[category]/layout.js` can **only** generate params for `[category]`.\n\nThere are two approaches to generating params for a route with multiple dynamic segments:\n\n### Generate params from the bottom up\n\nGenerate multiple dynamic segments from the child route segment.\n\n```tsx filename=\"app/products/[category]/[product]/page.tsx\" switcher\n// Generate segments for both [category] and [product]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  // ...\n}\n```\n\n```jsx filename=\"app/products/[category]/[product]/page.js\" switcher\n// Generate segments for both [category] and [product]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n    product: product.id,\n  }))\n}\n\nexport default function Page({ params }) {\n  // ...\n}\n```\n\n### Generate params from the top down\n\nGenerate the parent segments first and use the result to generate the child segments.\n\n```tsx filename=\"app/products/[category]/layout.tsx\" switcher\n// Generate segments for [category]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n  }))\n}\n\nexport default function Layout({ params }: { params: { category: string } }) {\n  // ...\n}\n```\n\n```jsx filename=\"app/products/[category]/layout.js\" switcher\n// Generate segments for [category]\nexport async function generateStaticParams() {\n  const products = await fetch('https://.../products').then((res) => res.json())\n\n  return products.map((product) => ({\n    category: product.category.slug,\n  }))\n}\n\nexport default function Layout({ params }) {\n  // ...\n}\n```\n\nA child route segment's `generateStaticParams` function is executed once for each segment a parent `generateStaticParams` generates.\n\nThe child `generateStaticParams` function can use the `params` returned from the parent `generateStaticParams` function to dynamically generate its own segments.\n\n```tsx filename=\"app/products/[category]/[product]/page.tsx\" switcher\n// Generate segments for [product] using the `params` passed from\n// the parent segment's `generateStaticParams` function\nexport async function generateStaticParams({\n  params: { category },\n}: {\n  params: { category: string }\n}) {\n  const products = await fetch(\n    `https://.../products?category=${category}`\n  ).then((res) => res.json())\n\n  return products.map((product) => ({\n    product: product.id,\n  }))\n}\n\nexport default function Page({\n  params,\n}: {\n  params: { category: string; product: string }\n}) {\n  // ...\n}\n```\n\n```jsx filename=\"app/products/[category]/[product]/page.js\" switcher\n// Generate segments for [product] using the `params` passed from\n// the parent segment's `generateStaticParams` function\nexport async function generateStaticParams({ params: { category } }) {\n  const products = await fetch(\n    `https://.../products?category=${category}`\n  ).then((res) => res.json())\n\n  return products.map((product) => ({\n    product: product.id,\n  }))\n}\n\nexport default function Page({ params }) {\n  // ...\n}\n```\n\n> **Good to know**: `fetch` requests are automatically [memoized](/docs/app/building-your-application/caching#request-memoization) for the same data across all `generate`-prefixed functions, Layouts, Pages, and Server Components. React [`cache` can be used](/docs/app/building-your-application/caching#request-memoization) if `fetch` is unavailable.\n\n### Generate only a subset of params\n\nYou can generate a subset of params for a route by returning an array of objects with only the dynamic segments you want to generate. Then, by using the [`dynamicParams`](/docs/app/api-reference/file-conventions/route-segment-config#dynamicparams) segment config option, you can control what happens when a dynamic segment is visited that was not generated with `generateStaticParams`.\n\n```jsx filename=\"app/blog/[slug]/page.js\"\n// All posts besides the top 10 will be a 404\nexport const dynamicParams = false\n\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n  const topPosts = posts.slice(0, 10)\n\n  return topPosts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n## Version History\n\n| Version   | Changes                            |\n| --------- | ---------------------------------- |\n| `v13.0.0` | `generateStaticParams` introduced. |\n", "02-api-reference/04-functions/revalidatePath.mdx": "---\ntitle: revalidatePath\ndescription: API Reference for the revalidatePath function.\n---\n\n`revalidatePath` allows you to purge [cached data](/docs/app/building-your-application/caching) on-demand for a specific path.\n\n> **Good to know**:\n>\n> - `revalidatePath` is available in both [Node.js and Edge runtimes](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes).\n> - `revalidatePath` only invalidates the cache when the included path is next visited. This means calling `revalidatePath` with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.\n> - Currently, `revalidatePath` invalidates all the routes in the [client-side Router Cache](/docs/app/building-your-application/caching#router-cache). This behavior is temporary and will be updated in the future to apply only to the specific path.\n> - Using `revalidatePath` invalidates **only the specific path** in the [server-side Route Cache](/docs/app/building-your-application/caching#full-route-cache).\n\n## Parameters\n\n```tsx\nrevalidatePath(path: string, type?: 'page' | 'layout'): void;\n```\n\n- `path`: Either a string representing the filesystem path associated with the data you want to revalidate (for example, `/product/[slug]/page`), or the literal route segment (for example, `/product/123`). Must be less than 1024 characters. This value is case-sensitive.\n- `type`: (optional) `'page'` or `'layout'` string to change the type of path to revalidate. If `path` contains a dynamic segment (for example, `/product/[slug]/page`), this parameter is required.\n\n## Returns\n\n`revalidatePath` does not return any value.\n\n## Examples\n\n### Revalidating A Specific URL\n\n```ts\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/post-1')\n```\n\nThis will revalidate one specific URL on the next page visit.\n\n### Revalidating A Page Path\n\n```ts\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'page')\n// or with route groups\nrevalidatePath('/(main)/post/[slug]', 'page')\n```\n\nThis will revalidate any URL that matches the provided `page` file on the next page visit. This will _not_ invalidate pages beneath the specific page. For example, `/blog/[slug]` won't invalidate `/blog/[slug]/[author]`.\n\n### Revalidating A Layout Path\n\n```ts\nimport { revalidatePath } from 'next/cache'\nrevalidatePath('/blog/[slug]', 'layout')\n// or with route groups\nrevalidatePath('/(main)/post/[slug]', 'layout')\n```\n\nThis will revalidate any URL that matches the provided `layout` file on the next page visit. This will cause pages beneath with the same layout to revalidate on the next visit. For example, in the above case, `/blog/[slug]/[another]` would also revalidate on the next visit.\n\n### Revalidating All Data\n\n```ts\nimport { revalidatePath } from 'next/cache'\n\nrevalidatePath('/', 'layout')\n```\n\nThis will purge the Client-side Router Cache, and revalidate the Data Cache on the next page visit.\n\n### Server Action\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport default async function submit() {\n  await submitForm()\n  revalidatePath('/')\n}\n```\n\n### Route Handler\n\n```ts filename=\"app/api/revalidate/route.ts\" switcher\nimport { revalidatePath } from 'next/cache'\nimport { NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const path = request.nextUrl.searchParams.get('path')\n\n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n\n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}\n```\n\n```js filename=\"app/api/revalidate/route.js\" switcher\nimport { revalidatePath } from 'next/cache'\n\nexport async function GET(request) {\n  const path = request.nextUrl.searchParams.get('path')\n\n  if (path) {\n    revalidatePath(path)\n    return Response.json({ revalidated: true, now: Date.now() })\n  }\n\n  return Response.json({\n    revalidated: false,\n    now: Date.now(),\n    message: 'Missing path to revalidate',\n  })\n}\n```\n", "02-api-reference/04-functions/use-pathname.mdx": "---\ntitle: usePathname\ndescription: API Reference for the usePathname hook.\n---\n\n`usePathname` is a **Client Component** hook that lets you read the current URL's **pathname**.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const pathname = usePathname()\n  return <p>Current pathname: {pathname}</p>\n}\n```\n\n`usePathname` intentionally requires using a [Client Component](/docs/app/building-your-application/rendering/client-components). It's important to note Client Components are not a de-optimization. They are an integral part of the [Server Components](/docs/app/building-your-application/rendering/server-components) architecture.\n\nFor example, a Client Component with `usePathname` will be rendered into HTML on the initial page load. When navigating to a new route, this component does not need to be re-fetched. Instead, the component is downloaded once (in the client JavaScript bundle), and re-renders based on the current state.\n\n> **Good to know**:\n>\n> - Reading the current URL from a [Server Component](/docs/app/building-your-application/rendering/server-components) is not supported. This design is intentional to support layout state being preserved across page navigations.\n> - Compatibility mode:\n>   - `usePathname` can return `null` when a [fallback route](/docs/pages/api-reference/functions/get-static-paths#fallback-true) is being rendered or when a `pages` directory page has been [automatically statically optimized](/docs/pages/building-your-application/rendering/automatic-static-optimization) by Next.js and the router is not ready.\n>   - Next.js will automatically update your types if it detects both an `app` and `pages` directory in your project.\n\n## Parameters\n\n```tsx\nconst pathname = usePathname()\n```\n\n`usePathname` does not take any parameters.\n\n## Returns\n\n`usePathname` returns a string of the current URL's pathname. For example:\n\n| URL                 | Returned value        |\n| ------------------- | --------------------- |\n| `/`                 | `'/'`                 |\n| `/dashboard`        | `'/dashboard'`        |\n| `/dashboard?v=2`    | `'/dashboard'`        |\n| `/blog/hello-world` | `'/blog/hello-world'` |\n\n## Examples\n\n### Do something in response to a route change\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nfunction ExampleClientComponent() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n  useEffect(() => {\n    // Do something here...\n  }, [pathname, searchParams])\n}\n```\n\n| Version   | Changes                   |\n| --------- | ------------------------- |\n| `v13.0.0` | `usePathname` introduced. |\n", "02-api-reference/04-functions/cookies.mdx": "---\ntitle: cookies\ndescription: API Reference for the cookies function.\nrelated:\n  title: Next Steps\n  description: For more information on what to do next, we recommend the following sections\n  links:\n    - app/building-your-application/data-fetching/server-actions-and-mutations\n---\n\nThe `cookies` function allows you to read the HTTP incoming request cookies from a [Server Component](/docs/app/building-your-application/rendering/server-components) or write outgoing request cookies in a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) or [Route Handler](/docs/app/building-your-application/routing/route-handlers).\n\n> **Good to know**: `cookies()` is a **[Dynamic Function](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions)** whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into **[dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering)** at request time.\n\n## `cookies().get(name)`\n\nA method that takes a cookie name and returns an object with name and value. If a cookie with `name` isn't found, it returns `undefined`. If multiple cookies match, it will only return the first match.\n\n```jsx filename=\"app/page.js\"\nimport { cookies } from 'next/headers'\n\nexport default function Page() {\n  const cookieStore = cookies()\n  const theme = cookieStore.get('theme')\n  return '...'\n}\n```\n\n## `cookies().getAll()`\n\nA method that is similar to `get`, but returns a list of all the cookies with a matching `name`. If `name` is unspecified, it returns all the available cookies.\n\n```jsx filename=\"app/page.js\"\nimport { cookies } from 'next/headers'\n\nexport default function Page() {\n  const cookieStore = cookies()\n  return cookieStore.getAll().map((cookie) => (\n    <div key={cookie.name}>\n      <p>Name: {cookie.name}</p>\n      <p>Value: {cookie.value}</p>\n    </div>\n  ))\n}\n```\n\n## `cookies().has(name)`\n\nA method that takes a cookie name and returns a `boolean` based on if the cookie exists (`true`) or not (`false`).\n\n```jsx filename=\"app/page.js\"\nimport { cookies } from 'next/headers'\n\nexport default function Page() {\n  const cookieStore = cookies()\n  const hasCookie = cookieStore.has('theme')\n  return '...'\n}\n```\n\n## `cookies().set(name, value, options)`\n\nA method that takes a cookie name, value, and options and sets the outgoing request cookie.\n\n> **Good to know**: HTTP does not allow setting cookies after streaming starts, so you must use `.set()` in a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) or [Route Handler](/docs/app/building-your-application/routing/route-handlers).\n\n```js filename=\"app/actions.js\"\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function create(data) {\n  cookies().set('name', 'lee')\n  // or\n  cookies().set('name', 'lee', { secure: true })\n  // or\n  cookies().set({\n    name: 'name',\n    value: 'lee',\n    httpOnly: true,\n    path: '/',\n  })\n}\n```\n\n## Deleting cookies\n\n> **Good to know**: You can only delete cookies in a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) or [Route Handler](/docs/app/building-your-application/routing/route-handlers).\n\nThere are several options for deleting a cookie:\n\n### `cookies().delete(name)`\n\nYou can explicitly delete a cookie with a given name.\n\n```js filename=\"app/actions.js\"\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function delete(data) {\n  cookies().delete('name')\n}\n```\n\n### `cookies().set(name, '')`\n\nAlternatively, you can set a new cookie with the same name and an empty value.\n\n```js filename=\"app/actions.js\"\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function delete(data) {\n  cookies().set('name', '')\n}\n```\n\n> **Good to know**: `.set()` is only available in a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) or [Route Handler](/docs/app/building-your-application/routing/route-handlers).\n\n### `cookies().set(name, value, { maxAge: 0 })`\n\nSetting `maxAge` to 0 will immediately expire a cookie.\n\n```js filename=\"app/actions.js\"\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function delete(data) {\n  cookies().set('name', 'value', { maxAge: 0 })\n}\n```\n\n### `cookies().set(name, value, { expires: timestamp })`\n\nSetting `expires` to any value in the past will immediately expire a cookie.\n\n```js filename=\"app/actions.js\"\n'use server'\n\nimport { cookies } from 'next/headers'\n\nasync function delete(data) {\n  const oneDay = 24 * 60 * 60 * 1000\n  cookies().set('name', 'value', { expires: Date.now() - oneDay })\n}\n```\n\n> **Good to know**: You can only delete cookies that belong to the same domain from which `.set()` is called. Additionally, the code must be executed on the same protocol (HTTP or HTTPS) as the cookie you want to delete.\n\n## Version History\n\n| Version   | Changes               |\n| --------- | --------------------- |\n| `v13.0.0` | `cookies` introduced. |\n", "02-api-reference/04-functions/use-router.mdx": "---\ntitle: useRouter\ndescription: API reference for the useRouter hook.\n---\n\nThe `useRouter` hook allows you to programmatically change routes inside [Client Components](/docs/app/building-your-application/rendering/client-components).\n\n> **Recommendation:** Use the [`<Link>` component](/docs/app/building-your-application/routing/linking-and-navigating#link-component) for navigation unless you have a specific requirement for using `useRouter`.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n## `useRouter()`\n\n- `router.push(href: string, { scroll: boolean })`: Perform a client-side navigation to the provided route. Adds a new entry into the [browser\u2019s history](https://developer.mozilla.org/docs/Web/API/History_API) stack.\n- `router.replace(href: string, { scroll: boolean })`: Perform a client-side navigation to the provided route without adding a new entry into the [browser\u2019s history stack](https://developer.mozilla.org/docs/Web/API/History_API).\n- `router.refresh()`: Refresh the current route. Making a new request to the server, re-fetching data requests, and re-rendering Server Components. The client will merge the updated React Server Component payload without losing unaffected client-side React (e.g. `useState`) or browser state (e.g. scroll position).\n- `router.prefetch(href: string)`: [Prefetch](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) the provided route for faster client-side transitions.\n- `router.back()`: Navigate back to the previous route in the browser\u2019s history stack.\n- `router.forward()`: Navigate forwards to the next page in the browser\u2019s history stack.\n\n> **Good to know**:\n>\n> - The `<Link>` component automatically prefetch routes as they become visible in the viewport.\n> - `refresh()` could re-produce the same result if fetch requests are cached. Other dynamic functions like `cookies` and `headers` could also change the response.\n\n### Migrating from `next/router`\n\n- The `useRouter` hook should be imported from `next/navigation` and not `next/router` when using the App Router\n- The `pathname` string has been removed and is replaced by [`usePathname()`](/docs/app/api-reference/functions/use-pathname)\n- The `query` object has been removed and is replaced by [`useSearchParams()`](/docs/app/api-reference/functions/use-search-params)\n- `router.events` has been replaced. [See below.](#router-events)\n\n[View the full migration guide](/docs/app/building-your-application/upgrading/app-router-migration).\n\n## Examples\n\n### Router events\n\nYou can listen for page changes by composing other Client Component hooks like `usePathname` and `useSearchParams`.\n\n```jsx filename=\"app/components/navigation-events.js\"\n'use client'\n\nimport { useEffect } from 'react'\nimport { usePathname, useSearchParams } from 'next/navigation'\n\nexport function NavigationEvents() {\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  useEffect(() => {\n    const url = `${pathname}?${searchParams}`\n    console.log(url)\n    // You can now use the current URL\n    // ...\n  }, [pathname, searchParams])\n\n  return null\n}\n```\n\nWhich can be imported into a layout.\n\n```jsx filename=\"app/layout.js\" highlight={2,10-12}\nimport { Suspense } from 'react'\nimport { NavigationEvents } from './components/navigation-events'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n\n        <Suspense fallback={null}>\n          <NavigationEvents />\n        </Suspense>\n      </body>\n    </html>\n  )\n}\n```\n\n> **Good to know**: `<NavigationEvents>` is wrapped in a [`Suspense` boundary](/docs/app/building-your-application/routing/loading-ui-and-streaming#example) because[`useSearchParams()`](/docs/app/api-reference/functions/use-search-params) causes client-side rendering up to the closest `Suspense` boundary during [static rendering](/docs/app/building-your-application/rendering/server-components#static-rendering-default). [Learn more](/docs/app/api-reference/functions/use-search-params#behavior).\n\n### Disabling scroll restoration\n\nBy default, Next.js will scroll to the top of the page when navigating to a new route. You can disable this behavior by passing `scroll: false` to `router.push()` or `router.replace()`.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n```\n\n```jsx filename=\"app/example-client-component.jsx\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => router.push('/dashboard', { scroll: false })}\n    >\n      Dashboard\n    </button>\n  )\n}\n```\n\n## Version History\n\n| Version   | Changes                                        |\n| --------- | ---------------------------------------------- |\n| `v13.0.0` | `useRouter` from `next/navigation` introduced. |\n", "02-api-reference/04-functions/index.mdx": "---\ntitle: Functions\ndescription: API Reference for Next.js Functions and Hooks.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n", "02-api-reference/04-functions/unstable_cache.mdx": "---\ntitle: unstable_cache\ndescription: API Reference for the unstable_cache function.\n---\n\n`unstable_cache` allows you to cache the results of expensive operations, like database queries, and reuse them across multiple requests.\n\n```jsx\nimport { getUser } from './data';\nimport { unstable_cache } from 'next/cache';\n\nconst getCachedUser = unstable_cache(\n  async (id) => getUser(id),\n  ['my-app-user']\n);\n\nexport default async function Component({ userID }) {\n  const user = await getCachedUser(userID);\n  ...\n}\n```\n\n> **Good to know**:\n>\n> - Accessing dynamic data sources such as `headers` or `cookies` inside a cache scope is not supported. If you need this data inside a cached function use `headers` outside of the cached function and pass the required dynamic data in as an argument.\n> - This API uses Next.js' built-in [Data Cache](/docs/app/building-your-application/caching#data-cache) to persist the result across requests and deployments.\n\n> **Warning**: This API is unstable and may change in the future. We will provide migration documentation and codemods, if needed, as this API stabilizes.\n\n## Parameters\n\n```jsx\nconst data = unstable_cache(fetchData, keyParts, options)()\n```\n\n- `fetchData`: This is an asynchronous function that fetches the data you want to cache. It must be a function that returns a `Promise`.\n- `keyParts`: This is an array that identifies the cached key. It must contain globally unique values that together identify the key of the data being cached. The cache key also includes the arguments passed to the function.\n- `options`: This is an object that controls how the cache behaves. It can contain the following properties:\n  - `tags`: An array of tags that can be used to control cache invalidation.\n  - `revalidate`: The number of seconds after which the cache should be revalidated. Omit or pass `false` to cache indefinitely or until matching `revalidateTag()` or `revalidatePath()` methods are called.\n\n## Returns\n\n`unstable_cache` returns a function that when invoked, returns a Promise that resolves to the cached data. If the data is not in the cache, the provided function will be invoked, and its result will be cached and returned.\n\n## Version History\n\n| Version   | Changes                      |\n| --------- | ---------------------------- |\n| `v14.0.0` | `unstable_cache` introduced. |\n", "02-api-reference/04-functions/revalidateTag.mdx": "---\ntitle: revalidateTag\ndescription: API Reference for the revalidateTag function.\n---\n\n`revalidateTag` allows you to purge [cached data](/docs/app/building-your-application/caching) on-demand for a specific cache tag.\n\n> **Good to know**:\n>\n> - `revalidateTag` is available in both [Node.js and Edge runtimes](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes).\n> - `revalidateTag` only invalidates the cache when the path is next visited. This means calling `revalidateTag` with a dynamic route segment will not immediately trigger many revalidations at once. The invalidation only happens when the path is next visited.\n\n## Parameters\n\n```tsx\nrevalidateTag(tag: string): void;\n```\n\n- `tag`: A string representing the cache tag associated with the data you want to revalidate. Must be less than or equal to 256 characters. This value is case-sensitive.\n\nYou can add tags to `fetch` as follows:\n\n```tsx\nfetch(url, { next: { tags: [...] } });\n```\n\n## Returns\n\n`revalidateTag` does not return any value.\n\n## Examples\n\n### Server Action\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function submit() {\n  await addPost()\n  revalidateTag('posts')\n}\n```\n\n### Route Handler\n\n```ts filename=\"app/api/revalidate/route.ts\" switcher\nimport { NextRequest } from 'next/server'\nimport { revalidateTag } from 'next/cache'\n\nexport async function GET(request: NextRequest) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}\n```\n\n```js filename=\"app/api/revalidate/route.js\" switcher\nimport { revalidateTag } from 'next/cache'\n\nexport async function GET(request) {\n  const tag = request.nextUrl.searchParams.get('tag')\n  revalidateTag(tag)\n  return Response.json({ revalidated: true, now: Date.now() })\n}\n```\n", "02-api-reference/04-functions/generate-viewport.mdx": "---\ntitle: generateViewport\ndescription: API Reference for the generateViewport function.\nrelated:\n  title: Next Steps\n  description: View all the Metadata API options.\n  links:\n    - app/api-reference/file-conventions/metadata\n    - app/building-your-application/optimizing/metadata\n---\n\nYou can customize the initial viewport of the page with the static `viewport` object or the dynamic `generateViewport` function.\n\n> **Good to know**:\n>\n> - The `viewport` object and `generateViewport` function exports are **only supported in Server Components**.\n> - You cannot export both the `viewport` object and `generateViewport` function from the same route segment.\n> - If you're coming from migrating `metadata` exports, you can use [metadata-to-viewport-export codemod](/docs/app/building-your-application/upgrading/codemods#metadata-to-viewport-export) to update your changes.\n\n## The `viewport` object\n\nTo define the viewport options, export a `viewport` object from a `layout.jsx` or `page.jsx` file.\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n\nexport default function Page() {}\n```\n\n```jsx filename=\"layout.jsx | page.jsx\" switcher\nexport const viewport = {\n  themeColor: 'black',\n}\n\nexport default function Page() {}\n```\n\n## `generateViewport` function\n\n`generateViewport` should return a [`Viewport` object](#viewport-fields) containing one or more viewport fields.\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n```\n\n```jsx filename=\"layout.js | page.js\" switcher\nexport function generateViewport({ params }) {\n  return {\n    themeColor: '...',\n  }\n}\n```\n\n> **Good to know**:\n>\n> - If the viewport doesn't depend on runtime information, it should be defined using the static [`viewport` object](#the-viewport-object) rather than `generateViewport`.\n\n## Viewport Fields\n\n### `themeColor`\n\nLearn more about [`theme-color`](https://developer.mozilla.org/docs/Web/HTML/Element/meta/name/theme-color).\n\n**Simple theme color**\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n```\n\n```jsx filename=\"layout.jsx | page.jsx\" switcher\nexport const viewport = {\n  themeColor: 'black',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"theme-color\" content=\"black\" />\n```\n\n**With media attribute**\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n```\n\n```jsx filename=\"layout.jsx | page.jsx\" switcher\nexport const viewport = {\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: 'cyan' },\n    { media: '(prefers-color-scheme: dark)', color: 'black' },\n  ],\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: light)\" content=\"cyan\" />\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: dark)\" content=\"black\" />\n```\n\n### `width`, `initialScale`, `maximumScale` and `userScalable`\n\n> **Good to know**: The `viewport` meta tag is automatically set, and manual configuration is usually unnecessary as the default is sufficient. However, the information is provided for completeness.\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported by less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n```\n\n```jsx filename=\"layout.jsx | page.jsx\" switcher\nexport const viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 1,\n  userScalable: false,\n  // Also supported by less commonly used\n  // interactiveWidget: 'resizes-visual',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta\n  name=\"viewport\"\n  content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"\n/>\n```\n\n### `colorScheme`\n\nLearn more about [`color-scheme`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name#:~:text=color%2Dscheme%3A%20specifies,of%20the%20following%3A).\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  colorScheme: 'dark',\n}\n```\n\n```jsx filename=\"layout.jsx | page.jsx\" switcher\nexport const viewport = {\n  colorScheme: 'dark',\n}\n```\n\n```html filename=\"<head> output\" hideLineNumbers\n<meta name=\"color-scheme\" content=\"dark\" />\n```\n\n## Types\n\nYou can add type safety to your viewport object by using the `Viewport` type. If you are using the [built-in TypeScript plugin](/docs/app/building-your-application/configuring/typescript) in your IDE, you do not need to manually add the type, but you can still explicitly add it if you want.\n\n### `viewport` object\n\n```tsx\nimport type { Viewport } from 'next'\n\nexport const viewport: Viewport = {\n  themeColor: 'black',\n}\n```\n\n### `generateViewport` function\n\n#### Regular function\n\n```tsx\nimport type { Viewport } from 'next'\n\nexport function generateViewport(): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\n```\n\n#### With segment props\n\n```tsx\nimport type { Viewport } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport function generateViewport({ params, searchParams }: Props): Viewport {\n  return {\n    themeColor: 'black',\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n#### JavaScript Projects\n\nFor JavaScript projects, you can use JSDoc to add type safety.\n\n```js\n/** @type {import(\"next\").Viewport} */\nexport const viewport = {\n  themeColor: 'black',\n}\n```\n\n## Version History\n\n| Version   | Changes                                       |\n| --------- | --------------------------------------------- |\n| `v14.0.0` | `viewport` and `generateViewport` introduced. |\n", "02-api-reference/04-functions/use-report-web-vitals.mdx": "---\ntitle: useReportWebVitals\ndescription: API Reference for the useReportWebVitals function.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThe `useReportWebVitals` hook allows you to report [Core Web Vitals](https://web.dev/vitals/), and can be used in combination with your analytics service.\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n</PagesOnly>\n\n<AppOnly>\n\n```jsx filename=\"app/_components/web-vitals.js\"\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\n```\n\n```jsx filename=\"app/layout.js\"\nimport { WebVitals } from './_components/web-vitals'\n\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n> Since the `useReportWebVitals` hook requires the `\"use client\"` directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the `WebVitals` component.\n\n</AppOnly>\n\n## useReportWebVitals\n\nThe `metric` object passed as the hook's argument consists of a number of properties:\n\n- `id`: Unique identifier for the metric in the context of the current page load\n- `name`: The name of the performance metric. Possible values include names of [Web Vitals](#web-vitals) metrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.\n- `delta`: The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.\n- `entries`: An array of [Performance Entries](https://developer.mozilla.org/docs/Web/API/PerformanceEntry) associated with the metric. These entries provide detailed information about the performance events related to the metric.\n- `navigationType`: Indicates the [type of navigation](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type) that triggered the metric collection. Possible values include `\"navigate\"`, `\"reload\"`, `\"back_forward\"`, and `\"prerender\"`.\n- `rating`: A qualitative rating of the metric value, providing an assessment of the performance. Possible values are `\"good\"`, `\"needs-improvement\"`, and `\"poor\"`. The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.\n- `value`: The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from various [Performance API](https://developer.mozilla.org/docs/Web/API/Performance_API)s.\n\n## Web Vitals\n\n[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:\n\n- [Time to First Byte](https://developer.mozilla.org/docs/Glossary/Time_to_first_byte) (TTFB)\n- [First Contentful Paint](https://developer.mozilla.org/docs/Glossary/First_contentful_paint) (FCP)\n- [Largest Contentful Paint](https://web.dev/lcp/) (LCP)\n- [First Input Delay](https://web.dev/fid/) (FID)\n- [Cumulative Layout Shift](https://web.dev/cls/) (CLS)\n- [Interaction to Next Paint](https://web.dev/inp/) (INP)\n\nYou can handle all the results of these metrics using the `name` property.\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n</PagesOnly>\n\n<AppOnly>\n\n```tsx filename=\"app/components/web-vitals.tsx\" switcher\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n```jsx filename=\"app/components/web-vitals.js\" switcher\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n## Custom Metrics\n\nIn addition to the core metrics listed above, there are some additional custom metrics that\nmeasure the time it takes for the page to hydrate and render:\n\n- `Next.js-hydration`: Length of time it takes for the page to start and finish hydrating (in ms)\n- `Next.js-route-change-to-render`: Length of time it takes for a page to start rendering after a\n  route change (in ms)\n- `Next.js-render`: Length of time it takes for a page to finish render after a route change (in ms)\n\nYou can handle all the results of these metrics separately:\n\n```jsx filename=\"pages/_app.js\"\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'Next.js-hydration':\n        // handle hydration results\n        break\n      case 'Next.js-route-change-to-render':\n        // handle route-change to render results\n        break\n      case 'Next.js-render':\n        // handle render results\n        break\n      default:\n        break\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\nThese metrics work in all browsers that support the [User Timing API](https://caniuse.com/#feat=user-timing).\n\n</PagesOnly>\n\n## Usage on Vercel\n\n[Vercel Speed Insights](https://vercel.com/docs/speed-insights/quickstart) does not `useReportWebVitals`, but `@vercel/speed-insights` package instead.\n`useReportWebVitals` hook is useful in local development, or if you're using a different service for collecting Web Vitals.\n\n## Sending results to external systems\n\nYou can send results to any endpoint to measure and track\nreal user performance on your site. For example:\n\n```js\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n> **Good to know**: If you use [Google Analytics](https://analytics.google.com/analytics/web/), using the\n> `id` value can allow you to construct metric distributions manually (to calculate percentiles,\n> etc.)\n\n> ```js\n> useReportWebVitals(metric => {\n>   // Use `window.gtag` if you initialized Google Analytics as this example:\n>   // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n>   window.gtag('event', metric.name, {\n>     value: Math.round(metric.name === 'CLS' ? metric.value * 1000 : metric.value), // values must be integers\n>     event_label: metric.id, // id unique to current page load\n>     non_interaction: true, // avoids affecting bounce rate.\n>   });\n> }\n> ```\n>\n> Read more about [sending results to Google Analytics](https://github.com/GoogleChrome/web-vitals#send-the-results-to-google-analytics).\n", "02-api-reference/04-functions/headers.mdx": "---\ntitle: headers\ndescription: API reference for the headers function.\n---\n\nThe `headers` function allows you to read the HTTP incoming request headers from a [Server Component](/docs/app/building-your-application/rendering/server-components).\n\n## `headers()`\n\nThis API extends the [Web Headers API](https://developer.mozilla.org/docs/Web/API/Headers). It is **read-only**, meaning you cannot `set` / `delete` the outgoing request headers.\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { headers } from 'next/headers'\n\nexport default function Page() {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return <div>Referer: {referer}</div>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { headers } from 'next/headers'\n\nexport default function Page() {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return <div>Referer: {referer}</div>\n}\n```\n\n> **Good to know**:\n>\n> - `headers()` is a **[Dynamic Function](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions)** whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into **[dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering)** at request time.\n\n### API Reference\n\n```tsx\nconst headersList = headers()\n```\n\n#### Parameters\n\n`headers` does not take any parameters.\n\n#### Returns\n\n`headers` returns a **read-only** [Web Headers](https://developer.mozilla.org/docs/Web/API/Headers) object.\n\n- [`Headers.entries()`](https://developer.mozilla.org/docs/Web/API/Headers/entries): Returns an [`iterator`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through all key/value pairs contained in this object.\n- [`Headers.forEach()`](https://developer.mozilla.org/docs/Web/API/Headers/forEach): Executes a provided function once for each key/value pair in this `Headers` object.\n- [`Headers.get()`](https://developer.mozilla.org/docs/Web/API/Headers/get): Returns a [`String`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) sequence of all the values of a header within a `Headers` object with a given name.\n- [`Headers.has()`](https://developer.mozilla.org/docs/Web/API/Headers/has): Returns a boolean stating whether a `Headers` object contains a certain header.\n- [`Headers.keys()`](https://developer.mozilla.org/docs/Web/API/Headers/keys): Returns an [`iterator`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Iteration_protocols) allowing you to go through all keys of the key/value pairs contained in this object.\n- [`Headers.values()`](https://developer.mozilla.org/docs/Web/API/Headers/values): Returns an [`iterator`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Iteration_protocols) allowing you to go through all values of the key/value pairs contained in this object.\n\n### Examples\n\n#### Usage with Data Fetching\n\n`headers()` can be used in combination with [Suspense for Data Fetching](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating).\n\n```jsx filename=\"app/page.js\"\nimport { Suspense } from 'react'\nimport { headers } from 'next/headers'\n\nasync function User() {\n  const authorization = headers().get('authorization')\n  const res = await fetch('...', {\n    headers: { authorization }, // Forward the authorization header\n  })\n  const user = await res.json()\n\n  return <h1>{user.name}</h1>\n}\n\nexport default function Page() {\n  return (\n    <Suspense fallback={null}>\n      <User />\n    </Suspense>\n  )\n}\n```\n\n#### IP Address\n\n`headers()` can be used to get the IP address of the client.\n\n```jsx filename=\"app/page.js\"\nimport { Suspense } from 'react'\nimport { headers } from 'next/headers'\n\nfunction IP() {\n  const FALLBACK_IP_ADDRESS = '0.0.0.0'\n  const forwardedFor = headers().get('x-forwarded-for')\n\n  if (forwardedFor) {\n    return forwardedFor.split(',')[0] ?? FALLBACK_IP_ADDRESS\n  }\n\n  return headers().get('x-real-ip') ?? FALLBACK_IP_ADDRESS\n}\n\nexport default function Page() {\n  return (\n    <Suspense fallback={null}>\n      <IP />\n    </Suspense>\n  )\n}\n```\n\nIn addition to `x-forwarded-for`, `headers()` can also read:\n\n- `x-real-ip`\n- `x-forwarded-host`\n- `x-forwarded-port`\n- `x-forwarded-proto`\n\n## Version History\n\n| Version   | Changes               |\n| --------- | --------------------- |\n| `v13.0.0` | `headers` introduced. |\n", "02-api-reference/04-functions/draft-mode.mdx": "---\ntitle: draftMode\ndescription: API Reference for the draftMode function.\n---\n\nThe `draftMode` function allows you to detect [Draft Mode](/docs/app/building-your-application/configuring/draft-mode) inside a [Server Component](/docs/app/building-your-application/rendering/server-components).\n\n```jsx filename=\"app/page.js\"\nimport { draftMode } from 'next/headers'\n\nexport default function Page() {\n  const { isEnabled } = draftMode()\n  return (\n    <main>\n      <h1>My Blog Post</h1>\n      <p>Draft Mode is currently {isEnabled ? 'Enabled' : 'Disabled'}</p>\n    </main>\n  )\n}\n```\n\n## Version History\n\n| Version   | Changes                 |\n| --------- | ----------------------- |\n| `v13.4.0` | `draftMode` introduced. |\n", "02-api-reference/04-functions/userAgent.mdx": "---\ntitle: userAgent\ndescription: The userAgent helper extends the Web Request API with additional properties and methods to interact with the user agent object from the request.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThe `userAgent` helper extends the [Web Request API](https://developer.mozilla.org/docs/Web/API/Request) with additional properties and methods to interact with the user agent object from the request.\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextRequest, NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse, userAgent } from 'next/server'\n\nexport function middleware(request) {\n  const url = request.nextUrl\n  const { device } = userAgent(request)\n  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'\n  url.searchParams.set('viewport', viewport)\n  return NextResponse.rewrite(url)\n}\n```\n\n## `isBot`\n\nA boolean indicating whether the request comes from a known bot.\n\n## `browser`\n\nAn object containing information about the browser used in the request.\n\n- `name`: A string representing the browser's name, or `undefined` if not identifiable.\n- `version`: A string representing the browser's version, or `undefined`.\n\n## `device`\n\nAn object containing information about the device used in the request.\n\n- `model`: A string representing the model of the device, or `undefined`.\n- `type`: A string representing the type of the device, such as `console`, `mobile`, `tablet`, `smarttv`, `wearable`, `embedded`, or `undefined`.\n- `vendor`: A string representing the vendor of the device, or `undefined`.\n\n## `engine`\n\nAn object containing information about the browser's engine.\n\n- `name`: A string representing the engine's name. Possible values include: `Amaya`, `Blink`, `EdgeHTML`, `Flow`, `Gecko`, `Goanna`, `iCab`, `KHTML`, `Links`, `Lynx`, `NetFront`, `NetSurf`, `Presto`, `Tasman`, `Trident`, `w3m`, `WebKit` or `undefined`.\n- `version`: A string representing the engine's version, or `undefined`.\n\n## `os`\n\nAn object containing information about the operating system.\n\n- `name`: A string representing the name of the OS, or `undefined`.\n- `version`: A string representing the version of the OS, or `undefined`.\n\n## `cpu`\n\nAn object containing information about the CPU architecture.\n\n- `architecture`: A string representing the architecture of the CPU. Possible values include: `68k`, `amd64`, `arm`, `arm64`, `armhf`, `avr`, `ia32`, `ia64`, `irix`, `irix64`, `mips`, `mips64`, `pa-risc`, `ppc`, `sparc`, `sparc64` or `undefined`\n", "02-api-reference/04-functions/image-response.mdx": "---\ntitle: ImageResponse\ndescription: API Reference for the ImageResponse constructor.\n---\n\nThe `ImageResponse` constructor allows you to generate dynamic images using JSX and CSS. This is useful for generating social media images such as Open Graph images, Twitter cards, and more.\n\nThe following options are available for `ImageResponse`:\n\n```jsx\nimport { ImageResponse } from 'next/og'\n\nnew ImageResponse(\n  element: ReactElement,\n  options: {\n    width?: number = 1200\n    height?: number = 630\n    emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji',\n    fonts?: {\n      name: string,\n      data: ArrayBuffer,\n      weight: number,\n      style: 'normal' | 'italic'\n    }[]\n    debug?: boolean = false\n\n    // Options that will be passed to the HTTP response\n    status?: number = 200\n    statusText?: string\n    headers?: Record<string, string>\n  },\n)\n```\n\n## Supported CSS Properties\n\nPlease refer to [Satori\u2019s documentation](https://github.com/vercel/satori#css) for a list of supported HTML and CSS features.\n\n## Version History\n\n| Version   | Changes                                               |\n| --------- | ----------------------------------------------------- |\n| `v14.0.0` | `ImageResponse` moved from `next/server` to `next/og` |\n| `v13.3.0` | `ImageResponse` can be imported from `next/server`.   |\n| `v13.0.0` | `ImageResponse` introduced via `@vercel/og` package.  |\n", "02-api-reference/04-functions/permanentRedirect.mdx": "---\ntitle: permanentRedirect\ndescription: API Reference for the permanentRedirect function.\nrelated:\n  links:\n    - app/api-reference/functions/redirect\n---\n\nThe `permanentRedirect` function allows you to redirect the user to another URL. `permanentRedirect` can be used in Server Components, Client Components, [Route Handlers](/docs/app/building-your-application/routing/route-handlers), and [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\nWhen used in a streaming context, this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 308 (Permanent) HTTP redirect response to the caller.\n\nIf a resource doesn't exist, you can use the [`notFound` function](/docs/app/api-reference/functions/not-found) instead.\n\n> **Good to know**: If you prefer to return a 307 (Temporary) HTTP redirect instead of 308 (Permanent), you can use the [`redirect` function](/docs/app/api-reference/functions/redirect) instead.\n\n## Parameters\n\nThe `permanentRedirect` function accepts two arguments:\n\n```js\npermanentRedirect(path, type)\n```\n\n| Parameter | Type                                                          | Description                                                 |\n| --------- | ------------------------------------------------------------- | ----------------------------------------------------------- |\n| `path`    | `string`                                                      | The URL to redirect to. Can be a relative or absolute path. |\n| `type`    | `'replace'` (default) or `'push'` (default in Server Actions) | The type of redirect to perform.                            |\n\nBy default, `permanentRedirect` will use `push` (adding a new entry to the browser history stack) in [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) and `replace` (replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the `type` parameter.\n\nThe `type` parameter has no effect when used in Server Components.\n\n## Returns\n\n`permanentRedirect` does not return any value.\n\n## Example\n\nInvoking the `permanentRedirect()` function throws a `NEXT_REDIRECT` error and terminates rendering of the route segment in which it was thrown.\n\n```jsx filename=\"app/team/[id]/page.js\"\nimport { permanentRedirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    permanentRedirect('/login')\n  }\n\n  // ...\n}\n```\n\n> **Good to know**: `permanentRedirect` does not require you to use `return permanentRedirect()` as it uses the TypeScript [`never`](https://www.typescriptlang.org/docs/handbook/2/functions.html#never) type.\n", "02-api-reference/04-functions/not-found.mdx": "---\ntitle: notFound\ndescription: API Reference for the notFound function.\n---\n\nThe `notFound` function allows you to render the [`not-found file`](/docs/app/api-reference/file-conventions/not-found) within a route segment as well as inject a `<meta name=\"robots\" content=\"noindex\" />` tag.\n\n## `notFound()`\n\nInvoking the `notFound()` function throws a `NEXT_NOT_FOUND` error and terminates rendering of the route segment in which it was thrown. Specifying a [**not-found** file](/docs/app/api-reference/file-conventions/not-found) allows you to gracefully handle such errors by rendering a Not Found UI within the segment.\n\n```jsx filename=\"app/user/[id]/page.js\"\nimport { notFound } from 'next/navigation'\n\nasync function fetchUser(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const user = await fetchUser(params.id)\n\n  if (!user) {\n    notFound()\n  }\n\n  // ...\n}\n```\n\n> **Good to know**: `notFound()` does not require you to use `return notFound()` due to using the TypeScript [`never`](https://www.typescriptlang.org/docs/handbook/2/functions.html#never) type.\n\n## Version History\n\n| Version   | Changes                |\n| --------- | ---------------------- |\n| `v13.0.0` | `notFound` introduced. |\n", "02-api-reference/04-functions/redirect.mdx": "---\ntitle: redirect\ndescription: API Reference for the redirect function.\nrelated:\n  links:\n    - app/api-reference/functions/permanentRedirect\n---\n\nThe `redirect` function allows you to redirect the user to another URL. `redirect` can be used in [Server Components](/docs/app/building-your-application/rendering/server-components), [Route Handlers](/docs/app/building-your-application/routing/route-handlers), and [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\nWhen used in a [streaming context](/docs/app/building-your-application/routing/loading-ui-and-streaming#what-is-streaming), this will insert a meta tag to emit the redirect on the client side. When used in a server action, it will serve a 303 HTTP redirect response to the caller. Otherwise, it will serve a 307 HTTP redirect response to the caller.\n\nIf a resource doesn't exist, you can use the [`notFound` function](/docs/app/api-reference/functions/not-found) instead.\n\n> **Good to know**:\n>\n> - In Server Actions and Route Handlers, `redirect` should be called after the `try/catch` block.\n> - If you prefer to return a 308 (Permanent) HTTP redirect instead of 307 (Temporary), you can use the [`permanentRedirect` function](/docs/app/api-reference/functions/permanentRedirect) instead.\n\n## Parameters\n\nThe `redirect` function accepts two arguments:\n\n```js\nredirect(path, type)\n```\n\n| Parameter | Type                                                          | Description                                                 |\n| --------- | ------------------------------------------------------------- | ----------------------------------------------------------- |\n| `path`    | `string`                                                      | The URL to redirect to. Can be a relative or absolute path. |\n| `type`    | `'replace'` (default) or `'push'` (default in Server Actions) | The type of redirect to perform.                            |\n\nBy default, `redirect` will use `push` (adding a new entry to the browser history stack) in [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) and `replace` (replacing the current URL in the browser history stack) everywhere else. You can override this behavior by specifying the `type` parameter.\n\nThe `type` parameter has no effect when used in Server Components.\n\n## Returns\n\n`redirect` does not return any value.\n\n## Example\n\n### Server Component\n\nInvoking the `redirect()` function throws a `NEXT_REDIRECT` error and terminates rendering of the route segment in which it was thrown.\n\n```jsx filename=\"app/team/[id]/page.js\"\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n> **Good to know**: `redirect` does not require you to use `return redirect()` as it uses the TypeScript [`never`](https://www.typescriptlang.org/docs/handbook/2/functions.html#never) type.\n\n### Client Component\n\n`redirect` can be used in a Client Component through a Server Action. If you need to use an event handler to redirect the user, you can use the [`useRouter`](/docs/app/api-reference/functions/use-router) hook.\n\n```tsx filename=\"app/client-redirect.tsx\" switcher\n'use client'\n\nimport { navigate } from './actions'\n\nexport function ClientRedirect() {\n  return (\n    <form action={navigate}>\n      <input type=\"text\" name=\"id\" />\n      <button>Submit</button>\n    </form>\n  )\n}\n```\n\n```jsx filename=\"app/client-redirect.jsx\" switcher\n'use client'\n\nimport { navigate } from './actions'\n\nexport function ClientRedirect() {\n  return (\n    <form action={navigate}>\n      <input type=\"text\" name=\"id\" />\n      <button>Submit</button>\n    </form>\n  )\n}\n```\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function navigate(data: FormData) {\n  redirect(`/posts/${data.get('id')}`)\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { redirect } from 'next/navigation'\n\nexport async function navigate(data) {\n  redirect(`/posts/${data.get('id')}`)\n}\n```\n\n## FAQ\n\n### Why does `redirect` use 307 and 308?\n\nWhen using `redirect()` you may notice that the status codes used are `307` for a temporary redirect, and `308` for a permanent redirect. While traditionally a `302` was used for a temporary redirect, and a `301` for a permanent redirect, many browsers changed the request method of the redirect, from a `POST` to `GET` request when using a `302`, regardless of the origins request method.\n\nTaking the following example of a redirect from `/users` to `/people`, if you make a `POST` request to `/users` to create a new user, and are conforming to a `302` temporary redirect, the request method will be changed from a `POST` to a `GET` request. This doesn't make sense, as to create a new user, you should be making a `POST` request to `/people`, and not a `GET` request.\n\nThe introduction of the `307` status code means that the request method is preserved as `POST`.\n\n- `302` - Temporary redirect, will change the request method from `POST` to `GET`\n- `307` - Temporary redirect, will preserve the request method as `POST`\n\nThe `redirect()` method uses a `307` by default, instead of a `302` temporary redirect, meaning your requests will _always_ be preserved as `POST` requests.\n\n[Learn more](https://developer.mozilla.org/docs/Web/HTTP/Redirections) about HTTP Redirects.\n\n## Version History\n\n| Version   | Changes                |\n| --------- | ---------------------- |\n| `v13.0.0` | `redirect` introduced. |\n", "02-api-reference/04-functions/generate-image-metadata.mdx": "---\ntitle: generateImageMetadata\ndescription: Learn how to generate multiple images in a single Metadata API special file.\nrelated:\n  title: Next Steps\n  description: View all the Metadata API options.\n  links:\n    - app/api-reference/file-conventions/metadata\n    - app/building-your-application/optimizing/metadata\n---\n\nYou can use `generateImageMetadata` to generate different versions of one image or return multiple images for one route segment. This is useful for when you want to avoid hard-coding metadata values, such as for icons.\n\n## Parameters\n\n`generateImageMetadata` function accepts the following parameters:\n\n#### `params` (optional)\n\nAn object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to the segment `generateImageMetadata` is called from.\n\n```tsx filename=\"icon.tsx\" switcher\nexport function generateImageMetadata({\n  params,\n}: {\n  params: { slug: string }\n}) {\n  // ...\n}\n```\n\n```jsx filename=\"icon.js\" switcher\nexport function generateImageMetadata({ params }) {\n  // ...\n}\n```\n\n| Route                           | URL         | `params`                  |\n| ------------------------------- | ----------- | ------------------------- |\n| `app/shop/icon.js`              | `/shop`     | `undefined`               |\n| `app/shop/[slug]/icon.js`       | `/shop/1`   | `{ slug: '1' }`           |\n| `app/shop/[tag]/[item]/icon.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |\n| `app/shop/[...slug]/icon.js`    | `/shop/1/2` | `{ slug: ['1', '2'] }`    |\n\n## Returns\n\nThe `generateImageMetadata` function should return an `array` of objects containing the image's metadata such as `alt` and `size`. In addition, each item **must** include an `id` value which will be passed to the props of the image generating function.\n\n| Image Metadata Object | Type                                |\n| --------------------- | ----------------------------------- |\n| `id`                  | `string` (required)                 |\n| `alt`                 | `string`                            |\n| `size`                | `{ width: number; height: number }` |\n| `contentType`         | `string`                            |\n\n```tsx filename=\"icon.tsx\" switcher\nimport { ImageResponse } from 'next/og'\n\nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n\nexport default function Icon({ id }: { id: string }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n```jsx filename=\"icon.js\" switcher\nimport { ImageResponse } from 'next/og'\n\nexport function generateImageMetadata() {\n  return [\n    {\n      contentType: 'image/png',\n      size: { width: 48, height: 48 },\n      id: 'small',\n    },\n    {\n      contentType: 'image/png',\n      size: { width: 72, height: 72 },\n      id: 'medium',\n    },\n  ]\n}\n\nexport default function Icon({ id }) {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 88,\n          background: '#000',\n          color: '#fafafa',\n        }}\n      >\n        Icon {id}\n      </div>\n    )\n  )\n}\n```\n\n### Examples\n\n#### Using external data\n\nThis example uses the `params` object and external data to generate multiple [Open Graph images](/docs/app/api-reference/file-conventions/metadata/opengraph-image) for a route segment.\n\n```tsx filename=\"app/products/[id]/opengraph-image.tsx\" switcher\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({\n  params,\n}: {\n  params: { id: string }\n}) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({\n  params,\n  id,\n}: {\n  params: { id: string }\n  id: number\n}) {\n  const productId = params.id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n```jsx filename=\"app/products/[id]/opengraph-image.js\" switcher\nimport { ImageResponse } from 'next/og'\nimport { getCaptionForImage, getOGImages } from '@/app/utils/images'\n\nexport async function generateImageMetadata({ params }) {\n  const images = await getOGImages(params.id)\n\n  return images.map((image, idx) => ({\n    id: idx,\n    size: { width: 1200, height: 600 },\n    alt: image.text,\n    contentType: 'image/png',\n  }))\n}\n\nexport default async function Image({ params, id }) {\n  const productId = params.id\n  const imageId = id\n  const text = await getCaptionForImage(productId, imageId)\n\n  return new ImageResponse(\n    (\n      <div\n        style={\n          {\n            // ...\n          }\n        }\n      >\n        {text}\n      </div>\n    )\n  )\n}\n```\n\n## Version History\n\n| Version   | Changes                             |\n| --------- | ----------------------------------- |\n| `v13.3.0` | `generateImageMetadata` introduced. |\n", "02-api-reference/04-functions/generate-sitemaps.mdx": "---\ntitle: generateSitemaps\nnav_title: generateSitemaps\ndescription: Learn how to use the generateSiteMaps function to create multiple sitemaps for your application.\nrelated:\n  title: Next Steps\n  description: Learn how to create sitemaps for your Next.js application.\n  links:\n    - app/api-reference/file-conventions/metadata/sitemap\n---\n\nYou can use the `generateSitemaps` function to generate multiple sitemaps for your application.\n\n## Returns\n\nThe `generateSitemaps` returns an array of objects with an `id` property.\n\n## URLs\n\nIn production, your generated sitemaps will be available at `/.../sitemap/[id].xml`. For example, `/product/sitemap/1.xml`.\n\nIn development, you can view the generated sitemap on `/.../sitemap.xml/[id]`. For example, `/product/sitemap.xml/1`. This difference is temporary and will follow the production format.\n\n## Example\n\nFor example, to split a sitemap using `generateSitemaps`, return an array of objects with the sitemap `id`. Then, use the `id` to generate the unique sitemaps.\n\n```ts filename=\"app/product/sitemap.ts\" switcher\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${product.id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n```js filename=\"app/product/sitemap.js\" switcher\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({ id }) {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n", "02-api-reference/04-functions/next-response.mdx": "---\ntitle: NextResponse\ndescription: API Reference for NextResponse.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNextResponse extends the [Web Response API](https://developer.mozilla.org/docs/Web/API/Response) with additional convenience methods.\n\n## `cookies`\n\nRead or mutate the [`Set-Cookie`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie) header of the response.\n\n### `set(name, value)`\n\nGiven a name, set a cookie with the given value on the response.\n\n```ts\n// Given incoming request /home\nlet response = NextResponse.next()\n// Set a cookie to hide the banner\nresponse.cookies.set('show-banner', 'false')\n// Response will have a `Set-Cookie:show-banner=false;path=/home` header\nreturn response\n```\n\n### `get(name)`\n\nGiven a cookie name, return the value of the cookie. If the cookie is not found, `undefined` is returned. If multiple cookies are found, the first one is returned.\n\n```ts\n// Given incoming request /home\nlet response = NextResponse.next()\n// { name: 'show-banner', value: 'false', Path: '/home' }\nresponse.cookies.get('show-banner')\n```\n\n### `getAll()`\n\nGiven a cookie name, return the values of the cookie. If no name is given, return all cookies on the response.\n\n```ts\n// Given incoming request /home\nlet response = NextResponse.next()\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nresponse.cookies.getAll('experiments')\n// Alternatively, get all cookies for the response\nresponse.cookies.getAll()\n```\n\n### `delete(name)`\n\nGiven a cookie name, delete the cookie from the response.\n\n```ts\n// Given incoming request /home\nlet response = NextResponse.next()\n// Returns true for deleted, false is nothing is deleted\nresponse.cookies.delete('experiments')\n```\n\n## `json()`\n\nProduce a response with the given JSON body.\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nimport { NextResponse } from 'next/server'\n\nexport async function GET(request) {\n  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })\n}\n```\n\n## `redirect()`\n\nProduce a response that redirects to a [URL](https://developer.mozilla.org/docs/Web/API/URL).\n\n```ts\nimport { NextResponse } from 'next/server'\n\nreturn NextResponse.redirect(new URL('/new', request.url))\n```\n\nThe [URL](https://developer.mozilla.org/docs/Web/API/URL) can be created and modified before being used in the `NextResponse.redirect()` method. For example, you can use the `request.nextUrl` property to get the current URL, and then modify it to redirect to a different URL.\n\n```ts\nimport { NextResponse } from 'next/server'\n\n// Given an incoming request...\nconst loginUrl = new URL('/login', request.url)\n// Add ?from=/incoming-url to the /login URL\nloginUrl.searchParams.set('from', request.nextUrl.pathname)\n// And redirect to the new URL\nreturn NextResponse.redirect(loginUrl)\n```\n\n## `rewrite()`\n\nProduce a response that rewrites (proxies) the given [URL](https://developer.mozilla.org/docs/Web/API/URL) while preserving the original URL.\n\n```ts\nimport { NextResponse } from 'next/server'\n\n// Incoming request: /about, browser shows /about\n// Rewritten request: /proxy, browser shows /about\nreturn NextResponse.rewrite(new URL('/proxy', request.url))\n```\n\n## `next()`\n\nThe `next()` method is useful for Middleware, as it allows you to return early and continue routing.\n\n```ts\nimport { NextResponse } from 'next/server'\n\nreturn NextResponse.next()\n```\n\nYou can also forward `headers` when producing the response:\n\n```ts\nimport { NextResponse } from 'next/server'\n\n// Given an incoming request...\nconst newHeaders = new Headers(request.headers)\n// Add a new header\nnewHeaders.set('x-version', '123')\n// And produce a response with the new headers\nreturn NextResponse.next({\n  request: {\n    // New request headers\n    headers: newHeaders,\n  },\n})\n```\n", "02-api-reference/04-functions/next-request.mdx": "---\ntitle: NextRequest\ndescription: API Reference for NextRequest.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNextRequest extends the [Web Request API](https://developer.mozilla.org/docs/Web/API/Request) with additional convenience methods.\n\n## `cookies`\n\nRead or mutate the [`Set-Cookie`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie) header of the request.\n\n### `set(name, value)`\n\nGiven a name, set a cookie with the given value on the request.\n\n```ts\n// Given incoming request /home\n// Set a cookie to hide the banner\n// request will have a `Set-Cookie:show-banner=false;path=/home` header\nrequest.cookies.set('show-banner', 'false')\n```\n\n### `get(name)`\n\nGiven a cookie name, return the value of the cookie. If the cookie is not found, `undefined` is returned. If multiple cookies are found, the first one is returned.\n\n```ts\n// Given incoming request /home\n// { name: 'show-banner', value: 'false', Path: '/home' }\nrequest.cookies.get('show-banner')\n```\n\n### `getAll()`\n\nGiven a cookie name, return the values of the cookie. If no name is given, return all cookies on the request.\n\n```ts\n// Given incoming request /home\n// [\n//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },\n//   { name: 'experiments', value: 'winter-launch', Path: '/home' },\n// ]\nrequest.cookies.getAll('experiments')\n// Alternatively, get all cookies for the request\nrequest.cookies.getAll()\n```\n\n### `delete(name)`\n\nGiven a cookie name, delete the cookie from the request.\n\n```ts\n// Returns true for deleted, false is nothing is deleted\nrequest.cookies.delete('experiments')\n```\n\n### `has(name)`\n\nGiven a cookie name, return `true` if the cookie exists on the request.\n\n```ts\n// Returns true if cookie exists, false if it does not\nrequest.cookies.has('experiments')\n```\n\n### `clear()`\n\nRemove the `Set-Cookie` header from the request.\n\n```ts\nrequest.cookies.clear()\n```\n\n## `nextUrl`\n\nExtends the native [`URL`](https://developer.mozilla.org/docs/Web/API/URL) API with additional convenience methods, including Next.js specific properties.\n\n```ts\n// Given a request to /home, pathname is /home\nrequest.nextUrl.pathname\n// Given a request to /home?name=lee, searchParams is { 'name': 'lee' }\nrequest.nextUrl.searchParams\n```\n\nThe following options are available:\n\n<PagesOnly>\n\n| Property          | Type                      | Description                                                                                                                     |\n| ----------------- | ------------------------- | ------------------------------------------------------------------------------------------------------------------------------- |\n| `basePath`        | `string`                  | The [base path](/docs/pages/api-reference/next-config-js/basePath) of the URL.                                                  |\n| `buildId`         | `string` \\| `undefined`   | The build identifier of the Next.js application. Can be [customized](/docs/pages/api-reference/next-config-js/generateBuildId). |\n| `defaultLocale`   | `string` \\| `undefined`   | The default locale for [internationalization](/docs/pages/building-your-application/routing/internationalization).              |\n| `domainLocale`    |                           |                                                                                                                                 |\n| - `defaultLocale` | `string`                  | The default locale within a domain.                                                                                             |\n| - `domain`        | `string`                  | The domain associated with a specific locale.                                                                                   |\n| - `http`          | `boolean` \\| `undefined`  | Indicates if the domain is using HTTP.                                                                                          |\n| `locales`         | `string[]` \\| `undefined` | An array of available locales.                                                                                                  |\n| `locale`          | `string` \\| `undefined`   | The currently active locale.                                                                                                    |\n| `url`             | `URL`                     | The URL object.                                                                                                                 |\n\n</PagesOnly>\n\n<AppOnly>\n\n| Property       | Type                    | Description                                                                                                                   |\n| -------------- | ----------------------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| `basePath`     | `string`                | The [base path](/docs/app/api-reference/next-config-js/basePath) of the URL.                                                  |\n| `buildId`      | `string` \\| `undefined` | The build identifier of the Next.js application. Can be [customized](/docs/app/api-reference/next-config-js/generateBuildId). |\n| `pathname`     | `string`                | The pathname of the URL.                                                                                                      |\n| `searchParams` | `Object`                | The search parameters of the URL.                                                                                             |\n\n> **Note:** The internationalization properties from the Pages Router are not available for usage in the App Router. Learn more about [internationalization with the App Router](/docs/app/building-your-application/routing/internationalization).\n\n</AppOnly>\n\n## `ip`\n\nThe `ip` property is a string that contains the IP address of the request. This value can optionally be provided by your hosting platform.\n\n> **Good to know:** On [Vercel](https://vercel.com/docs/frameworks/nextjs?utm_source=next-site&utm_medium=docs&utm_campaign=next-website), this value is provided by default. On other platforms, you can use the [`X-Forwarded-For`](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For) header to provide the IP address.\n\n```ts\n// Provided by Vercel\nrequest.ip\n// Self-hosting\nrequest.headers.get('X-Forwarded-For')\n```\n\n## `geo`\n\nThe `geo` property is an object that contains the geographic information of the request. This value can optionally be provided by your hosting platform.\n\n> **Good to know:** On [Vercel](https://vercel.com/docs/frameworks/nextjs?utm_source=next-site&utm_medium=docs&utm_campaign=next-website), this value is provided by default. On other platforms, you can use the [`X-Forwarded-For`](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Forwarded-For) header to provide the IP address, then use a [third-party service](https://ip-api.com/) to lookup the geographic information.\n\n```ts\n// Provided by Vercel\nrequest.geo.city\nrequest.geo.country\nrequest.geo.region\nrequest.geo.latitude\nrequest.geo.longitude\n\n// Self-hosting\nfunction getGeo(request) {\n  let ip = request.headers.get('X-Forwarded-For')\n  // Use a third-party service to lookup the geographic information\n}\n```\n", "02-api-reference/04-functions/use-params.mdx": "---\ntitle: useParams\ndescription: API Reference for the useParams hook.\n---\n\n`useParams` is a **Client Component** hook that lets you read a route's [dynamic params](/docs/app/building-your-application/routing/dynamic-routes) filled in by the current URL.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { useParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const params = useParams<{ tag: string; item: string }>()\n\n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n\n  return <></>\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { useParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const params = useParams()\n\n  // Route -> /shop/[tag]/[item]\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  console.log(params)\n\n  return <></>\n}\n```\n\n## Parameters\n\n```tsx\nconst params = useParams()\n```\n\n`useParams` does not take any parameters.\n\n## Returns\n\n`useParams` returns an object containing the current route's filled in [dynamic parameters](/docs/app/building-your-application/routing/dynamic-routes).\n\n- Each property in the object is an active dynamic segment.\n- The properties name is the segment's name, and the properties value is what the segment is filled in with.\n- The properties value will either be a `string` or array of `string`'s depending on the [type of dynamic segment](/docs/app/building-your-application/routing/dynamic-routes).\n- If the route contains no dynamic parameters, `useParams` returns an empty object.\n- If used in Pages Router, `useParams` will return `null` on the initial render and updates with properties following the rules above once the router is ready.\n\nFor example:\n\n| Route                           | URL         | `useParams()`             |\n| ------------------------------- | ----------- | ------------------------- |\n| `app/shop/page.js`              | `/shop`     | `{}`                      |\n| `app/shop/[slug]/page.js`       | `/shop/1`   | `{ slug: '1' }`           |\n| `app/shop/[tag]/[item]/page.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |\n| `app/shop/[...slug]/page.js`    | `/shop/1/2` | `{ slug: ['1', '2'] }`    |\n\n## Version History\n\n| Version   | Changes                 |\n| --------- | ----------------------- |\n| `v13.3.0` | `useParams` introduced. |\n", "02-api-reference/04-functions/fetch.mdx": "---\ntitle: fetch\ndescription: API reference for the extended fetch function.\n---\n\nNext.js extends the native [Web `fetch()` API](https://developer.mozilla.org/docs/Web/API/Fetch_API) to allow each request on the server to set its own persistent caching semantics.\n\nIn the browser, the `cache` option indicates how a fetch request will interact with the _browser's_ HTTP cache. With this extension, `cache` indicates how a _server-side_ fetch request will interact with the framework's persistent HTTP cache.\n\nYou can call `fetch` with `async` and `await` directly within Server Components.\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n## `fetch(url, options)`\n\nSince Next.js extends the [Web `fetch()` API](https://developer.mozilla.org/docs/Web/API/Fetch_API), you can use any of the [native options available](https://developer.mozilla.org/docs/Web/API/fetch#parameters).\n\n### `options.cache`\n\nConfigure how the request should interact with Next.js [Data Cache](/docs/app/building-your-application/caching#data-cache).\n\n```ts\nfetch(`https://...`, { cache: 'force-cache' | 'no-store' })\n```\n\n- **`force-cache`** (default) - Next.js looks for a matching request in its Data Cache.\n  - If there is a match and it is fresh, it will be returned from the cache.\n  - If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.\n- **`no-store`** - Next.js fetches the resource from the remote server on every request without looking in the cache, and it will not update the cache with the downloaded resource.\n\n> **Good to know**:\n>\n> - If you don't provide a `cache` option, Next.js will default to `force-cache`, unless a [dynamic function](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions) such as `cookies()` is used, in which case it will default to `no-store`.\n> - The `no-cache` option behaves the same way as `no-store` in Next.js.\n\n### `options.next.revalidate`\n\n```ts\nfetch(`https://...`, { next: { revalidate: false | 0 | number } })\n```\n\nSet the cache lifetime of a resource (in seconds).\n\n- **`false`** - Cache the resource indefinitely. Semantically equivalent to `revalidate: Infinity`. The HTTP cache may evict older resources over time.\n- **`0`** - Prevent the resource from being cached.\n- **`number`** - (in seconds) Specify the resource should have a cache lifetime of at most `n` seconds.\n\n> **Good to know**:\n>\n> - If an individual `fetch()` request sets a `revalidate` number lower than the [default `revalidate`](/docs/app/api-reference/file-conventions/route-segment-config#revalidate) of a route, the whole route revalidation interval will be decreased.\n> - If two fetch requests with the same URL in the same route have different `revalidate` values, the lower value will be used.\n> - As a convenience, it is not necessary to set the `cache` option if `revalidate` is set to a number since `0` implies `cache: 'no-store'` and a positive value implies `cache: 'force-cache'`.\n> - Conflicting options such as `{ revalidate: 0, cache: 'force-cache' }` or `{ revalidate: 10, cache: 'no-store' }` will cause an error.\n\n### `options.next.tags`\n\n```ts\nfetch(`https://...`, { next: { tags: ['collection'] } })\n```\n\nSet the cache tags of a resource. Data can then be revalidated on-demand using [`revalidateTag`](https://nextjs.org/docs/app/api-reference/functions/revalidateTag). The max length for a custom tag is 256 characters and the max tag items is 64.\n\n## Version History\n\n| Version   | Changes             |\n| --------- | ------------------- |\n| `v13.0.0` | `fetch` introduced. |\n", "02-api-reference/05-next-config-js/instrumentationHook.mdx": "---\ntitle: instrumentationHook\ndescription: Use the instrumentationHook option to set up instrumentation in your Next.js App.\nrelated:\n  title: Learn more about Instrumentation\n  links:\n    - app/api-reference/file-conventions/instrumentation\n    - app/building-your-application/optimizing/instrumentation\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThe experimental `instrumentationHook` option allows you to set up instrumentation via the [`instrumentation` file](/docs/app/api-reference/file-conventions/instrumentation) in your Next.js App.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\n```\n", "02-api-reference/05-next-config-js/onDemandEntries.mdx": "---\ntitle: onDemandEntries\ndescription: Configure how Next.js will dispose and keep in memory pages created in development.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development.\n\nTo change the defaults, open `next.config.js` and add the `onDemandEntries` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  },\n}\n```\n", "02-api-reference/05-next-config-js/webpack.mdx": "---\ntitle: Custom Webpack Config\nnav_title: webpack\ndescription: Learn how to customize the webpack config used by Next.js\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n> **Good to know**: changes to webpack config are not covered by semver so proceed at your own risk\n\nBefore continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case:\n\n<AppOnly>\n\n- [CSS imports](/docs/app/building-your-application/styling)\n- [CSS modules](/docs/app/building-your-application/styling/css-modules)\n- [Sass/SCSS imports](/docs/app/building-your-application/styling/sass)\n- [Sass/SCSS modules](/docs/app/building-your-application/styling/sass)\n\n</AppOnly>\n\n<PagesOnly>\n\n- [CSS imports](/docs/pages/building-your-application/styling)\n- [CSS modules](/docs/pages/building-your-application/styling/css-modules)\n- [Sass/SCSS imports](/docs/pages/building-your-application/styling/sass)\n- [Sass/SCSS modules](/docs/pages/building-your-application/styling/sass)\n- [Customizing babel configuration](/docs/pages/building-your-application/configuring/babel)\n\n</PagesOnly>\n\nSome commonly asked for features are available as plugins:\n\n- [@next/mdx](https://github.com/vercel/next.js/tree/canary/packages/next-mdx)\n- [@next/bundle-analyzer](https://github.com/vercel/next.js/tree/canary/packages/next-bundle-analyzer)\n\nIn order to extend our usage of `webpack`, you can define a function that extends its config inside `next.config.js`, like so:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    // Important: return the modified config\n    return config\n  },\n}\n```\n\n> The `webpack` function is executed three times, twice for the server (nodejs / edge runtime) and once for the client. This allows you to distinguish between client and server configuration using the `isServer` property.\n\nThe second argument to the `webpack` function is an object with the following properties:\n\n- `buildId`: `String` - The build id, used as a unique identifier between builds\n- `dev`: `Boolean` - Indicates if the compilation will be done in development\n- `isServer`: `Boolean` - It's `true` for server-side compilation, and `false` for client-side compilation\n- `nextRuntime`: `String | undefined` - The target runtime for server-side compilation; either `\"edge\"` or `\"nodejs\"`, it's `undefined` for client-side compilation.\n- `defaultLoaders`: `Object` - Default loaders used internally by Next.js:\n  - `babel`: `Object` - Default `babel-loader` configuration\n\nExample usage of `defaultLoaders.babel`:\n\n```js\n// Example config for adding a loader that depends on babel-loader\n// This source was taken from the @next/mdx plugin source:\n// https://github.com/vercel/next.js/tree/canary/packages/next-mdx\nmodule.exports = {\n  webpack: (config, options) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options,\n        },\n      ],\n    })\n\n    return config\n  },\n}\n```\n\n#### `nextRuntime`\n\nNotice that `isServer` is `true` when `nextRuntime` is `\"edge\"` or `\"nodejs\"`, nextRuntime \"`edge`\" is currently for middleware and Server Components in edge runtime only.\n", "02-api-reference/05-next-config-js/optimizePackageImports.mdx": "---\ntitle: optimizePackageImports\ndescription: API Reference for optimizePackageImports Next.js Config Option\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nSome packages can export hundreds or thousands of modules, which can cause performance issues in development and production.\n\nAdding a package to `experimental.optimizePackageImports` will only load the modules you are actually using, while still giving you the convenience of writing import statements with many named exports.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    optimizePackageImports: ['package-name'],\n  },\n}\n```\n\nThe following libraries are optimized by default:\n\n- `lucide-react`\n- `date-fns`\n- `lodash-es`\n- `ramda`\n- `antd`\n- `react-bootstrap`\n- `ahooks`\n- `@ant-design/icons`\n- `@headlessui/react`\n- `@headlessui-float/react`\n- `@heroicons/react/20/solid`\n- `@heroicons/react/24/solid`\n- `@heroicons/react/24/outline`\n- `@visx/visx`\n- `@tremor/react`\n- `rxjs`\n- `@mui/material`\n- `@mui/icons-material`\n- `recharts`\n- `react-use`\n- `@material-ui/core`\n- `@material-ui/icons`\n- `@tabler/icons-react`\n- `mui-core`\n- `react-icons/*`\n", "02-api-reference/05-next-config-js/turbo.mdx": "---\ntitle: turbo (Experimental)\nnav_title: turbo\ndescription: Configure Next.js with Turbopack-specific options\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nTurbopack can be customized to transform different files and change how modules are resolved.\n\n> **Good to know**:\n>\n> - These features are experimental and will only work with `next --turbo`.\n> - Turbopack for Next.js does not require loaders nor loader configuration for built-in functionality. Turbopack has built-in support for css and compiling modern JavaScript, so there's no need for `css-loader`, `postcss-loader`, or `babel-loader` if you're using `@babel/preset-env`.\n\n## webpack loaders\n\nIf you need loader support beyond what's built in, many webpack loaders already work with Turbopack. There are currently some limitations:\n\n- Only a core subset of the webpack loader API is implemented. Currently, there is enough coverage for some popular loaders, and we'll expand our API support in the future.\n- Only loaders that return JavaScript code are supported. Loaders that transform files like stylesheets or images are not currently supported.\n- Options passed to webpack loaders must be plain JavaScript primitives, objects, and arrays. For example, it's not possible to pass `require()`d plugin modules as option values.\n\nTo configure loaders, add the names of the loaders you've installed and any options in `next.config.js`, mapping file extensions to a list of loaders:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    turbo: {\n      rules: {\n        '*.svg': {\n          loaders: ['@svgr/webpack'],\n          as: '*.js',\n        },\n      },\n    },\n  },\n}\n```\n\n> **Good to know**: Prior to Next.js version 13.4.4, `experimental.turbo.rules` was named `experimental.turbo.loaders` and only accepted file extensions like `.mdx` instead of `*.mdx`.\n\n### Supported loaders\n\nThe following loaders have been tested to work with Turbopack's webpack loader implementation:\n\n- [`babel-loader`](https://www.npmjs.com/package/babel-loader)\n- [`@svgr/webpack`](https://www.npmjs.com/package/@svgr/webpack)\n- [`svg-inline-loader`](https://www.npmjs.com/package/svg-inline-loader)\n- [`yaml-loader`](https://www.npmjs.com/package/yaml-loader)\n- [`string-replace-loader`](https://www.npmjs.com/package/string-replace-loader)\n- [`raw-loader`](https://www.npmjs.com/package/raw-loader)\n- ['sass-loader'](https://www.npmjs.com/package/sass-loader)\n\n## Resolve aliases\n\nThrough `next.config.js`, Turbopack can be configured to modify module resolution through aliases, similar to webpack's [`resolve.alias`](https://webpack.js.org/configuration/resolve/#resolvealias) configuration.\n\nTo configure resolve aliases, map imported patterns to their new destination in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveAlias: {\n        underscore: 'lodash',\n        mocha: { browser: 'mocha/browser-entry.js' },\n      },\n    },\n  },\n}\n```\n\nThis aliases imports of the `underscore` package to the `lodash` package. In other words, `import underscore from 'underscore'` will load the `lodash` module instead of `underscore`.\n\nTurbopack also supports conditional aliasing through this field, similar to Node.js's [conditional exports](https://nodejs.org/docs/latest-v18.x/api/packages.html#conditional-exports). At the moment only the `browser` condition is supported. In the case above, imports of the `mocha` module will be aliased to `mocha/browser-entry.js` when Turbopack targets browser environments.\n\n## Resolve extensions\n\nThrough `next.config.js`, Turbopack can be configured to resolve modules with custom extensions, similar to webpack's [`resolve.extensions`](https://webpack.js.org/configuration/resolve/#resolveextensions) configuration.\n\nTo configure resolve extensions, use the `resolveExtensions` field in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    turbo: {\n      resolveExtensions: [\n        '.mdx',\n        '.tsx',\n        '.ts',\n        '.jsx',\n        '.js',\n        '.mjs',\n        '.json',\n      ],\n    },\n  },\n}\n```\n\nThis overwrites the original resolve extensions with the provided list. Make sure to include the default extensions.\n\nFor more information and guidance for how to migrate your app to Turbopack from webpack, see [Turbopack's documentation on webpack compatibility](https://turbo.build/pack/docs/migrating-from-webpack).\n", "02-api-reference/05-next-config-js/typedRoutes.mdx": "---\ntitle: typedRoutes (experimental)\nnav_title: typedRoutes\ndescription: Enable experimental support for statically typed links.\n---\n\nExperimental support for [statically typed links](/docs/app/building-your-application/configuring/typescript#statically-typed-links). This feature requires using the App Router as well as TypeScript in your project.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n", "02-api-reference/05-next-config-js/productionBrowserSourceMaps.mdx": "---\ntitle: productionBrowserSourceMaps\ndescription: Enables browser source map generation during the production build.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nSource Maps are enabled by default during development. During production builds, they are disabled to prevent you leaking your source on the client, unless you specifically opt-in with the configuration flag.\n\nNext.js provides a configuration flag you can use to enable browser source map generation during the production build:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  productionBrowserSourceMaps: true,\n}\n```\n\nWhen the `productionBrowserSourceMaps` option is enabled, the source maps will be output in the same directory as the JavaScript files. Next.js will automatically serve these files when requested.\n\n- Adding source maps can increase `next build` time\n- Increases memory usage during `next build`\n", "02-api-reference/05-next-config-js/distDir.mdx": "---\ntitle: distDir\ndescription: Set a custom build directory to use instead of the default .next directory.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nYou can specify a name to use for a custom build directory to use instead of `.next`.\n\nOpen `next.config.js` and add the `distDir` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  distDir: 'build',\n}\n```\n\nNow if you run `next build` Next.js will use `build` instead of the default `.next` folder.\n\n> `distDir` **should not** leave your project directory. For example, `../build` is an **invalid** directory.\n", "02-api-reference/05-next-config-js/env.mdx": "---\ntitle: env\ndescription: Learn to add and access environment variables in your Next.js application at build time.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<AppOnly>\n\n> Since the release of [Next.js 9.4](https://nextjs.org/blog/next-9-4) we now have a more intuitive and ergonomic experience for [adding environment variables](/docs/app/building-your-application/configuring/environment-variables). Give it a try!\n\n</AppOnly>\n\n<PagesOnly>\n\n> Since the release of [Next.js 9.4](https://nextjs.org/blog/next-9-4) we now have a more intuitive and ergonomic experience for [adding environment variables](/docs/pages/building-your-application/configuring/environment-variables). Give it a try!\n\n</PagesOnly>\n\n<AppOnly>\n\n> **Good to know**: environment variables specified in this way will **always** be included in the JavaScript bundle, prefixing the environment variable name with `NEXT_PUBLIC_` only has an effect when specifying them [through the environment or .env files](/docs/app/building-your-application/configuring/environment-variables).\n\n</AppOnly>\n\n<PagesOnly>\n\n> **Good to know**: environment variables specified in this way will **always** be included in the JavaScript bundle, prefixing the environment variable name with `NEXT_PUBLIC_` only has an effect when specifying them [through the environment or .env files](/docs/pages/building-your-application/configuring/environment-variables).\n\n</PagesOnly>\n\nTo add environment variables to the JavaScript bundle, open `next.config.js` and add the `env` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  env: {\n    customKey: 'my-value',\n  },\n}\n```\n\nNow you can access `process.env.customKey` in your code. For example:\n\n```jsx\nfunction Page() {\n  return <h1>The value of customKey is: {process.env.customKey}</h1>\n}\n\nexport default Page\n```\n\nNext.js will replace `process.env.customKey` with `'my-value'` at build time. Trying to destructure `process.env` variables won't work due to the nature of webpack [DefinePlugin](https://webpack.js.org/plugins/define-plugin/).\n\nFor example, the following line:\n\n```jsx\nreturn <h1>The value of customKey is: {process.env.customKey}</h1>\n```\n\nWill end up being:\n\n```jsx\nreturn <h1>The value of customKey is: {'my-value'}</h1>\n```\n", "02-api-reference/05-next-config-js/incrementalCacheHandlerPath.mdx": "---\ntitle: Custom Next.js Cache Handler\nnav_title: cacheHandler\ndescription: Configure the Next.js cache used for storing and revalidating data to use any external service like Redis, Memcached, or others.\n---\n\nIn Next.js, the [default cache handler](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating) for the Pages and App Router uses the filesystem cache. This requires no configuration, however, you can customize the cache handler by using the `cacheHandler` field in `next.config.js`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n```\n\nView an example of a [custom cache handler](/docs/app/building-your-application/deploying#configuring-caching) and learn more about implementation.\n\n## API Reference\n\nThe cache handler can implement the following methods: `get`, `set`, and `revalidateTag`.\n\n### `get()`\n\n| Parameter | Type     | Description                  |\n| --------- | -------- | ---------------------------- |\n| `key`     | `string` | The key to the cached value. |\n\nReturns the cached value or `null` if not found.\n\n### `set()`\n\n| Parameter | Type           | Description                      |\n| --------- | -------------- | -------------------------------- |\n| `key`     | `string`       | The key to store the data under. |\n| `data`    | Data or `null` | The data to be cached.           |\n| `ctx`     | `{ tags: [] }` | The cache tags provided.         |\n\nReturns `Promise<void>`.\n\n### `revalidateTag()`\n\n| Parameter | Type     | Description                  |\n| --------- | -------- | ---------------------------- |\n| `tag`     | `string` | The cache tag to revalidate. |\n\nReturns `Promise<void>`. Learn more about [revalidating data](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating) or the [`revalidateTag()`](/docs/app/api-reference/functions/revalidateTag) function.\n\n**Good to know:**\n\n- `revalidatePath` is a convenience layer on top of cache tags. Calling `revalidatePath` will call your `revalidateTag` function, which you can then choose if you want to tag cache keys based on the path.\n\n## Version History\n\n| Version   | Changes                                                                  |\n| --------- | ------------------------------------------------------------------------ |\n| `v14.1.0` | Renamed `cacheHandler` is stable.                                        |\n| `v13.4.0` | `incrementalCacheHandlerPath` (experimental) supports `revalidateTag`.   |\n| `v13.4.0` | `incrementalCacheHandlerPath` (experimental) supports standalone output. |\n| `v12.2.0` | `incrementalCacheHandlerPath` (experimental) is added.                   |\n", "02-api-reference/05-next-config-js/serverActions.mdx": "---\ntitle: serverActions\ndescription: Configure Server Actions behavior in your Next.js application.\n---\n\nOptions for configuring Server Actions behavior in your Next.js application.\n\n## `allowedOrigins`\n\nA list of extra safe origin domains from which Server Actions can be invoked. Next.js compares the origin of a Server Action request with the host domain, ensuring they match to prevent CSRF attacks. If not provided, only the same origin is allowed.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\n## `bodySizeLimit`\n\nBy default, the maximum size of the request body sent to a Server Action is 1MB, to prevent the consumption of excessive server resources in parsing large amounts of data, as well as potential DDoS attacks.\n\nHowever, you can configure this limit using the `serverActions.bodySizeLimit` option. It can take the number of bytes or any string format supported by bytes, for example `1000`, `'500kb'` or `'3mb'`.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\n\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      bodySizeLimit: '2mb',\n    },\n  },\n}\n```\n\n## Enabling Server Actions (v13)\n\nServer Actions became a stable feature in Next.js 14, and are enabled by default. However, if you are using an earlier version of Next.js, you can enable them by setting `experimental.serverActions` to `true`.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst config = {\n  experimental: {\n    serverActions: true,\n  },\n}\n\nmodule.exports = config\n```\n", "02-api-reference/05-next-config-js/webVitalsAttribution.mdx": "---\ntitle: webVitalsAttribution\ndescription: Learn how to use the webVitalsAttribution option to pinpoint the source of Web Vitals issues.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nWhen debugging issues related to Web Vitals, it is often helpful if we can pinpoint the source of the problem.\nFor example, in the case of Cumulative Layout Shift (CLS), we might want to know the first element that shifted when the single largest layout shift occurred.\nOr, in the case of Largest Contentful Paint (LCP), we might want to identify the element corresponding to the LCP for the page.\nIf the LCP element is an image, knowing the URL of the image resource can help us locate the asset we need to optimize.\n\nPinpointing the biggest contributor to the Web Vitals score, aka [attribution](https://github.com/GoogleChrome/web-vitals/blob/4ca38ae64b8d1e899028c692f94d4c56acfc996c/README.md#attribution),\nallows us to obtain more in-depth information like entries for [PerformanceEventTiming](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming), [PerformanceNavigationTiming](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming) and [PerformanceResourceTiming](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming).\n\nAttribution is disabled by default in Next.js but can be enabled **per metric** by specifying the following in `next.config.js`.\n\n```js filename=\"next.config.js\"\nexperimental: {\n  webVitalsAttribution: ['CLS', 'LCP']\n}\n```\n\nValid attribution values are all `web-vitals` metrics specified in the [`NextWebVitalsMetric`](https://github.com/vercel/next.js/blob/442378d21dd56d6e769863eb8c2cb521a463a2e0/packages/next/shared/lib/utils.ts#L43) type.\n", "02-api-reference/05-next-config-js/serverComponentsExternalPackages.mdx": "---\ntitle: serverComponentsExternalPackages\ndescription: Opt-out specific dependencies from the Server Components bundling and use native Node.js `require`.\n---\n\nDependencies used inside [Server Components](/docs/app/building-your-application/rendering/server-components) and [Route Handlers](/docs/app/building-your-application/routing/route-handlers) will automatically be bundled by Next.js.\n\nIf a dependency is using Node.js specific features, you can choose to opt-out specific dependencies from the Server Components bundling and use native Node.js `require`.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: ['@acme/ui'],\n  },\n}\n\nmodule.exports = nextConfig\n```\n\nNext.js includes a [short list of popular packages](https://github.com/vercel/next.js/blob/canary/packages/next/src/lib/server-external-packages.json) that currently are working on compatibility and automatically opt-ed out:\n\n- `@appsignal/nodejs`\n- `@aws-sdk/client-s3`\n- `@aws-sdk/s3-presigned-post`\n- `@blockfrost/blockfrost-js`\n- `@highlight-run/node`\n- `@jpg-store/lucid-cardano`\n- `@libsql/client`\n- `@mikro-orm/core`\n- `@mikro-orm/knex`\n- `@node-rs/argon2`\n- `@node-rs/bcrypt`\n- `@prisma/client`\n- `@react-pdf/renderer`\n- `@sentry/profiling-node`\n- `@swc/core`\n- `argon2`\n- `autoprefixer`\n- `aws-crt`\n- `bcrypt`\n- `better-sqlite3`\n- `canvas`\n- `cpu-features`\n- `cypress`\n- `eslint`\n- `express`\n- `firebase-admin`\n- `isolated-vm`\n- `jest`\n- `jsdom`\n- `libsql`\n- `mdx-bundler`\n- `mongodb`\n- `mongoose`\n- `next-mdx-remote`\n- `next-seo`\n- `node-pty`\n- `node-web-audio-api`\n- `oslo`\n- `pg`\n- `playwright`\n- `postcss`\n- `prettier`\n- `prisma`\n- `puppeteer-core`\n- `puppeteer`\n- `rimraf`\n- `sharp`\n- `shiki`\n- `sqlite3`\n- `tailwindcss`\n- `ts-node`\n- `typescript`\n- `vscode-oniguruma`\n- `undici`\n- `webpack`\n- `websocket`\n- `zeromq`\n", "02-api-reference/05-next-config-js/assetPrefix.mdx": "---\ntitle: assetPrefix\ndescription: Learn how to use the assetPrefix config option to configure your CDN.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<AppOnly>\n\n> **Attention**: [Deploying to Vercel](/docs/app/building-your-application/deploying) automatically configures a global CDN for your Next.js project.\n> You do not need to manually setup an Asset Prefix.\n\n</AppOnly>\n\n<PagesOnly>\n\n> **Attention**: [Deploying to Vercel](/docs/pages/building-your-application/deploying) automatically configures a global CDN for your Next.js project.\n> You do not need to manually setup an Asset Prefix.\n\n</PagesOnly>\n\n> **Good to know**: Next.js 9.5+ added support for a customizable [Base Path](/docs/app/api-reference/next-config-js/basePath), which is better\n> suited for hosting your application on a sub-path like `/docs`.\n> We do not suggest you use a custom Asset Prefix for this use case.\n\nTo set up a [CDN](https://en.wikipedia.org/wiki/Content_delivery_network), you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n\nOpen `next.config.js` and add the `assetPrefix` config:\n\n```js filename=\"next.config.js\"\nconst isProd = process.env.NODE_ENV === 'production'\n\nmodule.exports = {\n  // Use the CDN in production and localhost for development.\n  assetPrefix: isProd ? 'https://cdn.mydomain.com' : undefined,\n}\n```\n\nNext.js will automatically use your asset prefix for the JavaScript and CSS files it loads from the `/_next/` path (`.next/static/` folder). For example, with the above configuration, the following request for a JS chunk:\n\n```\n/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js\n```\n\nWould instead become:\n\n```\nhttps://cdn.mydomain.com/_next/static/chunks/4b9b41aaa062cbbfeff4add70f256968c51ece5d.4d708494b3aed70c04f0.js\n```\n\nThe exact configuration for uploading your files to a given CDN will depend on your CDN of choice. The only folder you need to host on your CDN is the contents of `.next/static/`, which should be uploaded as `_next/static/` as the above URL request indicates. **Do not upload the rest of your `.next/` folder**, as you should not expose your server code and other configuration to the public.\n\nWhile `assetPrefix` covers requests to `_next/static`, it does not influence the following paths:\n\n<AppOnly>\n\n- Files in the [public](/docs/app/building-your-application/optimizing/static-assets) folder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself\n\n</AppOnly>\n\n<PagesOnly>\n\n- Files in the [public](/docs/pages/building-your-application/optimizing/static-assets) folder; if you want to serve those assets over a CDN, you'll have to introduce the prefix yourself\n- `/_next/data/` requests for `getServerSideProps` pages. These requests will always be made against the main domain since they're not static.\n- `/_next/data/` requests for `getStaticProps` pages. These requests will always be made against the main domain to support [Incremental Static Generation](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration), even if you're not using it (for consistency).\n\n</PagesOnly>\n", "02-api-reference/05-next-config-js/index.mdx": "---\ntitle: next.config.js Options\ndescription: Learn how to configure your application with next.config.js.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js can be configured through a `next.config.js` file in the root of your project directory (for example, by `package.json`) with a default export.\n\n```js filename=\"next.config.js\"\n// @ts-check\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n`next.config.js` is a regular Node.js module, not a JSON file. It gets used by the Next.js server and build phases, and it's not included in the browser build.\n\nIf you need [ECMAScript modules](https://nodejs.org/api/esm.html), you can use `next.config.mjs`:\n\n```js filename=\"next.config.mjs\"\n// @ts-check\n\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  /* config options here */\n}\n\nexport default nextConfig\n```\n\nYou can also use a function:\n\n```js filename=\"next.config.mjs\"\n// @ts-check\n\nexport default (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\n```\n\nSince Next.js 12.1.0, you can use an async function:\n\n```js filename=\"next.config.js\"\n// @ts-check\n\nmodule.exports = async (phase, { defaultConfig }) => {\n  /**\n   * @type {import('next').NextConfig}\n   */\n  const nextConfig = {\n    /* config options here */\n  }\n  return nextConfig\n}\n```\n\n`phase` is the current context in which the configuration is loaded. You can see the [available phases](https://github.com/vercel/next.js/blob/5e6b008b561caf2710ab7be63320a3d549474a5b/packages/next/shared/lib/constants.ts#L19-L23). Phases can be imported from `next/constants`:\n\n```js\n// @ts-check\n\nconst { PHASE_DEVELOPMENT_SERVER } = require('next/constants')\n\nmodule.exports = (phase, { defaultConfig }) => {\n  if (phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n\n  return {\n    /* config options for all phases except development here */\n  }\n}\n```\n\nThe commented lines are the place where you can put the configs allowed by `next.config.js`, which are [defined in this file](https://github.com/vercel/next.js/blob/canary/packages/next/src/server/config-shared.ts).\n\nHowever, none of the configs are required, and it's not necessary to understand what each config does. Instead, search for the features you need to enable or modify in this section and they will show you what to do.\n\n> Avoid using new JavaScript features not available in your target Node.js version. `next.config.js` will not be parsed by Webpack, Babel or TypeScript.\n\nThis page documents all the available configuration options:\n", "02-api-reference/05-next-config-js/compress.mdx": "---\ntitle: compress\ndescription: Next.js provides gzip compression to compress rendered content and static files, it only works with the server target. Learn more about it here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nBy default, Next.js uses `gzip` to compress rendered content and static files when using `next start` or a custom server. This is an optimization for applications that do not have compression configured. If compression is _already_ configured in your application via a custom server, Next.js will not add compression.\n\n> **Good to know:**\n>\n> - When hosting your application on [Vercel](https://vercel.com/docs/edge-network/compression), compression uses `brotli` first, then `gzip`.\n> - You can check if compression is enabled and which algorithm is used by looking at the [`Accept-Encoding`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding) (browser accepted options) and [`Content-Encoding`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding) (currently used) headers in the response.\n\n## Disabling compression\n\nTo disable **compression**, set the `compress` config option to `false`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  compress: false,\n}\n```\n\nWe do not recommend disabling compression unless you have compression configured on your server, as compression reduces bandwidth usage and improves the performance of your application.\n\n## Changing the compression algorithm\n\nTo change your compression algorithm, you will need to configure your custom server and set the `compress` option to `false` in your `next.config.js` file.\n\nFor example, you're using [nginx](https://www.nginx.com/) and want to switch to `brotli`, set the `compress` option to `false` to allow nginx to handle compression.\n\n> **Good to know:**\n>\n> - For Next.js applications on Vercel, compression is handled by the Vercel's Edge Network and not Next.js. See the [Vercel documentation](https://vercel.com/docs/edge-network/compression) for more information.\n", "02-api-reference/05-next-config-js/poweredByHeader.mdx": "---\ntitle: poweredByHeader\ndescription: Next.js will add the `x-powered-by` header by default. Learn to opt-out of it here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nBy default Next.js will add the `x-powered-by` header. To opt-out of it, open `next.config.js` and disable the `poweredByHeader` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  poweredByHeader: false,\n}\n```\n", "02-api-reference/05-next-config-js/headers.mdx": "---\ntitle: headers\ndescription: Add custom HTTP headers to your Next.js app.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nHeaders allow you to set custom HTTP headers on the response to an incoming request on a given path.\n\nTo set custom HTTP headers you can use the `headers` key in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/about',\n        headers: [\n          {\n            key: 'x-custom-header',\n            value: 'my custom header value',\n          },\n          {\n            key: 'x-another-custom-header',\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n`headers` is an async function that expects an array to be returned holding objects with `source` and `headers` properties:\n\n- `source` is the incoming request path pattern.\n- `headers` is an array of response header objects, with `key` and `value` properties.\n- `basePath`: `false` or `undefined` - if false the basePath won't be included when matching, can be used for external rewrites only.\n- `locale`: `false` or `undefined` - whether the locale should not be included when matching.\n- `has` is an array of [has objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n- `missing` is an array of [missing objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n\nHeaders are checked before the filesystem which includes pages and `/public` files.\n\n## Header Overriding Behavior\n\nIf two headers match the same path and set the same header key, the last header key will override the first. Using the below headers, the path `/hello` will result in the header `x-hello` being `world` due to the last header value set being `world`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'there',\n          },\n        ],\n      },\n      {\n        source: '/hello',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n## Path Matching\n\nPath matches are allowed, for example `/blog/:slug` will match `/blog/hello-world` (no nested paths):\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n### Wildcard Path Matching\n\nTo match a wildcard path you can use `*` after a parameter, for example `/blog/:slug*` will match `/blog/a/b/c/d/hello-world`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:slug*',\n        headers: [\n          {\n            key: 'x-slug',\n            value: ':slug*', // Matched parameters can be used in the value\n          },\n          {\n            key: 'x-slug-:slug*', // Matched parameters can be used in the key\n            value: 'my other custom header value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n### Regex Path Matching\n\nTo match a regex path you can wrap the regex in parenthesis after a parameter, for example `/blog/:slug(\\\\d{1,})` will match `/blog/123` but not `/blog/abc`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/blog/:post(\\\\d{1,})',\n        headers: [\n          {\n            key: 'x-post',\n            value: ':post',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\nThe following characters `(`, `)`, `{`, `}`, `:`, `*`, `+`, `?` are used for regex path matching, so when used in the `source` as non-special values they must be escaped by adding `\\\\` before them:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        headers: [\n          {\n            key: 'x-header',\n            value: 'value',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n## Header, Cookie, and Query Matching\n\nTo only apply a header when header, cookie, or query values also match the `has` field or don't match the `missing` field can be used. Both the `source` and all `has` items must match and all `missing` items must not match for the header to be applied.\n\n`has` and `missing` items can have the following fields:\n\n- `type`: `String` - must be either `header`, `cookie`, `host`, or `query`.\n- `key`: `String` - the key from the selected type to match against.\n- `value`: `String` or `undefined` - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value `first-(?<paramName>.*)` is used for `first-second` then `second` will be usable in the destination with `:paramName`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      // if the header `x-add-header` is present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-add-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the header `x-no-header` is not present,\n      // the `x-another-header` header will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-no-header',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: 'hello',\n          },\n        ],\n      },\n      // if the source, query, and cookie are matched,\n      // the `x-authorized` header will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // header key/values since value is provided and\n            // doesn't use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-authorized',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, the `x-another-header` will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n      // if the host is `example.com`,\n      // this header will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        headers: [\n          {\n            key: 'x-another-header',\n            value: ':authorized',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n## Headers with basePath support\n\nWhen leveraging [`basePath` support](/docs/app/api-reference/next-config-js/basePath) with headers each `source` is automatically prefixed with the `basePath` unless you add `basePath: false` to the header:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  basePath: '/docs',\n\n  async headers() {\n    return [\n      {\n        source: '/with-basePath', // becomes /docs/with-basePath\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        source: '/without-basePath', // is not modified since basePath: false is set\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n        basePath: false,\n      },\n    ]\n  },\n}\n```\n\n## Headers with i18n support\n\n<AppOnly>\n\nWhen leveraging [`i18n` support](/docs/app/building-your-application/routing/internationalization) with headers each `source` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the header. If `locale: false` is used you must prefix the `source` with a locale for it to be matched correctly.\n\n</AppOnly>\n\n<PagesOnly>\n\nWhen leveraging [`i18n` support](/docs/pages/building-your-application/routing/internationalization) with headers each `source` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the header. If `locale: false` is used you must prefix the `source` with a locale for it to be matched correctly.\n\n</PagesOnly>\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async headers() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        locale: false,\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'x-hello',\n            value: 'world',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n## Cache-Control\n\nYou cannot set `Cache-Control` headers in `next.config.js` for pages or assets, as these headers will be overwritten in production to ensure that responses and static assets are cached effectively.\n\n<AppOnly>\n\nLearn more about [caching](/docs/app/building-your-application/caching) with the App Router.\n\n</AppOnly>\n\n<PagesOnly>\n\nIf you need to revalidate the cache of a page that has been [statically generated](/docs/pages/building-your-application/rendering/static-site-generation), you can do so by setting the `revalidate` prop in the page's [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) function.\n\nYou can set the `Cache-Control` header in your [API Routes](/docs/pages/building-your-application/routing/api-routes) by using the `res.setHeader` method:\n\n```ts filename=\"pages/api/hello.ts\" switcher\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype ResponseData = {\n  message: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<ResponseData>\n) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n```js filename=\"pages/api/hello.js\" switcher\nexport default function handler(req, res) {\n  res.setHeader('Cache-Control', 's-maxage=86400')\n  res.status(200).json({ message: 'Hello from Next.js!' })\n}\n```\n\n</PagesOnly>\n\n## Options\n\n### CORS\n\n[Cross-Origin Resource Sharing (CORS)](https://developer.mozilla.org/docs/Web/HTTP/CORS) is a security feature that allows you to control which sites can access your resources. You can set the `Access-Control-Allow-Origin` header to allow a specific origin to access your <PagesOnly>API Endpoints</PagesOnly><AppOnly>Route Handlers</AppOnly>.\n\n```js\nasync headers() {\n    return [\n      {\n        source: \"/api/:path*\",\n        headers: [\n          {\n            key: \"Access-Control-Allow-Origin\",\n            value: \"*\", // Set your origin\n          },\n          {\n            key: \"Access-Control-Allow-Methods\",\n            value: \"GET, POST, PUT, DELETE, OPTIONS\",\n          },\n          {\n            key: \"Access-Control-Allow-Headers\",\n            value: \"Content-Type, Authorization\",\n          },\n        ],\n      },\n    ];\n  },\n```\n\n### X-DNS-Prefetch-Control\n\n[This header](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control) controls DNS prefetching, allowing browsers to proactively perform domain name resolution on external links, images, CSS, JavaScript, and more. This prefetching is performed in the background, so the [DNS](https://developer.mozilla.org/docs/Glossary/DNS) is more likely to be resolved by the time the referenced items are needed. This reduces latency when the user clicks a link.\n\n```js\n{\n  key: 'X-DNS-Prefetch-Control',\n  value: 'on'\n}\n```\n\n### Strict-Transport-Security\n\n[This header](https://developer.mozilla.org/docs/Web/HTTP/Headers/Strict-Transport-Security) informs browsers it should only be accessed using HTTPS, instead of using HTTP. Using the configuration below, all present and future subdomains will use HTTPS for a `max-age` of 2 years. This blocks access to pages or subdomains that can only be served over HTTP.\n\nIf you're deploying to [Vercel](https://vercel.com/docs/concepts/edge-network/headers#strict-transport-security?utm_source=next-site&utm_medium=docs&utm_campaign=next-website), this header is not necessary as it's automatically added to all deployments unless you declare `headers` in your `next.config.js`.\n\n```js\n{\n  key: 'Strict-Transport-Security',\n  value: 'max-age=63072000; includeSubDomains; preload'\n}\n```\n\n### X-Frame-Options\n\n[This header](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Frame-Options) indicates whether the site should be allowed to be displayed within an `iframe`. This can prevent against clickjacking attacks.\n\n**This header has been superseded by CSP's `frame-ancestors` option**, which has better support in modern browsers (see [Content Security Policy](/docs/app/building-your-application/configuring/content-security-policy) for configuration details).\n\n```js\n{\n  key: 'X-Frame-Options',\n  value: 'SAMEORIGIN'\n}\n```\n\n### Permissions-Policy\n\n[This header](https://developer.mozilla.org/docs/Web/HTTP/Headers/Permissions-Policy) allows you to control which features and APIs can be used in the browser. It was previously named `Feature-Policy`.\n\n```js\n{\n  key: 'Permissions-Policy',\n  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'\n}\n```\n\n### X-Content-Type-Options\n\n[This header](https://developer.mozilla.org/docs/Web/HTTP/Headers/X-Content-Type-Options) prevents the browser from attempting to guess the type of content if the `Content-Type` header is not explicitly set. This can prevent XSS exploits for websites that allow users to upload and share files.\n\nFor example, a user trying to download an image, but having it treated as a different `Content-Type` like an executable, which could be malicious. This header also applies to downloading browser extensions. The only valid value for this header is `nosniff`.\n\n```js\n{\n  key: 'X-Content-Type-Options',\n  value: 'nosniff'\n}\n```\n\n### Referrer-Policy\n\n[This header](https://developer.mozilla.org/docs/Web/HTTP/Headers/Referrer-Policy) controls how much information the browser includes when navigating from the current website (origin) to another.\n\n```js\n{\n  key: 'Referrer-Policy',\n  value: 'origin-when-cross-origin'\n}\n```\n\n### Content-Security-Policy\n\nLearn more about adding a [Content Security Policy](/docs/app/building-your-application/configuring/content-security-policy) to your application.\n\n## Version History\n\n| Version   | Changes          |\n| --------- | ---------------- |\n| `v13.3.0` | `missing` added. |\n| `v10.2.0` | `has` added.     |\n| `v9.5.0`  | Headers added.   |\n", "02-api-reference/05-next-config-js/httpAgentOptions.mdx": "---\ntitle: httpAgentOptions\ndescription: Next.js will automatically use HTTP Keep-Alive by default. Learn more about how to disable HTTP Keep-Alive here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nIn Node.js versions prior to 18, Next.js automatically polyfills `fetch()` with [undici](/docs/architecture/supported-browsers#polyfills) and enables [HTTP Keep-Alive](https://developer.mozilla.org/docs/Web/HTTP/Headers/Keep-Alive) by default.\n\nTo disable HTTP Keep-Alive for all `fetch()` calls on the server-side, open `next.config.js` and add the `httpAgentOptions` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  httpAgentOptions: {\n    keepAlive: false,\n  },\n}\n```\n", "02-api-reference/05-next-config-js/rewrites.mdx": "---\ntitle: rewrites\ndescription: Add rewrites to your Next.js app.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nRewrites allow you to map an incoming request path to a different destination path.\n\n<AppOnly>\n\nRewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast, [redirects](/docs/app/api-reference/next-config-js/redirects) will reroute to a new page and show the URL changes.\n\n</AppOnly>\n\n<PagesOnly>\n\nRewrites act as a URL proxy and mask the destination path, making it appear the user hasn't changed their location on the site. In contrast, [redirects](/docs/pages/api-reference/next-config-js/redirects) will reroute to a new page and show the URL changes.\n\n</PagesOnly>\n\nTo use rewrites you can use the `rewrites` key in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n      },\n    ]\n  },\n}\n```\n\nRewrites are applied to client-side routing, a `<Link href=\"/about\">` will have the rewrite applied in the above example.\n\n`rewrites` is an async function that expects to return either an array or an object of arrays (see below) holding objects with `source` and `destination` properties:\n\n- `source`: `String` - is the incoming request path pattern.\n- `destination`: `String` is the path you want to route to.\n- `basePath`: `false` or `undefined` - if false the basePath won't be included when matching, can be used for external rewrites only.\n- `locale`: `false` or `undefined` - whether the locale should not be included when matching.\n- `has` is an array of [has objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n- `missing` is an array of [missing objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n\nWhen the `rewrites` function returns an array, rewrites are applied after checking the filesystem (pages and `/public` files) and before dynamic routes. When the `rewrites` function returns an object of arrays with a specific shape, this behavior can be changed and more finely controlled, as of `v10.1` of Next.js:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return {\n      beforeFiles: [\n        // These rewrites are checked after headers/redirects\n        // and before all files including _next/public files which\n        // allows overriding page files\n        {\n          source: '/some-page',\n          destination: '/somewhere-else',\n          has: [{ type: 'query', key: 'overrideMe' }],\n        },\n      ],\n      afterFiles: [\n        // These rewrites are checked after pages/public files\n        // are checked but before dynamic routes\n        {\n          source: '/non-existent',\n          destination: '/somewhere-else',\n        },\n      ],\n      fallback: [\n        // These rewrites are checked after both pages/public files\n        // and dynamic routes are checked\n        {\n          source: '/:path*',\n          destination: `https://my-old-site.com/:path*`,\n        },\n      ],\n    }\n  },\n}\n```\n\n> **Good to know**: rewrites in `beforeFiles` do not check the filesystem/dynamic routes immediately after matching a source, they continue until all `beforeFiles` have been checked.\n\nThe order Next.js routes are checked is:\n\n<AppOnly>\n\n1. [headers](/docs/app/api-reference/next-config-js/headers) are checked/applied\n2. [redirects](/docs/app/api-reference/next-config-js/redirects) are checked/applied\n3. `beforeFiles` rewrites are checked/applied\n4. static files from the [public directory](/docs/app/building-your-application/optimizing/static-assets), `_next/static` files, and non-dynamic pages are checked/served\n5. `afterFiles` rewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match\n6. `fallback` rewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you use [fallback: true/'blocking'](/docs/pages/api-reference/functions/get-static-paths#fallback-true) in `getStaticPaths`, the fallback `rewrites` defined in your `next.config.js` will _not_ be run.\n\n</AppOnly>\n\n<PagesOnly>\n\n1. [headers](/docs/pages/api-reference/next-config-js/headers) are checked/applied\n2. [redirects](/docs/pages/api-reference/next-config-js/redirects) are checked/applied\n3. `beforeFiles` rewrites are checked/applied\n4. static files from the [public directory](/docs/pages/building-your-application/optimizing/static-assets), `_next/static` files, and non-dynamic pages are checked/served\n5. `afterFiles` rewrites are checked/applied, if one of these rewrites is matched we check dynamic routes/static files after each match\n6. `fallback` rewrites are checked/applied, these are applied before rendering the 404 page and after dynamic routes/all static assets have been checked. If you use [fallback: true/'blocking'](/docs/pages/api-reference/functions/get-static-paths#fallback-true) in `getStaticPaths`, the fallback `rewrites` defined in your `next.config.js` will _not_ be run.\n\n</PagesOnly>\n\n## Rewrite parameters\n\nWhen using parameters in a rewrite the parameters will be passed in the query by default when none of the parameters are used in the `destination`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-about/:path*',\n        destination: '/about', // The :path parameter isn't used here so will be automatically passed in the query\n      },\n    ]\n  },\n}\n```\n\nIf a parameter is used in the destination none of the parameters will be automatically passed in the query.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/docs/:path*',\n        destination: '/:path*', // The :path parameter is used here so will not be automatically passed in the query\n      },\n    ]\n  },\n}\n```\n\nYou can still pass the parameters manually in the query if one is already used in the destination by specifying the query in the `destination`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/:first/:second',\n        destination: '/:first?second=:second',\n        // Since the :first parameter is used in the destination the :second parameter\n        // will not automatically be added in the query although we can manually add it\n        // as shown above\n      },\n    ]\n  },\n}\n```\n\n> **Good to know**: Static pages from [Automatic Static Optimization](/docs/pages/building-your-application/rendering/automatic-static-optimization) or [prerendering](/docs/pages/building-your-application/data-fetching/get-static-props) params from rewrites will be parsed on the client after hydration and provided in the query.\n\n## Path Matching\n\nPath matches are allowed, for example `/blog/:slug` will match `/blog/hello-world` (no nested paths):\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n```\n\n### Wildcard Path Matching\n\nTo match a wildcard path you can use `*` after a parameter, for example `/blog/:slug*` will match `/blog/a/b/c/d/hello-world`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n```\n\n### Regex Path Matching\n\nTo match a regex path you can wrap the regex in parenthesis after a parameter, for example `/blog/:slug(\\\\d{1,})` will match `/blog/123` but not `/blog/abc`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/old-blog/:post(\\\\d{1,})',\n        destination: '/blog/:post', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n```\n\nThe following characters `(`, `)`, `{`, `}`, `[`, `]`, `|`, `\\`, `^`, `.`, `:`, `*`, `+`, `-`, `?`, `$` are used for regex path matching, so when used in the `source` as non-special values they must be escaped by adding `\\\\` before them:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n      },\n    ]\n  },\n}\n```\n\n## Header, Cookie, and Query Matching\n\nTo only match a rewrite when header, cookie, or query values also match the `has` field or don't match the `missing` field can be used. Both the `source` and all `has` items must match and all `missing` items must not match for the rewrite to be applied.\n\n`has` and `missing` items can have the following fields:\n\n- `type`: `String` - must be either `header`, `cookie`, `host`, or `query`.\n- `key`: `String` - the key from the selected type to match against.\n- `value`: `String` or `undefined` - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value `first-(?<paramName>.*)` is used for `first-second` then `second` will be usable in the destination with `:paramName`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      // if the header `x-rewrite-me` is present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the header `x-rewrite-me` is not present,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-rewrite-me',\n          },\n        ],\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this rewrite will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        destination: '/:path*/home',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this rewrite will be applied\n      {\n        source: '/:path*',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n```\n\n## Rewriting to an external URL\n\n<details>\n  <summary>Examples</summary>\n\n- [Incremental adoption of Next.js](https://github.com/vercel/next.js/tree/canary/examples/custom-routes-proxying)\n- [Using Multiple Zones](https://github.com/vercel/next.js/tree/canary/examples/with-zones)\n\n</details>\n\nRewrites allow you to rewrite to an external url. This is especially useful for incrementally adopting Next.js. The following is an example rewrite for redirecting the `/blog` route of your main app to an external site.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/blog',\n        destination: 'https://example.com/blog',\n      },\n      {\n        source: '/blog/:slug',\n        destination: 'https://example.com/blog/:slug', // Matched parameters can be used in the destination\n      },\n    ]\n  },\n}\n```\n\nIf you're using `trailingSlash: true`, you also need to insert a trailing slash in the `source` parameter. If the destination server is also expecting a trailing slash it should be included in the `destination` parameter as well.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  trailingSlash: true,\n  async rewrites() {\n    return [\n      {\n        source: '/blog/',\n        destination: 'https://example.com/blog/',\n      },\n      {\n        source: '/blog/:path*/',\n        destination: 'https://example.com/blog/:path*/',\n      },\n    ]\n  },\n}\n```\n\n### Incremental adoption of Next.js\n\nYou can also have Next.js fall back to proxying to an existing website after checking all Next.js routes.\n\nThis way you don't have to change the rewrites configuration when migrating more pages to Next.js\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async rewrites() {\n    return {\n      fallback: [\n        {\n          source: '/:path*',\n          destination: `https://custom-routes-proxying-endpoint.vercel.app/:path*`,\n        },\n      ],\n    }\n  },\n}\n```\n\n### Rewrites with basePath support\n\nWhen leveraging [`basePath` support](/docs/app/api-reference/next-config-js/basePath) with rewrites each `source` and `destination` is automatically prefixed with the `basePath` unless you add `basePath: false` to the rewrite:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  basePath: '/docs',\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n      },\n      {\n        // does not add /docs to /without-basePath since basePath: false is set\n        // Note: this can not be used for internal rewrites e.g. `destination: '/another'`\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n      },\n    ]\n  },\n}\n```\n\n### Rewrites with i18n support\n\n<AppOnly>\n\nWhen leveraging [`i18n` support](/docs/app/building-your-application/routing/internationalization) with rewrites each `source` and `destination` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the rewrite. If `locale: false` is used you must prefix the `source` and `destination` with a locale for it to be matched correctly.\n\n</AppOnly>\n\n<PagesOnly>\n\nWhen leveraging [`i18n` support](/docs/pages/building-your-application/routing/internationalization) with rewrites each `source` and `destination` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the rewrite. If `locale: false` is used you must prefix the `source` and `destination` with a locale for it to be matched correctly.\n\n</PagesOnly>\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async rewrites() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n      },\n      {\n        // it's possible to match all locales even when locale: false is set\n        source: '/:locale/api-alias/:path*',\n        destination: '/api/:path*',\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n      },\n    ]\n  },\n}\n```\n\n## Version History\n\n| Version   | Changes          |\n| --------- | ---------------- |\n| `v13.3.0` | `missing` added. |\n| `v10.2.0` | `has` added.     |\n| `v9.5.0`  | Headers added.   |\n", "02-api-reference/05-next-config-js/pageExtensions.mdx": "---\ntitle: pageExtensions\ndescription: Extend the default page extensions used by Next.js when resolving pages in the Pages Router.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<AppOnly>\n\nBy default, Next.js accepts files with the following extensions: `.tsx`, `.ts`, `.jsx`, `.js`. This can be modified to allow other extensions like markdown (`.md`, `.mdx`).\n\n```js filename=\"next.config.js\"\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'],\n  experimental: {\n    mdxRs: true,\n  },\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nYou can extend the default Page extensions (`.tsx`, `.ts`, `.jsx`, `.js`) used by Next.js. Inside `next.config.js`, add the `pageExtensions` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  pageExtensions: ['mdx', 'md', 'jsx', 'js', 'tsx', 'ts'],\n}\n```\n\nChanging these values affects _all_ Next.js pages, including the following:\n\n- [`middleware.js`](/docs/pages/building-your-application/routing/middleware)\n- [`instrumentation.js`](/docs/pages/building-your-application/optimizing/instrumentation)\n- `pages/_document.js`\n- `pages/_app.js`\n- `pages/api/`\n\nFor example, if you reconfigure `.ts` page extensions to `.page.ts`, you would need to rename pages like `middleware.page.ts`, `instrumentation.page.ts`, `_app.page.ts`.\n\n## Including non-page files in the `pages` directory\n\nYou can colocate test files or other files used by components in the `pages` directory. Inside `next.config.js`, add the `pageExtensions` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  pageExtensions: ['page.tsx', 'page.ts', 'page.jsx', 'page.js'],\n}\n```\n\nThen, rename your pages to have a file extension that includes `.page` (e.g. rename `MyPage.tsx` to `MyPage.page.tsx`). Ensure you rename _all_ Next.js pages, including the files mentioned above.\n\n</PagesOnly>\n", "02-api-reference/05-next-config-js/redirects.mdx": "---\ntitle: redirects\ndescription: Add redirects to your Next.js app.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nRedirects allow you to redirect an incoming request path to a different destination path.\n\nTo use redirects you can use the `redirects` key in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n`redirects` is an async function that expects an array to be returned holding objects with `source`, `destination`, and `permanent` properties:\n\n- `source` is the incoming request path pattern.\n- `destination` is the path you want to route to.\n- `permanent` `true` or `false` - if `true` will use the 308 status code which instructs clients/search engines to cache the redirect forever, if `false` will use the 307 status code which is temporary and is not cached.\n\n> **Why does Next.js use 307 and 308?** Traditionally a 302 was used for a temporary redirect, and a 301 for a permanent redirect, but many browsers changed the request method of the redirect to `GET`, regardless of the original method. For example, if the browser made a request to `POST /v1/users` which returned status code `302` with location `/v2/users`, the subsequent request might be `GET /v2/users` instead of the expected `POST /v2/users`. Next.js uses the 307 temporary redirect, and 308 permanent redirect status codes to explicitly preserve the request method used.\n\n- `basePath`: `false` or `undefined` - if false the `basePath` won't be included when matching, can be used for external redirects only.\n- `locale`: `false` or `undefined` - whether the locale should not be included when matching.\n- `has` is an array of [has objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n- `missing` is an array of [missing objects](#header-cookie-and-query-matching) with the `type`, `key` and `value` properties.\n\nRedirects are checked before the filesystem which includes pages and `/public` files.\n\nWhen using the Pages Router, redirects are not applied to client-side routing (`Link`, `router.push`) unless [Middleware](/docs/app/building-your-application/routing/middleware) is present and matches the path.\n\nWhen a redirect is applied, any query values provided in the request will be passed through to the redirect destination. For example, see the following redirect configuration:\n\n```js\n{\n  source: '/old-blog/:path*',\n  destination: '/blog/:path*',\n  permanent: false\n}\n```\n\nWhen `/old-blog/post-1?hello=world` is requested, the client will be redirected to `/blog/post-1?hello=world`.\n\n## Path Matching\n\nPath matches are allowed, for example `/old-blog/:slug` will match `/old-blog/hello-world` (no nested paths):\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-blog/:slug',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n### Wildcard Path Matching\n\nTo match a wildcard path you can use `*` after a parameter, for example `/blog/:slug*` will match `/blog/a/b/c/d/hello-world`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/blog/:slug*',\n        destination: '/news/:slug*', // Matched parameters can be used in the destination\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\n### Regex Path Matching\n\nTo match a regex path you can wrap the regex in parentheses after a parameter, for example `/post/:slug(\\\\d{1,})` will match `/post/123` but not `/post/abc`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/post/:slug(\\\\d{1,})',\n        destination: '/news/:slug', // Matched parameters can be used in the destination\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\nThe following characters `(`, `)`, `{`, `}`, `:`, `*`, `+`, `?` are used for regex path matching, so when used in the `source` as non-special values they must be escaped by adding `\\\\` before them:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      {\n        // this will match `/english(default)/something` being requested\n        source: '/english\\\\(default\\\\)/:slug',\n        destination: '/en-us/:slug',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n## Header, Cookie, and Query Matching\n\nTo only match a redirect when header, cookie, or query values also match the `has` field or don't match the `missing` field can be used. Both the `source` and all `has` items must match and all `missing` items must not match for the redirect to be applied.\n\n`has` and `missing` items can have the following fields:\n\n- `type`: `String` - must be either `header`, `cookie`, `host`, or `query`.\n- `key`: `String` - the key from the selected type to match against.\n- `value`: `String` or `undefined` - the value to check for, if undefined any value will match. A regex like string can be used to capture a specific part of the value, e.g. if the value `first-(?<paramName>.*)` is used for `first-second` then `second` will be usable in the destination with `:paramName`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      // if the header `x-redirect-me` is present,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'header',\n            key: 'x-redirect-me',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the header `x-dont-redirect` is present,\n      // this redirect will NOT be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        missing: [\n          {\n            type: 'header',\n            key: 'x-do-not-redirect',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n      // if the source, query, and cookie are matched,\n      // this redirect will be applied\n      {\n        source: '/specific/:path*',\n        has: [\n          {\n            type: 'query',\n            key: 'page',\n            // the page value will not be available in the\n            // destination since value is provided and doesn't\n            // use a named capture group e.g. (?<page>home)\n            value: 'home',\n          },\n          {\n            type: 'cookie',\n            key: 'authorized',\n            value: 'true',\n          },\n        ],\n        permanent: false,\n        destination: '/another/:path*',\n      },\n      // if the header `x-authorized` is present and\n      // contains a matching value, this redirect will be applied\n      {\n        source: '/',\n        has: [\n          {\n            type: 'header',\n            key: 'x-authorized',\n            value: '(?<authorized>yes|true)',\n          },\n        ],\n        permanent: false,\n        destination: '/home?authorized=:authorized',\n      },\n      // if the host is `example.com`,\n      // this redirect will be applied\n      {\n        source: '/:path((?!another-page$).*)',\n        has: [\n          {\n            type: 'host',\n            value: 'example.com',\n          },\n        ],\n        permanent: false,\n        destination: '/another-page',\n      },\n    ]\n  },\n}\n```\n\n### Redirects with basePath support\n\nWhen leveraging [`basePath` support](/docs/app/api-reference/next-config-js/basePath) with redirects each `source` and `destination` is automatically prefixed with the `basePath` unless you add `basePath: false` to the redirect:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  basePath: '/docs',\n\n  async redirects() {\n    return [\n      {\n        source: '/with-basePath', // automatically becomes /docs/with-basePath\n        destination: '/another', // automatically becomes /docs/another\n        permanent: false,\n      },\n      {\n        // does not add /docs since basePath: false is set\n        source: '/without-basePath',\n        destination: 'https://example.com',\n        basePath: false,\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\n### Redirects with i18n support\n\n<AppOnly>\n\nWhen leveraging [`i18n` support](/docs/app/building-your-application/routing/internationalization) with redirects each `source` and `destination` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the redirect. If `locale: false` is used you must prefix the `source` and `destination` with a locale for it to be matched correctly.\n\n</AppOnly>\n\n<PagesOnly>\n\nWhen leveraging [`i18n` support](/docs/pages/building-your-application/routing/internationalization) with redirects each `source` and `destination` is automatically prefixed to handle the configured `locales` unless you add `locale: false` to the redirect. If `locale: false` is used you must prefix the `source` and `destination` with a locale for it to be matched correctly.\n\n</PagesOnly>\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  i18n: {\n    locales: ['en', 'fr', 'de'],\n    defaultLocale: 'en',\n  },\n\n  async redirects() {\n    return [\n      {\n        source: '/with-locale', // automatically handles all locales\n        destination: '/another', // automatically passes the locale on\n        permanent: false,\n      },\n      {\n        // does not handle locales automatically since locale: false is set\n        source: '/nl/with-locale-manual',\n        destination: '/nl/another',\n        locale: false,\n        permanent: false,\n      },\n      {\n        // this matches '/' since `en` is the defaultLocale\n        source: '/en',\n        destination: '/en/another',\n        locale: false,\n        permanent: false,\n      },\n      // it's possible to match all locales even when locale: false is set\n      {\n        source: '/:locale/page',\n        destination: '/en/newpage',\n        permanent: false,\n        locale: false,\n      },\n      {\n        // this gets converted to /(en|fr|de)/(.*) so will not match the top-level\n        // `/` or `/fr` routes like /:path* would\n        source: '/(.*)',\n        destination: '/another',\n        permanent: false,\n      },\n    ]\n  },\n}\n```\n\nIn some rare cases, you might need to assign a custom status code for older HTTP Clients to properly redirect. In these cases, you can use the `statusCode` property instead of the `permanent` property, but not both. To to ensure IE11 compatibility, a `Refresh` header is automatically added for the 308 status code.\n\n## Other Redirects\n\n- Inside [API Routes](/docs/pages/building-your-application/routing/api-routes) and [Route Handlers](/docs/app/building-your-application/routing/route-handlers), you can redirect based on the incoming request.\n- Inside [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) and [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props), you can redirect specific pages at request-time.\n\n## Version History\n\n| Version   | Changes            |\n| --------- | ------------------ |\n| `v13.3.0` | `missing` added.   |\n| `v10.2.0` | `has` added.       |\n| `v9.5.0`  | `redirects` added. |\n", "02-api-reference/05-next-config-js/basePath.mdx": "---\ntitle: basePath\ndescription: Use `basePath` to deploy a Next.js application under a sub-path of a domain.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nTo deploy a Next.js application under a sub-path of a domain you can use the `basePath` config option.\n\n`basePath` allows you to set a path prefix for the application. For example, to use `/docs` instead of `''` (an empty string, the default), open `next.config.js` and add the `basePath` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  basePath: '/docs',\n}\n```\n\n> **Good to know**: This value must be set at build time and cannot be changed without re-building as the value is inlined in the client-side bundles.\n\n### Links\n\nWhen linking to other pages using `next/link` and `next/router` the `basePath` will be automatically applied.\n\nFor example, using `/about` will automatically become `/docs/about` when `basePath` is set to `/docs`.\n\n```js\nexport default function HomePage() {\n  return (\n    <>\n      <Link href=\"/about\">About Page</Link>\n    </>\n  )\n}\n```\n\nOutput html:\n\n```html\n<a href=\"/docs/about\">About Page</a>\n```\n\nThis makes sure that you don't have to change all links in your application when changing the `basePath` value.\n\n### Images\n\n<AppOnly>\n\nWhen using the [`next/image`](/docs/app/api-reference/components/image) component, you will need to add the `basePath` in front of `src`.\n\n</AppOnly>\n\n<PagesOnly>\n\nWhen using the [`next/image`](/docs/pages/api-reference/components/image) component, you will need to add the `basePath` in front of `src`.\n\n</PagesOnly>\n\nFor example, using `/docs/me.png` will properly serve your image when `basePath` is set to `/docs`.\n\n```jsx\nimport Image from 'next/image'\n\nfunction Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/docs/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n\nexport default Home\n```\n", "02-api-reference/05-next-config-js/images.mdx": "---\ntitle: images\ndescription: Custom configuration for the next/image loader\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure `next.config.js` with the following:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\nThis `loaderFile` must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:\n\n<AppOnly>\n\n```js filename=\"my/image/loader.js\"\n'use client'\n\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\nAlternatively, you can use the [`loader` prop](/docs/app/api-reference/components/image#loader) to pass the function to each instance of `next/image`.\n\n> **Good to know**: Customizing the image loader file, which accepts a function, requires using [Client Components](/docs/app/building-your-application/rendering/client-components) to serialize the provided function.\n\nTo learn more about configuring the behavior of the built-in [Image Optimization API](/docs/app/building-your-application/optimizing/images) and the [Image Component](/docs/app/api-reference/components/image), see [Image Configuration Options](/docs/app/api-reference/components/image#configuration-options) for available options.\n\n</AppOnly>\n\n<PagesOnly>\n\n```js filename=\"my/image/loader.js\"\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\nAlternatively, you can use the [`loader` prop](/docs/pages/api-reference/components/image#loader) to pass the function to each instance of `next/image`.\n\nTo learn more about configuring the behavior of the built-in [Image Optimization API](/docs/pages/building-your-application/optimizing/images) and the [Image Component](/docs/pages/api-reference/components/image), see [Image Configuration Options](/docs/pages/api-reference/components/image#configuration-options) for available options.\n\n</PagesOnly>\n\n## Example Loader Configuration\n\n- [Akamai](#akamai)\n- [AWS CloudFront](#aws-cloudfront)\n- [Cloudinary](#cloudinary)\n- [Cloudflare](#cloudflare)\n- [Contentful](#contentful)\n- [Fastly](#fastly)\n- [Gumlet](#gumlet)\n- [ImageEngine](#imageengine)\n- [Imgix](#imgix)\n- [PixelBin](#pixelbin)\n- [Sanity](#sanity)\n- [Sirv](#sirv)\n- [Supabase](#supabase)\n- [Thumbor](#thumbor)\n\n### Akamai\n\n```js\n// Docs: https://techdocs.akamai.com/ivm/reference/test-images-on-demand\nexport default function akamaiLoader({ src, width, quality }) {\n  return `https://example.com/${src}?imwidth=${width}`\n}\n```\n\n### AWS CloudFront\n\n```js\n// Docs: https://aws.amazon.com/developer/application-security-performance/articles/image-optimization\nexport default function cloudfrontLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n```\n\n### Cloudinary\n\n```js\n// Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit,q_auto/turtles.jpg\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://example.com/${params.join(',')}${src}`\n}\n```\n\n### Cloudflare\n\n```js\n// Docs: https://developers.cloudflare.com/images/url-format\nexport default function cloudflareLoader({ src, width, quality }) {\n  const params = [`width=${width}`, `quality=${quality || 75}`, 'format=auto']\n  return `https://example.com/cdn-cgi/image/${params.join(',')}/${src}`\n}\n```\n\n### Contentful\n\n```js\n// Docs: https://www.contentful.com/developers/docs/references/images-api/\nexport default function contentfulLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('fm', 'webp')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\n```\n\n### Fastly\n\n```js\n// Docs: https://developer.fastly.com/reference/io/\nexport default function fastlyLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('auto', 'webp')\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\n```\n\n### Gumlet\n\n```js\n// Docs: https://docs.gumlet.com/reference/image-transform-size\nexport default function gumletLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('format', 'auto')\n  url.searchParams.set('w', width.toString())\n  url.searchParams.set('q', (quality || 75).toString())\n  return url.href\n}\n```\n\n### ImageEngine\n\n```js\n// Docs: https://support.imageengine.io/hc/en-us/articles/360058880672-Directives\nexport default function imageengineLoader({ src, width, quality }) {\n  const compression = 100 - (quality || 50)\n  const params = [`w_${width}`, `cmpr_${compression}`)]\n  return `https://example.com${src}?imgeng=/${params.join('/')`\n}\n```\n\n### Imgix\n\n```js\n// Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300\nexport default function imgixLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('auto', params.getAll('auto').join(',') || 'format')\n  params.set('fit', params.get('fit') || 'max')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 50).toString())\n  return url.href\n}\n```\n\n### PixelBin\n\n```js\n// Doc (Resize): https://www.pixelbin.io/docs/transformations/basic/resize/#width-w\n// Doc (Optimise): https://www.pixelbin.io/docs/optimizations/quality/#image-quality-when-delivering\n// Doc (Auto Format Delivery): https://www.pixelbin.io/docs/optimizations/format/#automatic-format-selection-with-f_auto-url-parameter\nexport default function pixelBinLoader({ src, width, quality }) {\n  const name = '<your-cloud-name>'\n  const opt = `t.resize(w:${width})~t.compress(q:${quality || 75})`\n  return `https://cdn.pixelbin.io/v2/${name}/${opt}/${src}?f_auto=true`\n}\n```\n\n### Sanity\n\n```js\n// Docs: https://www.sanity.io/docs/image-urls\nexport default function sanityLoader({ src, width, quality }) {\n  const prj = 'zp7mbokg'\n  const dataset = 'production'\n  const url = new URL(`https://cdn.sanity.io/images/${prj}/${dataset}${src}`)\n  url.searchParams.set('auto', 'format')\n  url.searchParams.set('fit', 'max')\n  url.searchParams.set('w', width.toString())\n  if (quality) {\n    url.searchParams.set('q', quality.toString())\n  }\n  return url.href\n}\n```\n\n### Sirv\n\n```js\n// Docs: https://sirv.com/help/articles/dynamic-imaging/\nexport default function sirvLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  const params = url.searchParams\n  params.set('format', params.getAll('format').join(',') || 'optimal')\n  params.set('w', params.get('w') || width.toString())\n  params.set('q', (quality || 85).toString())\n  return url.href\n}\n```\n\n### Supabase\n\n```js\n// Docs: https://supabase.com/docs/guides/storage/image-transformations#nextjs-loader\nexport default function supabaseLoader({ src, width, quality }) {\n  const url = new URL(`https://example.com${src}`)\n  url.searchParams.set('width', width.toString())\n  url.searchParams.set('quality', (quality || 75).toString())\n  return url.href\n}\n```\n\n### Thumbor\n\n```js\n// Docs: https://thumbor.readthedocs.io/en/latest/\nexport default function thumborLoader({ src, width, quality }) {\n  const params = [`${width}x0`, `filters:quality(${quality || 75})`]\n  return `https://example.com${params.join('/')}${src}`\n}\n```\n", "02-api-reference/05-next-config-js/generateBuildId.mdx": "---\ntitle: generateBuildId\ndescription: Configure the build id, which is used to identify the current build in which your application is being served.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js generates an ID during `next build` to identify which version of your application is being served. The same build should be used and boot up multiple containers.\n\nIf you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the `generateBuildId` command in `next.config.js`:\n\n```jsx filename=\"next.config.js\"\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\n```\n", "02-api-reference/05-next-config-js/staleTimes.mdx": "---\ntitle: StaleTimes (experimental)\ndescription: Learn how to override the invalidation time of the Client Router Cache.\n---\n\n> **Warning**: The `staleTimes` configuration is an experimental feature. This configuration strategy will likely change in the future.\n\n`staleTimes` is an experimental feature that allows configuring the [invalidation period](/docs/app/building-your-application/caching#duration-3) of the client router cache.\n\nThis configuration option is available as of [v14.2.0](https://github.com/vercel/next.js/releases/tag/v14.2.0).\n\nYou can enable this experimental feature & provide custom revalidation times by setting the experimental `staleTimes` flag:\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    staleTimes: {\n      dynamic: 30,\n      static: 180,\n    },\n  },\n}\n\nmodule.exports = nextConfig\n```\n\nThe `static` and `dynamic` properties correspond with the time period (in seconds) based on different types of [link prefetching](/docs/app/api-reference/components/link#prefetch).\n\n- The `dynamic` property is used when the `prefetch` prop on `Link` is left unspecified or is set to `false`.\n  - Default: 30 seconds\n- The `static` property is used when the `prefetch` prop on `Link` is set to `true`, or when calling [`router.prefetch`](/docs/app/building-your-application/caching#routerprefetch).\n  - Default: 5 minutes\n\n> **Good to know:**\n>\n> - [Loading boundaries](/docs/app/api-reference/file-conventions/loading) are considered reusable for the `static` period defined in this configuration.\n> - This doesn't disable [partial rendering support](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering), **meaning shared layouts won't automatically be refetched every navigation, only the new segment data.**\n> - This doesn't change [back/forward caching](/docs/app/building-your-application/caching#router-cache) behavior to prevent layout shift & to prevent losing the browser scroll position.\n> - The different properties of this config refer to variable levels of \"liveness\" and are unrelated to whether the segment itself is opting into static or dynamic rendering. In other words, the current `static` default of 5 minutes suggests that data feels static by virtue of it being revalidated infrequently.\n\nYou can learn more about the Client Router Cache [here](/docs/app/building-your-application/caching#router-cache).\n", "02-api-reference/05-next-config-js/logging.mdx": "---\ntitle: logging\ndescription: Configure how data fetches are logged to the console when running Next.js in development mode.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nYou can configure the logging level and whether the full URL is logged to the console when running Next.js in development mode.\n\nCurrently, `logging` only applies to data fetching using the `fetch` API. It does not yet apply to other logs inside of Next.js.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  logging: {\n    fetches: {\n      fullUrl: true,\n    },\n  },\n}\n```\n", "02-api-reference/05-next-config-js/urlImports.mdx": "---\ntitle: urlImports\ndescription: Configure Next.js to allow importing modules from external URLs (experimental).\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nURL imports are an experimental feature that allows you to import modules directly from external servers (instead of from the local disk).\n\n> **Warning**: This feature is experimental. Only use domains that you trust to download and execute on your machine. Please exercise\n> discretion, and caution until the feature is flagged as stable.\n\nTo opt-in, add the allowed URL prefixes inside `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    urlImports: ['https://example.com/assets/', 'https://cdn.skypack.dev'],\n  },\n}\n```\n\nThen, you can import modules directly from URLs:\n\n```js\nimport { a, b, c } from 'https://example.com/assets/some/module.js'\n```\n\nURL Imports can be used everywhere normal package imports can be used.\n\n## Security Model\n\nThis feature is being designed with **security as the top priority**. To start, we added an experimental flag forcing you to explicitly allow the domains you accept URL imports from. We're working to take this further by limiting URL imports to execute in the browser sandbox using the [Edge Runtime](/docs/app/api-reference/edge).\n\n## Lockfile\n\nWhen using URL imports, Next.js will create a `next.lock` directory containing a lockfile and fetched assets.\nThis directory **must be committed to Git**, not ignored by `.gitignore`.\n\n- When running `next dev`, Next.js will download and add all newly discovered URL Imports to your lockfile\n- When running `next build`, Next.js will use only the lockfile to build the application for production\n\nTypically, no network requests are needed and any outdated lockfile will cause the build to fail.\nOne exception is resources that respond with `Cache-Control: no-cache`.\nThese resources will have a `no-cache` entry in the lockfile and will always be fetched from the network on each build.\n\n## Examples\n\n### Skypack\n\n```js\nimport confetti from 'https://cdn.skypack.dev/canvas-confetti'\nimport { useEffect } from 'react'\n\nexport default () => {\n  useEffect(() => {\n    confetti()\n  })\n  return <p>Hello</p>\n}\n```\n\n### Static Image Imports\n\n```js\nimport Image from 'next/image'\nimport logo from 'https://example.com/assets/logo.png'\n\nexport default () => (\n  <div>\n    <Image src={logo} placeholder=\"blur\" />\n  </div>\n)\n```\n\n### URLs in CSS\n\n```css\n.className {\n  background: url('https://example.com/assets/hero.jpg');\n}\n```\n\n### Asset Imports\n\n```js\nconst logo = new URL('https://example.com/assets/file.txt', import.meta.url)\n\nconsole.log(logo.pathname)\n\n// prints \"/_next/static/media/file.a9727b5d.txt\"\n```\n", "02-api-reference/05-next-config-js/reactStrictMode.mdx": "---\ntitle: reactStrictMode\ndescription: The complete Next.js runtime is now Strict Mode-compliant, learn how to opt-in\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n> **Good to know**: Since Next.js 13.4, Strict Mode is `true` by default with `app` router, so the above configuration is only necessary for `pages`. You can still disable Strict Mode by setting `reactStrictMode: false`.\n\n> **Suggested**: We strongly suggest you enable Strict Mode in your Next.js application to better prepare your application for the future of React.\n\nReact's [Strict Mode](https://react.dev/reference/react/StrictMode) is a development mode only feature for highlighting potential problems in an application. It helps to identify unsafe lifecycles, legacy API usage, and a number of other features.\n\nThe Next.js runtime is Strict Mode-compliant. To opt-in to Strict Mode, configure the following option in your `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  reactStrictMode: true,\n}\n```\n\nIf you or your team are not ready to use Strict Mode in your entire application, that's OK! You can incrementally migrate on a page-by-page basis using `<React.StrictMode>`.\n", "02-api-reference/05-next-config-js/devIndicators.mdx": "---\ntitle: devIndicators\ndescription: Optimized pages include an indicator to let you know if it's being statically optimized. You can opt-out of it here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<AppOnly>\n\nWhen you edit your code, and Next.js is compiling the application, a compilation indicator appears in the bottom right corner of the page.\n\n> **Good to know**: This indicator is only present in development mode and will not appear when building and running the app in production mode.\n\nIn some cases this indicator can be misplaced on your page, for example, when conflicting with a chat launcher. To change its position, open `next.config.js` and set the `buildActivityPosition` in the `devIndicators` object to `bottom-right` (default), `bottom-left`, `top-right` or `top-left`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  devIndicators: {\n    buildActivityPosition: 'bottom-right',\n  },\n}\n```\n\nIn some cases this indicator might not be useful for you. To remove it, open `next.config.js` and disable the `buildActivity` config in `devIndicators` object:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  devIndicators: {\n    buildActivity: false,\n  },\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n> **Good to know**: This indicator was removed in Next.js version 10.0.1. We recommend upgrading to the latest version of Next.js.\n\nWhen a page qualifies for [Automatic Static Optimization](/docs/pages/building-your-application/rendering/automatic-static-optimization) we show an indicator to let you know.\n\nThis is helpful since automatic static optimization can be very beneficial and knowing immediately in development if the page qualifies can be useful.\n\nIn some cases this indicator might not be useful, like when working on electron applications. To remove it open `next.config.js` and disable the `autoPrerender` config in `devIndicators`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  devIndicators: {\n    autoPrerender: false,\n  },\n}\n```\n\n</PagesOnly>\n", "02-api-reference/05-next-config-js/appDir.mdx": "---\ntitle: appDir\ndescription: Enable the App Router to use layouts, streaming, and more.\n---\n\n> **Good to know**: This option is **no longer** needed as of Next.js 13.4. The App Router is now stable.\n\nThe App Router ([`app` directory](/docs/app/building-your-application/routing)) enables support for [layouts](/docs/app/building-your-application/routing/layouts-and-templates), [Server Components](/docs/app/building-your-application/rendering/server-components), [streaming](/docs/app/building-your-application/routing/loading-ui-and-streaming), and [colocated data fetching](/docs/app/building-your-application/data-fetching).\n\nUsing the `app` directory will automatically enable [React Strict Mode](https://react.dev/reference/react/StrictMode). Learn how to [incrementally adopt `app`](/docs/app/building-your-application/upgrading/app-router-migration#migrating-from-pages-to-app).\n", "02-api-reference/05-next-config-js/exportPathMap.mdx": "---\ntitle: exportPathMap (Deprecated)\nnav_title: exportPathMap\ndescription: Customize the pages that will be exported as HTML files when using `next export`.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n> This feature is exclusive to `next export` and currently **deprecated** in favor of `getStaticPaths` with `pages` or `generateStaticParams` with `app`.\n\n<details>\n  <summary>Examples</summary>\n  \n- [Static Export](https://github.com/vercel/next.js/tree/canary/examples/with-static-export)\n\n</details>\n\n`exportPathMap` allows you to specify a mapping of request paths to page destinations, to be used during export. Paths defined in `exportPathMap` will also be available when using [`next dev`](/docs/app/api-reference/next-cli#development).\n\nLet's start with an example, to create a custom `exportPathMap` for an app with the following pages:\n\n- `pages/index.js`\n- `pages/about.js`\n- `pages/post.js`\n\nOpen `next.config.js` and add the following `exportPathMap` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  exportPathMap: async function (\n    defaultPathMap,\n    { dev, dir, outDir, distDir, buildId }\n  ) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } },\n    }\n  },\n}\n```\n\n> **Good to know**: the `query` field in `exportPathMap` cannot be used with [automatically statically optimized pages](/docs/pages/building-your-application/rendering/automatic-static-optimization) or [`getStaticProps` pages](/docs/pages/building-your-application/data-fetching/get-static-props) as they are rendered to HTML files at build-time and additional query information cannot be provided during `next export`.\n\nThe pages will then be exported as HTML files, for example, `/about` will become `/about.html`.\n\n`exportPathMap` is an `async` function that receives 2 arguments: the first one is `defaultPathMap`, which is the default map used by Next.js. The second argument is an object with:\n\n- `dev` - `true` when `exportPathMap` is being called in development. `false` when running `next export`. In development `exportPathMap` is used to define routes.\n- `dir` - Absolute path to the project directory\n- `outDir` - Absolute path to the `out/` directory ([configurable with `-o`](#customizing-the-output-directory)). When `dev` is `true` the value of `outDir` will be `null`.\n- `distDir` - Absolute path to the `.next/` directory (configurable with the [`distDir`](/docs/pages/api-reference/next-config-js/distDir) config)\n- `buildId` - The generated build id\n\nThe returned object is a map of pages where the `key` is the `pathname` and the `value` is an object that accepts the following fields:\n\n- `page`: `String` - the page inside the `pages` directory to render\n- `query`: `Object` - the `query` object passed to `getInitialProps` when prerendering. Defaults to `{}`\n\n> The exported `pathname` can also be a filename (for example, `/readme.md`), but you may need to set the `Content-Type` header to `text/html` when serving its content if it is different than `.html`.\n\n## Adding a trailing slash\n\nIt is possible to configure Next.js to export pages as `index.html` files and require trailing slashes, `/about` becomes `/about/index.html` and is routable via `/about/`. This was the default behavior prior to Next.js 9.\n\nTo switch back and add a trailing slash, open `next.config.js` and enable the `trailingSlash` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\n## Customizing the output directory\n\n<AppOnly>\n\n[`next export`](/docs/app/building-your-application/deploying/static-exports) will use `out` as the default output directory, you can customize this using the `-o` argument, like so:\n\n</AppOnly>\n\n<PagesOnly>\n\n[`next export`](/docs/pages/building-your-application/deploying/static-exports) will use `out` as the default output directory, you can customize this using the `-o` argument, like so:\n\n</PagesOnly>\n\n```bash filename=\"Terminal\"\nnext export -o outdir\n```\n\n> **Warning**: Using `exportPathMap` is deprecated and is overridden by `getStaticPaths` inside `pages`. We don't recommend using them together.\n", "02-api-reference/05-next-config-js/eslint.mdx": "---\ntitle: eslint\ndescription: Next.js reports ESLint errors and warnings during builds by default. Learn how to opt-out of this behavior here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nWhen ESLint is detected in your project, Next.js fails your **production build** (`next build`) when errors are present.\n\nIf you'd like Next.js to produce production code even when your application has ESLint errors, you can disable the built-in linting step completely. This is not recommended unless you already have ESLint configured to run in a separate part of your workflow (for example, in CI or a pre-commit hook).\n\nOpen `next.config.js` and enable the `ignoreDuringBuilds` option in the `eslint` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  eslint: {\n    // Warning: This allows production builds to successfully complete even if\n    // your project has ESLint errors.\n    ignoreDuringBuilds: true,\n  },\n}\n```\n", "02-api-reference/05-next-config-js/mdxRs.mdx": "---\ntitle: mdxRs\ndescription: Use the new Rust compiler to compile MDX files in the App Router.\n---\n\nFor use with `@next/mdx`. Compile MDX files using the new Rust compiler.\n\n```js filename=\"next.config.js\"\nconst withMDX = require('@next/mdx')()\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  pageExtensions: ['ts', 'tsx', 'mdx'],\n  experimental: {\n    mdxRs: true,\n  },\n}\n\nmodule.exports = withMDX(nextConfig)\n```\n", "02-api-reference/05-next-config-js/typescript.mdx": "---\ntitle: typescript\ndescription: Next.js reports TypeScript errors by default. Learn to opt-out of this behavior here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js fails your **production build** (`next build`) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen `next.config.js` and enable the `ignoreBuildErrors` option in the `typescript` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n```\n", "02-api-reference/05-next-config-js/transpilePackages.mdx": "---\ntitle: transpilePackages\ndescription: Automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (`node_modules`).\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js can automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (`node_modules`). This replaces the `next-transpile-modules` package.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  transpilePackages: ['@acme/ui', 'lodash-es'],\n}\n\nmodule.exports = nextConfig\n```\n\n## Version History\n\n| Version   | Changes                    |\n| --------- | -------------------------- |\n| `v13.0.0` | `transpilePackages` added. |\n", "02-api-reference/05-next-config-js/output.mdx": "---\ntitle: output\ndescription: Next.js automatically traces which files are needed by each page to allow for easy deployment of your application. Learn how it works here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nDuring a build, Next.js will automatically trace each page and its dependencies to determine all of the files that are needed for deploying a production version of your application.\n\nThis feature helps reduce the size of deployments drastically. Previously, when deploying with Docker you would need to have all files from your package's `dependencies` installed to run `next start`. Starting with Next.js 12, you can leverage Output File Tracing in the `.next/` directory to only include the necessary files.\n\nFurthermore, this removes the need for the deprecated `serverless` target which can cause various issues and also creates unnecessary duplication.\n\n## How it Works\n\nDuring `next build`, Next.js will use [`@vercel/nft`](https://github.com/vercel/nft) to statically analyze `import`, `require`, and `fs` usage to determine all files that a page might load.\n\nNext.js' production server is also traced for its needed files and output at `.next/next-server.js.nft.json` which can be leveraged in production.\n\nTo leverage the `.nft.json` files emitted to the `.next` output directory, you can read the list of files in each trace that are relative to the `.nft.json` file and then copy them to your deployment location.\n\n## Automatically Copying Traced Files\n\nNext.js can automatically create a `standalone` folder that copies only the necessary files for a production deployment including select files in `node_modules`.\n\nTo leverage this automatic copying you can enable it in your `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  output: 'standalone',\n}\n```\n\nThis will create a folder at `.next/standalone` which can then be deployed on its own without installing `node_modules`.\n\nAdditionally, a minimal `server.js` file is also output which can be used instead of `next start`. This minimal server does not copy the `public` or `.next/static` folders by default as these should ideally be handled by a CDN instead, although these folders can be copied to the `standalone/public` and `standalone/.next/static` folders manually, after which `server.js` file will serve these automatically.\n\n<AppOnly>\n\n> **Good to know**:\n>\n> - If your project needs to listen to a specific port or hostname, you can define `PORT` or `HOSTNAME` environment variables before running `server.js`. For example, run `PORT=8080 HOSTNAME=0.0.0.0 node server.js` to start the server on `http://0.0.0.0:8080`.\n> - If your project uses [Image Optimization](/docs/app/building-your-application/optimizing/images) with the default `loader`, you must install `sharp` as a dependency:\n\n</AppOnly>\n\n<PagesOnly>\n\n> **Good to know**:\n>\n> - `next.config.js` is read during `next build` and serialized into the `server.js` output file. If the legacy [`serverRuntimeConfig` or `publicRuntimeConfig` options](/docs/pages/api-reference/next-config-js/runtime-configuration) are being used, the values will be specific to values at build time.\n> - If your project needs to listen to a specific port or hostname, you can define `PORT` or `HOSTNAME` environment variables before running `server.js`. For example, run `PORT=8080 HOSTNAME=0.0.0.0 node server.js` to start the server on `http://0.0.0.0:8080`.\n> - If your project uses [Image Optimization](/docs/pages/building-your-application/optimizing/images) with the default `loader`, you must install `sharp` as a dependency:\n\n</PagesOnly>\n\n```bash filename=\"Terminal\"\nnpm i sharp\n```\n\n```bash filename=\"Terminal\"\nyarn add sharp\n```\n\n```bash filename=\"Terminal\"\npnpm add sharp\n```\n\n```bash filename=\"Terminal\"\nbun add sharp\n```\n\n## Caveats\n\n- While tracing in monorepo setups, the project directory is used for tracing by default. For `next build packages/web-app`, `packages/web-app` would be the tracing root and any files outside of that folder will not be included. To include files outside of this folder you can set `experimental.outputFileTracingRoot` in your `next.config.js`.\n\n```js filename=\"packages/web-app/next.config.js\"\nmodule.exports = {\n  experimental: {\n    // this includes files from the monorepo base two directories up\n    outputFileTracingRoot: path.join(__dirname, '../../'),\n  },\n}\n```\n\n- There are some cases in which Next.js might fail to include required files, or might incorrectly include unused files. In those cases, you can leverage `experimental.outputFileTracingExcludes` and `experimental.outputFileTracingIncludes` respectively in `next.config.js`. Each config accepts an object with [minimatch globs](https://www.npmjs.com/package/minimatch) for the key to match specific pages and a value of an array with globs relative to the project's root to either include or exclude in the trace.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    outputFileTracingExcludes: {\n      '/api/hello': ['./un-necessary-folder/**/*'],\n    },\n    outputFileTracingIncludes: {\n      '/api/another': ['./necessary-folder/**/*'],\n    },\n  },\n}\n```\n\n- Currently, Next.js does not do anything with the emitted `.nft.json` files. The files must be read by your deployment platform, for example [Vercel](https://vercel.com), to create a minimal deployment. In a future release, a new command is planned to utilize these `.nft.json` files.\n\n## Experimental `turbotrace`\n\nTracing dependencies can be slow because it requires very complex computations and analysis. We created `turbotrace` in Rust as a faster and smarter alternative to the JavaScript implementation.\n\nTo enable it, you can add the following configuration to your `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    turbotrace: {\n      // control the log level of the turbotrace, default is `error`\n      logLevel?:\n      | 'bug'\n      | 'fatal'\n      | 'error'\n      | 'warning'\n      | 'hint'\n      | 'note'\n      | 'suggestions'\n      | 'info',\n      // control if the log of turbotrace should contain the details of the analysis, default is `false`\n      logDetail?: boolean\n      // show all log messages without limit\n      // turbotrace only show 1 log message for each categories by default\n      logAll?: boolean\n      // control the context directory of the turbotrace\n      // files outside of the context directory will not be traced\n      // set the `experimental.outputFileTracingRoot` has the same effect\n      // if the `experimental.outputFileTracingRoot` and this option are both set, the `experimental.turbotrace.contextDirectory` will be used\n      contextDirectory?: string\n      // if there is `process.cwd()` expression in your code, you can set this option to tell `turbotrace` the value of `process.cwd()` while tracing.\n      // for example the require(process.cwd() + '/package.json') will be traced as require('/path/to/cwd/package.json')\n      processCwd?: string\n      // control the maximum memory usage of the `turbotrace`, in `MB`, default is `6000`.\n      memoryLimit?: number\n    },\n  },\n}\n```\n", "02-api-reference/05-next-config-js/crossOrigin.mdx": "---\ntitle: crossOrigin\ndescription: Use the `crossOrigin` option to add a crossOrigin tag on the `script` tags generated by `next/script`.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nUse the `crossOrigin` option to add a [`crossOrigin` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin) in all `<script>` tags generated by the <AppOnly>[`next/script`](/docs/app/building-your-application/optimizing/scripts) component</AppOnly> <PagesOnly>[`next/script`](/docs/pages/building-your-application/optimizing/scripts) and [`next/head`](/docs/pages/api-reference/components/head)components</PagesOnly>, and define how cross-origin requests should be handled.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  crossOrigin: 'anonymous',\n}\n```\n\n## Options\n\n- `'anonymous'`: Adds [`crossOrigin=\"anonymous\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin#anonymous) attribute.\n- `'use-credentials'`: Adds [`crossOrigin=\"use-credentials\"`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin#use-credentials).\n", "02-api-reference/05-next-config-js/trailingSlash.mdx": "---\ntitle: trailingSlash\ndescription: Configure Next.js pages to resolve with or without a trailing slash.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nBy default Next.js will redirect urls with trailing slashes to their counterpart without a trailing slash. For example `/about/` will redirect to `/about`. You can configure this behavior to act the opposite way, where urls without trailing slashes are redirected to their counterparts with trailing slashes.\n\nOpen `next.config.js` and add the `trailingSlash` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  trailingSlash: true,\n}\n```\n\nWith this option set, urls like `/about` will redirect to `/about/`.\n\nWhen used with [`output: \"export\"`](/docs/app/building-your-application/deploying/static-exports) configuration, the `/about` page will output `/about/index.html` (instead of the default `/about.html`).\n\n## Version History\n\n| Version  | Changes                |\n| -------- | ---------------------- |\n| `v9.5.0` | `trailingSlash` added. |\n", "02-api-reference/05-next-config-js/partial-prerendering.mdx": "---\ntitle: Partial Prerendering (experimental)\ndescription: Learn how to enable Partial Prerendering (experimental) in Next.js 14.\n---\n\n> **Warning**: Partial Prerendering is an experimental feature and is currently **not suitable for production environments**.\n\nPartial Prerendering is an experimental feature that allows static portions of a route to be prerendered and served from the cache with dynamic holes streamed in, all in a single HTTP request.\n\nPartial Prerendering is available in `next@canary`:\n\n```bash filename=\"Terminal\"\nnpm install next@canary\n```\n\nYou can enable Partial Prerendering by setting the experimental `ppr` flag:\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    ppr: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n> **Good to know:**\n>\n> - Partial Prerendering does not yet apply to client-side navigations. We are actively working on this.\n> - Partial Prerendering is designed for the [Node.js runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes) only. Using the subset of the Node.js runtime is not needed when you can instantly serve the static shell.\n\nLearn more about Partial Prerendering in the [Next.js Learn course](/learn/dashboard-app/partial-prerendering).\n", "02-api-reference/05-next-config-js/generateEtags.mdx": "---\ntitle: generateEtags\ndescription: Next.js will generate etags for every page by default. Learn more about how to disable etag generation here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js will generate [etags](https://en.wikipedia.org/wiki/HTTP_ETag) for every page by default. You may want to disable etag generation for HTML pages depending on your cache strategy.\n\nOpen `next.config.js` and disable the `generateEtags` option:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  generateEtags: false,\n}\n```\n", "02-api-reference/01-components/link.mdx": "---\ntitle: <Link>\ndescription: Enable fast client-side navigation with the built-in `next/link` component.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<PagesOnly>\n\n<details>\n  <summary>Examples</summary>\n\n- [Hello World](https://github.com/vercel/next.js/tree/canary/examples/hello-world)\n- [Active className on Link](https://github.com/vercel/next.js/tree/canary/examples/active-class-name)\n\n</details>\n\n</PagesOnly>\n\n`<Link>` is a React component that extends the HTML `<a>` element to provide [prefetching](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) and client-side navigation between routes. It is the primary way to navigate between routes in Next.js.\n\n<AppOnly>\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nFor an example, consider a `pages` directory with the following files:\n\n- `pages/index.js`\n- `pages/about.js`\n- `pages/blog/[slug].js`\n\nWe can have a link to each of these pages like so:\n\n```jsx\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link href=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link href=\"/about\">About Us</Link>\n      </li>\n      <li>\n        <Link href=\"/blog/hello-world\">Blog Post</Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\n</PagesOnly>\n\n## Props\n\nHere's a summary of the props available for the Link Component:\n\n<PagesOnly>\n\n| Prop                     | Example             | Type             | Required |\n| ------------------------ | ------------------- | ---------------- | -------- |\n| [`href`](#href-required) | `href=\"/dashboard\"` | String or Object | Yes      |\n| [`replace`](#replace)    | `replace={false}`   | Boolean          | -        |\n| [`scroll`](#scroll)      | `scroll={false}`    | Boolean          | -        |\n| [`prefetch`](#prefetch)  | `prefetch={false}`  | Boolean          | -        |\n\n</PagesOnly>\n\n<AppOnly>\n\n| Prop                     | Example             | Type             | Required |\n| ------------------------ | ------------------- | ---------------- | -------- |\n| [`href`](#href-required) | `href=\"/dashboard\"` | String or Object | Yes      |\n| [`replace`](#replace)    | `replace={false}`   | Boolean          | -        |\n| [`scroll`](#scroll)      | `scroll={false}`    | Boolean          | -        |\n| [`prefetch`](#prefetch)  | `prefetch={false}`  | Boolean or null  | -        |\n\n</AppOnly>\n\n> **Good to know**: `<a>` tag attributes such as `className` or `target=\"_blank\"` can be added to `<Link>` as props and will be passed to the underlying `<a>` element.\n\n### `href` (required)\n\nThe path or URL to navigate to.\n\n```jsx\n<Link href=\"/dashboard\">Dashboard</Link>\n```\n\n`href` can also accept an object, for example:\n\n```jsx\n// Navigate to /about?name=test\n<Link\n  href={{\n    pathname: '/about',\n    query: { name: 'test' },\n  }}\n>\n  About\n</Link>\n```\n\n### `replace`\n\n**Defaults to `false`.** When `true`, `next/link` will replace the current history state instead of adding a new URL into the [browser\u2019s history](https://developer.mozilla.org/docs/Web/API/History_API) stack.\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" replace>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n### `scroll`\n\n**Defaults to `true`.** The default behavior of `<Link>` **is to scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.** When `false`, `next/link` will _not_ scroll to the top of the page after a navigation.\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" scroll={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n> **Good to know**:\n>\n> - Next.js will scroll to the [Page](/docs/app/building-your-application/routing/pages) if it is not visible in the viewport upon navigation.\n\n### `prefetch`\n\n<AppOnly>\n\nPrefetching happens when a `<Link />` component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the `href`) and its data in the background to improve the performance of client-side navigations. Prefetching is only enabled in production.\n\n- **`null` (default)**: Prefetch behavior depends on whether the route is static or dynamic. For static routes, the full route will be prefetched (including all its data). For dynamic routes, the partial route down to the nearest segment with a [`loading.js`](/docs/app/building-your-application/routing/loading-ui-and-streaming#instant-loading-states) boundary will be prefetched.\n- `true`: The full route will be prefetched for both static and dynamic routes.\n- `false`: Prefetching will never happen both on entering the viewport and on hover.\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nPrefetching happens when a `<Link />` component enters the user's viewport (initially or through scroll). Next.js prefetches and loads the linked route (denoted by the `href`) and data in the background to improve the performance of client-side navigations. Prefetching is only enabled in production.\n\n- **`true` (default)**: The full route and its data will be prefetched.\n- `false`: Prefetching will not happen when entering the viewport, but will happen on hover. If you want to completely remove fetching on hover as well, consider using an `<a>` tag or [incrementally adopting](/docs/app/building-your-application/upgrading/app-router-migration) the App Router, which enables disabling prefetching on hover too.\n\n```tsx filename=\"pages/index.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n```jsx filename=\"pages/index.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <Link href=\"/dashboard\" prefetch={false}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n## Other Props\n\n### `legacyBehavior`\n\nAn `<a>` element is no longer required as a child of `<Link>`. Add the `legacyBehavior` prop to use the legacy behavior or remove the `<a>` to upgrade. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#new-link) to automatically upgrade your code.\n\n> **Good to know**: when `legacyBehavior` is not set to `true`, all [`anchor`](https://developer.mozilla.org/docs/Web/HTML/Element/a) tag properties can be passed to `next/link` as well such as, `className`, `onClick`, etc.\n\n### `passHref`\n\nForces `Link` to send the `href` property to its child. Defaults to `false`\n\n### `scroll`\n\nScroll to the top of the page after a navigation. Defaults to `true`\n\n### `shallow`\n\nUpdate the path of the current page without rerunning [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props), [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props) or [`getInitialProps`](/docs/pages/api-reference/functions/get-initial-props). Defaults to `false`\n\n### `locale`\n\nThe active locale is automatically prepended. `locale` allows for providing a different locale. When `false` `href` has to include the locale as the default behavior is disabled.\n\n</PagesOnly>\n\n## Examples\n\n### Linking to Dynamic Routes\n\nFor dynamic routes, it can be handy to use template literals to create the link's path.\n\n<PagesOnly>\n\nFor example, you can generate a list of links to the dynamic route `pages/blog/[slug].js`\n\n```jsx filename=\"pages/blog/index.js\"\nimport Link from 'next/link'\n\nfunction Posts({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default Posts\n```\n\n</PagesOnly>\n\n<AppOnly>\n\nFor example, you can generate a list of links to the dynamic route `app/blog/[slug]/page.js`:\n\n```jsx filename=\"app/blog/page.js\"\nimport Link from 'next/link'\n\nfunction Page({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n</AppOnly>\n\n### If the child is a custom component that wraps an `<a>` tag\n\n<AppOnly>\n\nIf the child of `Link` is a custom component that wraps an `<a>` tag, you must add `passHref` to `Link`. This is necessary if you\u2019re using libraries like [styled-components](https://styled-components.com/). Without this, the `<a>` tag will not have the `href` attribute, which hurts your site's accessibility and might affect SEO. If you're using [ESLint](/docs/app/building-your-application/configuring/eslint#eslint-plugin), there is a built-in rule `next/link-passhref` to ensure correct usage of `passHref`.\n\n</AppOnly>\n\n<PagesOnly>\n\nIf the child of `Link` is a custom component that wraps an `<a>` tag, you must add `passHref` to `Link`. This is necessary if you\u2019re using libraries like [styled-components](https://styled-components.com/). Without this, the `<a>` tag will not have the `href` attribute, which hurts your site's accessibility and might affect SEO. If you're using [ESLint](/docs/pages/building-your-application/configuring/eslint#eslint-plugin), there is a built-in rule `next/link-passhref` to ensure correct usage of `passHref`.\n\n</PagesOnly>\n\n```jsx\nimport Link from 'next/link'\nimport styled from 'styled-components'\n\n// This creates a custom component that wraps an <a> tag\nconst RedLink = styled.a`\n  color: red;\n`\n\nfunction NavLink({ href, name }) {\n  return (\n    <Link href={href} passHref legacyBehavior>\n      <RedLink>{name}</RedLink>\n    </Link>\n  )\n}\n\nexport default NavLink\n```\n\n- If you\u2019re using [emotion](https://emotion.sh/)\u2019s JSX pragma feature (`@jsx jsx`), you must use `passHref` even if you use an `<a>` tag directly.\n- The component should support `onClick` property to trigger navigation correctly\n\n### If the child is a functional component\n\nIf the child of `Link` is a functional component, in addition to using `passHref` and `legacyBehavior`, you must wrap the component in [`React.forwardRef`](https://react.dev/reference/react/forwardRef):\n\n```jsx\nimport Link from 'next/link'\n\n// `onClick`, `href`, and `ref` need to be passed to the DOM element\n// for proper handling\nconst MyButton = React.forwardRef(({ onClick, href }, ref) => {\n  return (\n    <a href={href} onClick={onClick} ref={ref}>\n      Click Me\n    </a>\n  )\n})\n\nfunction Home() {\n  return (\n    <Link href=\"/about\" passHref legacyBehavior>\n      <MyButton />\n    </Link>\n  )\n}\n\nexport default Home\n```\n\n### With URL Object\n\n`Link` can also receive a URL object and it will automatically format it to create the URL string. Here's how to do it:\n\n```jsx\nimport Link from 'next/link'\n\nfunction Home() {\n  return (\n    <ul>\n      <li>\n        <Link\n          href={{\n            pathname: '/about',\n            query: { name: 'test' },\n          }}\n        >\n          About us\n        </Link>\n      </li>\n      <li>\n        <Link\n          href={{\n            pathname: '/blog/[slug]',\n            query: { slug: 'my-post' },\n          }}\n        >\n          Blog Post\n        </Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default Home\n```\n\nThe above example has a link to:\n\n- A predefined route: `/about?name=test`\n- A [dynamic route](/docs/app/building-your-application/routing/dynamic-routes): `/blog/my-post`\n\nYou can use every property as defined in the [Node.js URL module documentation](https://nodejs.org/api/url.html#url_url_strings_and_url_objects).\n\n### Replace the URL instead of push\n\nThe default behavior of the `Link` component is to `push` a new URL into the `history` stack. You can use the `replace` prop to prevent adding a new entry, as in the following example:\n\n```jsx\n<Link href=\"/about\" replace>\n  About us\n</Link>\n```\n\n### Disable scrolling to the top of the page\n\nThe default behavior of `Link` is to scroll to the top of the page. When there is a hash defined it will scroll to the specific id, like a normal `<a>` tag. To prevent scrolling to the top / hash `scroll={false}` can be added to `Link`:\n\n```jsx\n<Link href=\"/#hashid\" scroll={false}>\n  Disables scrolling to the top\n</Link>\n```\n\n### Middleware\n\nIt's common to use [Middleware](/docs/app/building-your-application/routing/middleware) for authentication or other purposes that involve rewriting the user to a different page. In order for the `<Link />` component to properly prefetch links with rewrites via Middleware, you need to tell Next.js both the URL to display and the URL to prefetch. This is required to avoid un-necessary fetches to middleware to know the correct route to prefetch.\n\nFor example, if you want to serve a `/dashboard` route that has authenticated and visitor views, you may add something similar to the following in your Middleware to redirect the user to the correct page:\n\n```js filename=\"middleware.js\"\nexport function middleware(req) {\n  const nextUrl = req.nextUrl\n  if (nextUrl.pathname === '/dashboard') {\n    if (req.cookies.authToken) {\n      return NextResponse.rewrite(new URL('/auth/dashboard', req.url))\n    } else {\n      return NextResponse.rewrite(new URL('/public/dashboard', req.url))\n    }\n  }\n}\n```\n\nIn this case, you would want to use the following code in your `<Link />` component:\n\n```js\nimport Link from 'next/link'\nimport useIsAuthed from './hooks/useIsAuthed'\n\nexport default function Page() {\n  const isAuthed = useIsAuthed()\n  const path = isAuthed ? '/auth/dashboard' : '/public/dashboard'\n  return (\n    <Link as=\"/dashboard\" href={path}>\n      Dashboard\n    </Link>\n  )\n}\n```\n\n<PagesOnly>\n\n> **Good to know**: If you're using [Dynamic Routes](/docs/app/building-your-application/routing/dynamic-routes), you'll need to adapt your `as` and `href` props. For example, if you have a Dynamic Route like `/dashboard/authed/[user]` that you want to present differently via middleware, you would write: `<Link href={{ pathname: '/dashboard/authed/[user]', query: { user: username } }} as=\"/dashboard/[user]\">Profile</Link>`.\n\n</PagesOnly>\n\n## Version History\n\n| Version   | Changes                                                                                                                                                                                         |\n| --------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `v13.0.0` | No longer requires a child `<a>` tag. A [codemod](/docs/app/building-your-application/upgrading/codemods#remove-a-tags-from-link-components) is provided to automatically update your codebase. |\n| `v10.0.0` | `href` props pointing to a dynamic route are automatically resolved and no longer require an `as` prop.                                                                                         |\n| `v8.0.0`  | Improved prefetching performance.                                                                                                                                                               |\n| `v1.0.0`  | `next/link` introduced.                                                                                                                                                                         |\n", "02-api-reference/01-components/index.mdx": "---\ntitle: Components\ndescription: API Reference for Next.js built-in components.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n", "02-api-reference/01-components/image.mdx": "---\ntitle: <Image>\ndescription: Optimize Images in your Next.js Application using the built-in `next/image` Component.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<details>\n  <summary>Examples</summary>\n\n- [Image Component](https://github.com/vercel/next.js/tree/canary/examples/image-component)\n\n</details>\n\n<PagesOnly>\n\n> **Good to know**: If you are using a version of Next.js prior to 13, you'll want to use the [next/legacy/image](/docs/pages/api-reference/components/image-legacy) documentation since the component was renamed.\n\n</PagesOnly>\n\nThis API reference will help you understand how to use [props](#props) and [configuration options](#configuration-options) available for the Image Component. For features and usage, please see the [Image Component](/docs/app/building-your-application/optimizing/images) page.\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"/profile.png\"\n      width={500}\n      height={500}\n      alt=\"Picture of the author\"\n    />\n  )\n}\n```\n\n## Props\n\nHere's a summary of the props available for the Image Component:\n\n<div style={{ overflowX: 'auto', width: '100%' }}>\n| Prop                                      | Example                                  | Type            | Status     |\n| ----------------------------------------- | ---------------------------------------- | --------------- | ---------- |\n| [`src`](#src)                             | `src=\"/profile.png\"`                     | String          | Required   |\n| [`width`](#width)                         | `width={500}`                            | Integer (px)    | Required   |\n| [`height`](#height)                       | `height={500}`                           | Integer (px)    | Required   |\n| [`alt`](#alt)                             | `alt=\"Picture of the author\"`            | String          | Required   |\n| [`loader`](#loader)                       | `loader={imageLoader}`                   | Function        | -          |\n| [`fill`](#fill)                           | `fill={true}`                            | Boolean         | -          |\n| [`sizes`](#sizes)                         | `sizes=\"(max-width: 768px) 100vw, 33vw\"` | String          | -          |\n| [`quality`](#quality)                     | `quality={80}`                           | Integer (1-100) | -          |\n| [`priority`](#priority)                   | `priority={true}`                        | Boolean         | -          |\n| [`placeholder`](#placeholder)             | `placeholder=\"blur\"`                     | String          | -          |\n| [`style`](#style)                         | `style={{objectFit: \"contain\"}}`         | Object          | -          |\n| [`onLoadingComplete`](#onloadingcomplete) | `onLoadingComplete={img => done())}`     | Function        | Deprecated |\n| [`onLoad`](#onload)                       | `onLoad={event => done())}`              | Function        | -          |\n| [`onError`](#onerror)                     | `onError(event => fail()}`               | Function        | -          |\n| [`loading`](#loading)                     | `loading=\"lazy\"`                         | String          | -          |\n| [`blurDataURL`](#blurdataurl)             | `blurDataURL=\"data:image/jpeg...\"`       | String          | -          |\n| [`overrideSrc`](#overridesrc)             | `overrideSrc=\"/seo.png\"`                 | String          | -          |\n</div>\n\n## Required Props\n\nThe Image Component requires the following properties: `src`, `width`, `height`, and `alt`.\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <div>\n      <Image\n        src=\"/profile.png\"\n        width={500}\n        height={500}\n        alt=\"Picture of the author\"\n      />\n    </div>\n  )\n}\n```\n\n### `src`\n\nMust be one of the following:\n\n- A [statically imported](/docs/app/building-your-application/optimizing/images#local-images) image file\n- A path string. This can be either an absolute external URL, or an internal path depending on the [loader](#loader) prop.\n\nWhen using an external URL, you must add it to [remotePatterns](#remotepatterns) in `next.config.js`.\n\n### `width`\n\nThe `width` property represents the _rendered_ width in pixels, so it will affect how large the image appears.\n\nRequired, except for [statically imported images](/docs/app/building-your-application/optimizing/images#local-images) or images with the [`fill` property](#fill).\n\n### `height`\n\nThe `height` property represents the _rendered_ height in pixels, so it will affect how large the image appears.\n\nRequired, except for [statically imported images](/docs/app/building-your-application/optimizing/images#local-images) or images with the [`fill` property](#fill).\n\n### `alt`\n\nThe `alt` property is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image.\n\nIt should contain text that could replace the image [without changing the meaning of the page](https://html.spec.whatwg.org/multipage/images.html#general-guidelines). It is not meant to supplement the image and should not repeat information that is already provided in the captions above or below the image.\n\nIf the image is [purely decorative](https://html.spec.whatwg.org/multipage/images.html#a-purely-decorative-image-that-doesn't-add-any-information) or [not intended for the user](https://html.spec.whatwg.org/multipage/images.html#an-image-not-intended-for-the-user), the `alt` property should be an empty string (`alt=\"\"`).\n\n[Learn more](https://html.spec.whatwg.org/multipage/images.html#alt)\n\n## Optional Props\n\nThe `<Image />` component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties of the Image component. Find details about more rarely-used properties in the [Advanced Props](#advanced-props) section.\n\n### `loader`\n\nA custom function used to resolve image URLs.\n\nA `loader` is a function returning a URL string for the image, given the following parameters:\n\n- [`src`](#src)\n- [`width`](#width)\n- [`quality`](#quality)\n\nHere is an example of using a custom loader:\n\n<AppOnly>\n\n```js\n'use client'\n\nimport Image from 'next/image'\n\nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n> **Good to know**: Using props like `loader`, which accept a function, requires using [Client Components](/docs/app/building-your-application/rendering/client-components) to serialize the provided function.\n\n</AppOnly>\n\n<PagesOnly>\n\n```js\nimport Image from 'next/image'\n\nconst imageLoader = ({ src, width, quality }) => {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n\nexport default function Page() {\n  return (\n    <Image\n      loader={imageLoader}\n      src=\"me.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\n</PagesOnly>\n\nAlternatively, you can use the [loaderFile](#loaderfile) configuration in `next.config.js` to configure every instance of `next/image` in your application, without passing a prop.\n\n### `fill`\n\n```js\nfill={true} // {true} | {false}\n```\n\nA boolean that causes the image to fill the parent element, which is useful when the [`width`](#width) and [`height`](#height) are unknown.\n\nThe parent element _must_ assign `position: \"relative\"`, `position: \"fixed\"`, or `position: \"absolute\"` style.\n\nBy default, the img element will automatically be assigned the `position: \"absolute\"` style.\n\nIf no styles are applied to the image, the image will stretch to fit the container. You may prefer to set `object-fit: \"contain\"` for an image which is letterboxed to fit the container and preserve aspect ratio.\n\nAlternatively, `object-fit: \"cover\"` will cause the image to fill the entire container and be cropped to preserve aspect ratio. For this to look correct, the `overflow: \"hidden\"` style should be assigned to the parent element.\n\nFor more information, see also:\n\n- [`position`](https://developer.mozilla.org/docs/Web/CSS/position)\n- [`object-fit`](https://developer.mozilla.org/docs/Web/CSS/object-fit)\n- [`object-position`](https://developer.mozilla.org/docs/Web/CSS/object-position)\n\n### `sizes`\n\nA string, similar to a media query, that provides information about how wide the image will be at different breakpoints. The value of `sizes` will greatly affect performance for images using [`fill`](#fill) or which are [styled to have a responsive size](#responsive-images).\n\nThe `sizes` property serves two important purposes related to image performance:\n\n- First, the value of `sizes` is used by the browser to determine which size of the image to download, from `next/image`'s automatically generated `srcset`. When the browser chooses, it does not yet know the size of the image on the page, so it selects an image that is the same size or larger than the viewport. The `sizes` property allows you to tell the browser that the image will actually be smaller than full screen. If you don't specify a `sizes` value in an image with the `fill` property, a default value of `100vw` (full screen width) is used.\n- Second, the `sizes` property changes the behavior of the automatically generated `srcset` value. If no `sizes` value is present, a small `srcset` is generated, suitable for a fixed-size image (1x/2x/etc). If `sizes` is defined, a large `srcset` is generated, suitable for a responsive image (640w/750w/etc). If the `sizes` property includes sizes such as `50vw`, which represent a percentage of the viewport width, then the `srcset` is trimmed to not include any values which are too small to ever be necessary.\n\nFor example, if you know your styling will cause an image to be full-width on mobile devices, in a 2-column layout on tablets, and a 3-column layout on desktop displays, you should include a sizes property such as the following:\n\n```jsx\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <div className=\"grid-element\">\n      <Image\n        fill\n        src=\"/example.png\"\n        sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n      />\n    </div>\n  )\n}\n```\n\nThis example `sizes` could have a dramatic effect on performance metrics. Without the `33vw` sizes, the image selected from the server would be 3 times as wide as it needs to be. Because file size is proportional to the square of the width, without `sizes` the user would download an image that's 9 times larger than necessary.\n\nLearn more about `srcset` and `sizes`:\n\n- [web.dev](https://web.dev/learn/design/responsive-images/#sizes)\n- [mdn](https://developer.mozilla.org/docs/Web/HTML/Element/img#sizes)\n\n### `quality`\n\n```js\nquality={75} // {number 1-100}\n```\n\nThe quality of the optimized image, an integer between `1` and `100`, where `100` is the best quality and therefore largest file size. Defaults to `75`.\n\n### `priority`\n\n```js\npriority={false} // {false} | {true}\n```\n\nWhen true, the image will be considered high priority and\n[preload](https://web.dev/preload-responsive-images/). Lazy loading is automatically disabled for images using `priority`.\n\nYou should use the `priority` property on any image detected as the [Largest Contentful Paint (LCP)](https://nextjs.org/learn/seo/web-performance/lcp) element. It may be appropriate to have multiple priority images, as different images may be the LCP element for different viewport sizes.\n\nShould only be used when the image is visible above the fold. Defaults to `false`.\n\n### `placeholder`\n\n```js\nplaceholder = 'empty' // \"empty\" | \"blur\" | \"data:image/...\"\n```\n\nA placeholder to use while the image is loading. Possible values are `blur`, `empty`, or `data:image/...`. Defaults to `empty`.\n\nWhen `blur`, the [`blurDataURL`](#blurdataurl) property will be used as the placeholder. If `src` is an object from a [static import](/docs/app/building-your-application/optimizing/images#local-images) and the imported image is `.jpg`, `.png`, `.webp`, or `.avif`, then `blurDataURL` will be automatically populated, except when the image is detected to be animated.\n\nFor dynamic images, you must provide the [`blurDataURL`](#blurdataurl) property. Solutions such as [Plaiceholder](https://github.com/joe-bell/plaiceholder) can help with `base64` generation.\n\nWhen `data:image/...`, the [Data URL](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) will be used as the placeholder while the image is loading.\n\nWhen `empty`, there will be no placeholder while the image is loading, only empty space.\n\nTry it out:\n\n- [Demo the `blur` placeholder](https://image-component.nextjs.gallery/placeholder)\n- [Demo the shimmer effect with data URL `placeholder` prop](https://image-component.nextjs.gallery/shimmer)\n- [Demo the color effect with `blurDataURL` prop](https://image-component.nextjs.gallery/color)\n\n## Advanced Props\n\nIn some cases, you may need more advanced usage. The `<Image />` component optionally accepts the following advanced properties.\n\n### `style`\n\nAllows passing CSS styles to the underlying image element.\n\n```jsx filename=\"components/ProfileImage.js\"\nconst imageStyle = {\n  borderRadius: '50%',\n  border: '1px solid #fff',\n}\n\nexport default function ProfileImage() {\n  return <Image src=\"...\" style={imageStyle} />\n}\n```\n\nRemember that the required width and height props can interact with your styling. If you use styling to modify an image's width, you should also style its height to `auto` to preserve its intrinsic aspect ratio, or your image will be distorted.\n\n### `onLoadingComplete`\n\n<AppOnly>\n\n```jsx\n'use client'\n\n<Image onLoadingComplete={(img) => console.log(img.naturalWidth)} />\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx\n<Image onLoadingComplete={(img) => console.log(img.naturalWidth)} />\n```\n\n</PagesOnly>\n\n> **Warning**: Deprecated since Next.js 14 in favor of [`onLoad`](#onload).\n\nA callback function that is invoked once the image is completely loaded and the [placeholder](#placeholder) has been removed.\n\nThe callback function will be called with one argument, a reference to the underlying `<img>` element.\n\n<AppOnly>\n\n> **Good to know**: Using props like `onLoadingComplete`, which accept a function, requires using [Client Components](/docs/app/building-your-application/rendering/client-components) to serialize the provided function.\n\n</AppOnly>\n\n### `onLoad`\n\n```jsx\n<Image onLoad={(e) => console.log(e.target.naturalWidth)} />\n```\n\nA callback function that is invoked once the image is completely loaded and the [placeholder](#placeholder) has been removed.\n\nThe callback function will be called with one argument, the Event which has a `target` that references the underlying `<img>` element.\n\n<AppOnly>\n\n> **Good to know**: Using props like `onLoad`, which accept a function, requires using [Client Components](/docs/app/building-your-application/rendering/client-components) to serialize the provided function.\n\n</AppOnly>\n\n### `onError`\n\n```jsx\n<Image onError={(e) => console.error(e.target.id)} />\n```\n\nA callback function that is invoked if the image fails to load.\n\n<AppOnly>\n\n> **Good to know**: Using props like `onError`, which accept a function, requires using [Client Components](/docs/app/building-your-application/rendering/client-components) to serialize the provided function.\n\n</AppOnly>\n\n### `loading`\n\n> **Recommendation**: This property is only meant for advanced use cases. Switching an image to load with `eager` will normally **hurt performance**. We recommend using the [`priority`](#priority) property instead, which will eagerly preload the image.\n\n```js\nloading = 'lazy' // {lazy} | {eager}\n```\n\nThe loading behavior of the image. Defaults to `lazy`.\n\nWhen `lazy`, defer loading the image until it reaches a calculated distance from\nthe viewport.\n\nWhen `eager`, load the image immediately.\n\nLearn more about the [`loading` attribute](https://developer.mozilla.org/docs/Web/HTML/Element/img#loading).\n\n### `blurDataURL`\n\nA [Data URL](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) to\nbe used as a placeholder image before the `src` image successfully loads. Only takes effect when combined\nwith [`placeholder=\"blur\"`](#placeholder).\n\nMust be a base64-encoded image. It will be enlarged and blurred, so a very small image (10px or\nless) is recommended. Including larger images as placeholders may harm your application performance.\n\nTry it out:\n\n- [Demo the default `blurDataURL` prop](https://image-component.nextjs.gallery/placeholder)\n- [Demo the color effect with `blurDataURL` prop](https://image-component.nextjs.gallery/color)\n\nYou can also [generate a solid color Data URL](https://png-pixel.com) to match the image.\n\n### `unoptimized`\n\n```js\nunoptimized = {false} // {false} | {true}\n```\n\nWhen true, the source image will be served as-is instead of changing quality,\nsize, or format. Defaults to `false`.\n\n```js\nimport Image from 'next/image'\n\nconst UnoptimizedImage = (props) => {\n  return <Image {...props} unoptimized />\n}\n```\n\nSince Next.js 12.3.0, this prop can be assigned to all images by updating `next.config.js` with the following configuration:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    unoptimized: true,\n  },\n}\n```\n\n### `overrideSrc`\n\nWhen providing the `src` prop to the `<Image>` component, both the `srcset` and `src` attributes are generated automatically for the resulting `<img>`.\n\n```jsx filename=\"input.js\"\n<Image src=\"/me.jpg\" />\n```\n\n```html filename=\"output.html\"\n<img\n  srcset=\"\n    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/_next/image?url=%2Fme.jpg&w=828&q=75\"\n/>\n```\n\nIn some cases, it is not desirable to have the `src` attribute generated and you may wish to override it using the `overrideSrc` prop.\n\nFor example, when upgrading an existing website from `<img>` to `<Image>`, you may wish to maintain the same `src` attribute for SEO purposes such as image ranking or avoiding recrawl.\n\n```jsx filename=\"input.js\"\n<Image src=\"/me.jpg\" overrideSrc=\"/override.jpg\" />\n```\n\n```html filename=\"output.html\"\n<img\n  srcset=\"\n    /_next/image?url=%2Fme.jpg&w=640&q=75 1x,\n    /_next/image?url=%2Fme.jpg&w=828&q=75 2x\n  \"\n  src=\"/override.jpg\"\n/>\n```\n\n### Other Props\n\nOther properties on the `<Image />` component will be passed to the underlying\n`img` element with the exception of the following:\n\n- `srcSet`. Use [Device Sizes](#devicesizes) instead.\n- `decoding`. It is always `\"async\"`.\n\n## Configuration Options\n\nIn addition to props, you can configure the Image Component in `next.config.js`. The following options are available:\n\n### `remotePatterns`\n\nTo protect your application from malicious users, configuration is required in order to use external images. This ensures that only external images from your account can be served from the Next.js Image Optimization API. These external images can be configured with the `remotePatterns` property in your `next.config.js` file, as shown below:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n        port: '',\n        pathname: '/account123/**',\n      },\n    ],\n  },\n}\n```\n\n> **Good to know**: The example above will ensure the `src` property of `next/image` must start with `https://example.com/account123/`. Any other protocol, hostname, port, or unmatched path will respond with 400 Bad Request.\n\nBelow is another example of the `remotePatterns` property in the `next.config.js` file:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: '**.example.com',\n        port: '',\n      },\n    ],\n  },\n}\n```\n\n> **Good to know**: The example above will ensure the `src` property of `next/image` must start with `https://img1.example.com` or `https://me.avatar.example.com` or any number of subdomains. Any other protocol, port, or unmatched hostname will respond with 400 Bad Request.\n\nWildcard patterns can be used for both `pathname` and `hostname` and have the following syntax:\n\n- `*` match a single path segment or subdomain\n- `**` match any number of path segments at the end or subdomains at the beginning\n\nThe `**` syntax does not work in the middle of the pattern.\n\n> **Good to know**: When omitting `protocol`, `port` or `pathname`, then the wildcard `**` is implied. This is not recommended because it may allow malicious actors to optimize urls you did not intend.\n\n### `domains`\n\n> **Warning**: Deprecated since Next.js 14 in favor of strict [`remotePatterns`](#remotepatterns) in order to protect your application from malicious users. Only use `domains` if you own all the content served from the domain.\n\nSimilar to [`remotePatterns`](#remotepatterns), the `domains` configuration can be used to provide a list of allowed hostnames for external images.\n\nHowever, the `domains` configuration does not support wildcard pattern matching and it cannot restrict protocol, port, or pathname.\n\nBelow is an example of the `domains` property in the `next.config.js` file:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    domains: ['assets.acme.com'],\n  },\n}\n```\n\n### `loaderFile`\n\nIf you want to use a cloud provider to optimize images instead of using the Next.js built-in Image Optimization API, you can configure the `loaderFile` in your `next.config.js` like the following:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    loader: 'custom',\n    loaderFile: './my/image/loader.js',\n  },\n}\n```\n\nThis must point to a file relative to the root of your Next.js application. The file must export a default function that returns a string, for example:\n\n<AppOnly>\n\n```js filename=\"my/image/loader.js\"\n'use client'\n\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```js filename=\"my/image/loader.js\"\nexport default function myImageLoader({ src, width, quality }) {\n  return `https://example.com/${src}?w=${width}&q=${quality || 75}`\n}\n```\n\n</PagesOnly>\n\nAlternatively, you can use the [`loader` prop](#loader) to configure each instance of `next/image`.\n\nExamples:\n\n- [Custom Image Loader Configuration](/docs/app/api-reference/next-config-js/images#example-loader-configuration)\n\n<AppOnly>\n\n> **Good to know**: Customizing the image loader file, which accepts a function, requires using [Client Components](/docs/app/building-your-application/rendering/client-components) to serialize the provided function.\n\n</AppOnly>\n\n## Advanced\n\nThe following configuration is for advanced use cases and is usually not necessary. If you choose to configure the properties below, you will override any changes to the Next.js defaults in future updates.\n\n### `deviceSizes`\n\nIf you know the expected device widths of your users, you can specify a list of device width breakpoints using the `deviceSizes` property in `next.config.js`. These widths are used when the `next/image` component uses [`sizes`](#sizes) prop to ensure the correct image is served for user's device.\n\nIf no configuration is provided, the default below is used.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  },\n}\n```\n\n### `imageSizes`\n\nYou can specify a list of image widths using the `images.imageSizes` property in your `next.config.js` file. These widths are concatenated with the array of [device sizes](#devicesizes) to form the full array of sizes used to generate image [srcset](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)s.\n\nThe reason there are two separate lists is that imageSizes is only used for images which provide a [`sizes`](#sizes) prop, which indicates that the image is less than the full width of the screen. **Therefore, the sizes in imageSizes should all be smaller than the smallest size in deviceSizes.**\n\nIf no configuration is provided, the default below is used.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  },\n}\n```\n\n### `formats`\n\nThe default [Image Optimization API](#loader) will automatically detect the browser's supported image formats via the request's `Accept` header.\n\nIf the `Accept` head matches more than one of the configured formats, the first match in the array is used. Therefore, the array order matters. If there is no match (or the source image is [animated](#animated-images)), the Image Optimization API will fallback to the original image's format.\n\nIf no configuration is provided, the default below is used.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    formats: ['image/webp'],\n  },\n}\n```\n\nYou can enable AVIF support with the following configuration.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    formats: ['image/avif', 'image/webp'],\n  },\n}\n```\n\n> **Good to know**:\n>\n> - AVIF generally takes 20% longer to encode but it compresses 20% smaller compared to WebP. This means that the first time an image is requested, it will typically be slower and then subsequent requests that are cached will be faster.\n> - If you self-host with a Proxy/CDN in front of Next.js, you must configure the Proxy to forward the `Accept` header.\n\n## Caching Behavior\n\nThe following describes the caching algorithm for the default [loader](#loader). For all other loaders, please refer to your cloud provider's documentation.\n\nImages are optimized dynamically upon request and stored in the `<distDir>/cache/images` directory. The optimized image file will be served for subsequent requests until the expiration is reached. When a request is made that matches a cached but expired file, the expired image is served stale immediately. Then the image is optimized again in the background (also called revalidation) and saved to the cache with the new expiration date.\n\nThe cache status of an image can be determined by reading the value of the `x-nextjs-cache` response header. The possible values are the following:\n\n- `MISS` - the path is not in the cache (occurs at most once, on the first visit)\n- `STALE` - the path is in the cache but exceeded the revalidate time so it will be updated in the background\n- `HIT` - the path is in the cache and has not exceeded the revalidate time\n\nThe expiration (or rather Max Age) is defined by either the [`minimumCacheTTL`](#minimumcachettl) configuration or the upstream image `Cache-Control` header, whichever is larger. Specifically, the `max-age` value of the `Cache-Control` header is used. If both `s-maxage` and `max-age` are found, then `s-maxage` is preferred. The `max-age` is also passed-through to any downstream clients including CDNs and browsers.\n\n- You can configure [`minimumCacheTTL`](#minimumcachettl) to increase the cache duration when the upstream image does not include `Cache-Control` header or the value is very low.\n- You can configure [`deviceSizes`](#devicesizes) and [`imageSizes`](#imagesizes) to reduce the total number of possible generated images.\n- You can configure [formats](#formats) to disable multiple formats in favor of a single image format.\n\n### `minimumCacheTTL`\n\nYou can configure the Time to Live (TTL) in seconds for cached optimized images. In many cases, it's better to use a [Static Image Import](/docs/app/building-your-application/optimizing/images#local-images) which will automatically hash the file contents and cache the image forever with a `Cache-Control` header of `immutable`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    minimumCacheTTL: 60,\n  },\n}\n```\n\nThe expiration (or rather Max Age) of the optimized image is defined by either the `minimumCacheTTL` or the upstream image `Cache-Control` header, whichever is larger.\n\nIf you need to change the caching behavior per image, you can configure [`headers`](/docs/app/api-reference/next-config-js/headers) to set the `Cache-Control` header on the upstream image (e.g. `/some-asset.jpg`, not `/_next/image` itself).\n\nThere is no mechanism to invalidate the cache at this time, so its best to keep `minimumCacheTTL` low. Otherwise you may need to manually change the [`src`](#src) prop or delete `<distDir>/cache/images`.\n\n### `disableStaticImages`\n\nThe default behavior allows you to import static files such as `import icon from './icon.png'` and then pass that to the `src` property.\n\nIn some cases, you may wish to disable this feature if it conflicts with other plugins that expect the import to behave differently.\n\nYou can disable static image imports inside your `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    disableStaticImages: true,\n  },\n}\n```\n\n### `dangerouslyAllowSVG`\n\nThe default [loader](#loader) does not optimize SVG images for a few reasons. First, SVG is a vector format meaning it can be resized losslessly. Second, SVG has many of the same features as HTML/CSS, which can lead to vulnerabilities without proper [Content Security Policy (CSP) headers](/docs/app/api-reference/next-config-js/headers#content-security-policy).\n\nTherefore, we recommended using the [`unoptimized`](#unoptimized) prop when the [`src`](#src) prop is known to be SVG. This happens automatically when `src` ends with `\".svg\"`.\n\nHowever, if you need to serve SVG images with the default Image Optimization API, you can set `dangerouslyAllowSVG` inside your `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    dangerouslyAllowSVG: true,\n    contentDispositionType: 'attachment',\n    contentSecurityPolicy: \"default-src 'self'; script-src 'none'; sandbox;\",\n  },\n}\n```\n\nIn addition, it is strongly recommended to also set `contentDispositionType` to force the browser to download the image, as well as `contentSecurityPolicy` to prevent scripts embedded in the image from executing.\n\n## Animated Images\n\nThe default [loader](#loader) will automatically bypass Image Optimization for animated images and serve the image as-is.\n\nAuto-detection for animated files is best-effort and supports GIF, APNG, and WebP. If you want to explicitly bypass Image Optimization for a given animated image, use the [unoptimized](#unoptimized) prop.\n\n## Responsive Images\n\nThe default generated `srcset` contains `1x` and `2x` images in order to support different device pixel ratios. However, you may wish to render a responsive image that stretches with the viewport. In that case, you'll need to set [`sizes`](#sizes) as well as `style` (or `className`).\n\nYou can render a responsive image using one of the following methods below.\n\n### Responsive image using a static import\n\nIf the source image is not dynamic, you can statically import to create a responsive image:\n\n```jsx filename=\"components/author.js\"\nimport Image from 'next/image'\nimport me from '../photos/me.jpg'\n\nexport default function Author() {\n  return (\n    <Image\n      src={me}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n    />\n  )\n}\n```\n\nTry it out:\n\n- [Demo the image responsive to viewport](https://image-component.nextjs.gallery/responsive)\n\n### Responsive image with aspect ratio\n\nIf the source image is a dynamic or a remote url, you will also need to provide `width` and `height` to set the correct aspect ratio of the responsive image:\n\n```jsx filename=\"components/page.js\"\nimport Image from 'next/image'\n\nexport default function Page({ photoUrl }) {\n  return (\n    <Image\n      src={photoUrl}\n      alt=\"Picture of the author\"\n      sizes=\"100vw\"\n      style={{\n        width: '100%',\n        height: 'auto',\n      }}\n      width={500}\n      height={300}\n    />\n  )\n}\n```\n\nTry it out:\n\n- [Demo the image responsive to viewport](https://image-component.nextjs.gallery/responsive)\n\n### Responsive image with `fill`\n\nIf you don't know the aspect ratio, you will need to set the [`fill`](#fill) prop and set `position: relative` on the parent. Optionally, you can set `object-fit` style depending on the desired stretch vs crop behavior:\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\n\nexport default function Page({ photoUrl }) {\n  return (\n    <div style={{ position: 'relative', width: '300px', height: '500px' }}>\n      <Image\n        src={photoUrl}\n        alt=\"Picture of the author\"\n        sizes=\"300px\"\n        fill\n        style={{\n          objectFit: 'contain',\n        }}\n      />\n    </div>\n  )\n}\n```\n\nTry it out:\n\n- [Demo the `fill` prop](https://image-component.nextjs.gallery/fill)\n\n## Theme Detection CSS\n\nIf you want to display a different image for light and dark mode, you can create a new component that wraps two `<Image>` components and reveals the correct one based on a CSS media query.\n\n```css filename=\"components/theme-image.module.css\"\n.imgDark {\n  display: none;\n}\n\n@media (prefers-color-scheme: dark) {\n  .imgLight {\n    display: none;\n  }\n  .imgDark {\n    display: unset;\n  }\n}\n```\n\n```tsx filename=\"components/theme-image.tsx\" switcher\nimport styles from './theme-image.module.css'\nimport Image, { ImageProps } from 'next/image'\n\ntype Props = Omit<ImageProps, 'src' | 'priority' | 'loading'> & {\n  srcLight: string\n  srcDark: string\n}\n\nconst ThemeImage = (props: Props) => {\n  const { srcLight, srcDark, ...rest } = props\n\n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n```\n\n```jsx filename=\"components/theme-image.js\" switcher\nimport styles from './theme-image.module.css'\nimport Image from 'next/image'\n\nconst ThemeImage = (props) => {\n  const { srcLight, srcDark, ...rest } = props\n\n  return (\n    <>\n      <Image {...rest} src={srcLight} className={styles.imgLight} />\n      <Image {...rest} src={srcDark} className={styles.imgDark} />\n    </>\n  )\n}\n```\n\n> **Good to know**: The default behavior of `loading=\"lazy\"` ensures that only the correct image is loaded. You cannot use `priority` or `loading=\"eager\"` because that would cause both images to load. Instead, you can use [`fetchPriority=\"high\"`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority).\n\nTry it out:\n\n- [Demo light/dark mode theme detection](https://image-component.nextjs.gallery/theme)\n\n## getImageProps\n\nFor more advanced use cases, you can call `getImageProps()` to get the props that would be passed to the underlying `<img>` element, and instead pass to them to another component, style, canvas, etc.\n\nThis also avoid calling React `useState()` so it can lead to better performance, but it cannot be used with the [`placeholder`](#placeholder) prop because the placeholder will never be removed.\n\n### Theme Detection Picture\n\nIf you want to display a different image for light and dark mode, you can use the [`<picture>`](https://developer.mozilla.org/docs/Web/HTML/Element/picture) element to display a different image based on the user's [preferred color scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme).\n\n```jsx filename=\"app/page.js\"\nimport { getImageProps } from 'next/image'\n\nexport default function Page() {\n  const common = { alt: 'Theme Example', width: 800, height: 400 }\n  const {\n    props: { srcSet: dark },\n  } = getImageProps({ ...common, src: '/dark.png' })\n  const {\n    props: { srcSet: light, ...rest },\n  } = getImageProps({ ...common, src: '/light.png' })\n\n  return (\n    <picture>\n      <source media=\"(prefers-color-scheme: dark)\" srcSet={dark} />\n      <source media=\"(prefers-color-scheme: light)\" srcSet={light} />\n      <img {...rest} />\n    </picture>\n  )\n}\n```\n\n### Art Direction\n\nIf you want to display a different image for mobile and desktop, sometimes called [Art Direction](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images#art_direction), you can provide different `src`, `width`, `height`, and `quality` props to `getImageProps()`.\n\n```jsx filename=\"app/page.js\"\nimport { getImageProps } from 'next/image'\n\nexport default function Home() {\n  const common = { alt: 'Art Direction Example', sizes: '100vw' }\n  const {\n    props: { srcSet: desktop },\n  } = getImageProps({\n    ...common,\n    width: 1440,\n    height: 875,\n    quality: 80,\n    src: '/desktop.jpg',\n  })\n  const {\n    props: { srcSet: mobile, ...rest },\n  } = getImageProps({\n    ...common,\n    width: 750,\n    height: 1334,\n    quality: 70,\n    src: '/mobile.jpg',\n  })\n\n  return (\n    <picture>\n      <source media=\"(min-width: 1000px)\" srcSet={desktop} />\n      <source media=\"(min-width: 500px)\" srcSet={mobile} />\n      <img {...rest} style={{ width: '100%', height: 'auto' }} />\n    </picture>\n  )\n}\n```\n\n### Background CSS\n\nYou can even convert the `srcSet` string to the [`image-set()`](https://developer.mozilla.org/en-US/docs/Web/CSS/image/image-set) CSS function to optimize a background image.\n\n```jsx filename=\"app/page.js\"\nimport { getImageProps } from 'next/image'\n\nfunction getBackgroundImage(srcSet = '') {\n  const imageSet = srcSet\n    .split(', ')\n    .map((str) => {\n      const [url, dpi] = str.split(' ')\n      return `url(\"${url}\") ${dpi}`\n    })\n    .join(', ')\n  return `image-set(${imageSet})`\n}\n\nexport default function Home() {\n  const {\n    props: { srcSet },\n  } = getImageProps({ alt: '', width: 128, height: 128, src: '/img.png' })\n  const backgroundImage = getBackgroundImage(srcSet)\n  const style = { height: '100vh', width: '100vw', backgroundImage }\n\n  return (\n    <main style={style}>\n      <h1>Hello World</h1>\n    </main>\n  )\n}\n```\n\n## Known Browser Bugs\n\nThis `next/image` component uses browser native [lazy loading](https://caniuse.com/loading-lazy-attr), which may fallback to eager loading for older browsers before Safari 15.4. When using the blur-up placeholder, older browsers before Safari 12 will fallback to empty placeholder. When using styles with `width`/`height` of `auto`, it is possible to cause [Layout Shift](https://web.dev/cls/) on older browsers before Safari 15 that don't [preserve the aspect ratio](https://caniuse.com/mdn-html_elements_img_aspect_ratio_computed_from_attributes). For more details, see [this MDN video](https://www.youtube.com/watch?v=4-d_SoCHeWE).\n\n- [Safari 15 - 16.3](https://bugs.webkit.org/show_bug.cgi?id=243601) display a gray border while loading. Safari 16.4 [fixed this issue](https://webkit.org/blog/13966/webkit-features-in-safari-16-4/#:~:text=Now%20in%20Safari%2016.4%2C%20a%20gray%20line%20no%20longer%20appears%20to%20mark%20the%20space%20where%20a%20lazy%2Dloaded%20image%20will%20appear%20once%20it%E2%80%99s%20been%20loaded.). Possible solutions:\n  - Use CSS `@supports (font: -apple-system-body) and (-webkit-appearance: none) { img[loading=\"lazy\"] { clip-path: inset(0.6px) } }`\n  - Use [`priority`](#priority) if the image is above the fold\n- [Firefox 67+](https://bugzilla.mozilla.org/show_bug.cgi?id=1556156) displays a white background while loading. Possible solutions:\n  - Enable [AVIF `formats`](#formats)\n  - Use [`placeholder`](#placeholder)\n\n## Version History\n\n| Version    | Changes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `v14.2.0`  | `overrideSrc` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `v14.1.0`  | `getImageProps()` is stable.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| `v14.0.0`  | `onLoadingComplete` prop and `domains` config deprecated.                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `v13.4.14` | `placeholder` prop support for `data:/image...`                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `v13.2.0`  | `contentDispositionType` configuration added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |\n| `v13.0.6`  | `ref` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `v13.0.0`  | The `next/image` import was renamed to `next/legacy/image`. The `next/future/image` import was renamed to `next/image`. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#next-image-to-legacy-image) to safely and automatically rename your imports. `<span>` wrapper removed. `layout`, `objectFit`, `objectPosition`, `lazyBoundary`, `lazyRoot` props removed. `alt` is required. `onLoadingComplete` receives reference to `img` element. Built-in loader config removed. |\n| `v12.3.0`  | `remotePatterns` and `unoptimized` configuration is stable.                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `v12.2.0`  | Experimental `remotePatterns` and experimental `unoptimized` configuration added. `layout=\"raw\"` removed.                                                                                                                                                                                                                                                                                                                                                                                                     |\n| `v12.1.1`  | `style` prop added. Experimental support for `layout=\"raw\"` added.                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| `v12.1.0`  | `dangerouslyAllowSVG` and `contentSecurityPolicy` configuration added.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `v12.0.9`  | `lazyRoot` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| `v12.0.0`  | `formats` configuration added.<br/>AVIF support added.<br/>Wrapper `<div>` changed to `<span>`.                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `v11.1.0`  | `onLoadingComplete` and `lazyBoundary` props added.                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| `v11.0.0`  | `src` prop support for static import.<br/>`placeholder` prop added.<br/>`blurDataURL` prop added.                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `v10.0.5`  | `loader` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `v10.0.1`  | `layout` prop added.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| `v10.0.0`  | `next/image` introduced.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |\n", "02-api-reference/01-components/script.mdx": "---\ntitle: <Script>\ndescription: Optimize third-party scripts in your Next.js application using the built-in `next/script` Component.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThis API reference will help you understand how to use [props](#props) available for the Script Component. For features and usage, please see the [Optimizing Scripts](/docs/app/building-your-application/optimizing/scripts) page.\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/page.js\" switcher\nimport Script from 'next/script'\n\nexport default function Dashboard() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n## Props\n\nHere's a summary of the props available for the Script Component:\n\n| Prop                    | Example                           | Type     | Required                              |\n| ----------------------- | --------------------------------- | -------- | ------------------------------------- |\n| [`src`](#src)           | `src=\"http://example.com/script\"` | String   | Required unless inline script is used |\n| [`strategy`](#strategy) | `strategy=\"lazyOnload\"`           | String   | -                                     |\n| [`onLoad`](#onload)     | `onLoad={onLoadFunc}`             | Function | -                                     |\n| [`onReady`](#onready)   | `onReady={onReadyFunc}`           | Function | -                                     |\n| [`onError`](#onerror)   | `onError={onErrorFunc}`           | Function | -                                     |\n\n## Required Props\n\nThe `<Script />` component requires the following properties.\n\n### `src`\n\nA path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. The `src` property is required unless an inline script is used.\n\n## Optional Props\n\nThe `<Script />` component accepts a number of additional properties beyond those which are required.\n\n### `strategy`\n\nThe loading strategy of the script. There are four different strategies that can be used:\n\n- `beforeInteractive`: Load before any Next.js code and before any page hydration occurs.\n- `afterInteractive`: (**default**) Load early but after some hydration on the page occurs.\n- `lazyOnload`: Load during browser idle time.\n- `worker`: (experimental) Load in a web worker.\n\n### `beforeInteractive`\n\nScripts that load with the `beforeInteractive` strategy are injected into the initial HTML from the server, downloaded before any Next.js module, and executed in the order they are placed before _any_ hydration occurs on the page.\n\nScripts denoted with this strategy are preloaded and fetched before any first-party code, but their execution does not block page hydration from occurring.\n\n<AppOnly>\n\n`beforeInteractive` scripts must be placed inside the root layout (`app/layout.tsx`) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).\n\n</AppOnly>\n\n<PagesOnly>\n\n`beforeInteractive` scripts must be placed inside the `Document` Component (`pages/_document.js`) and are designed to load scripts that are needed by the entire site (i.e. the script will load when any page in the application has been loaded server-side).\n\n</PagesOnly>\n\n**This strategy should only be used for critical scripts that need to be fetched before any part of the page becomes interactive.**\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {children}\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/_document.js\"\nimport { Html, Head, Main, NextScript } from 'next/document'\nimport Script from 'next/script'\n\nexport default function Document() {\n  return (\n    <Html>\n      <Head />\n      <body>\n        <Main />\n        <NextScript />\n        <Script\n          src=\"https://example.com/script.js\"\n          strategy=\"beforeInteractive\"\n        />\n      </body>\n    </Html>\n  )\n}\n```\n\n</PagesOnly>\n\n> **Good to know**: Scripts with `beforeInteractive` will always be injected inside the `head` of the HTML document regardless of where it's placed in the component.\n\nSome examples of scripts that should be loaded as soon as possible with `beforeInteractive` include:\n\n- Bot detectors\n- Cookie consent managers\n\n### `afterInteractive`\n\nScripts that use the `afterInteractive` strategy are injected into the HTML client-side and will load after some (or all) hydration occurs on the page. **This is the default strategy** of the Script component and should be used for any script that needs to load as soon as possible but not before any first-party Next.js code.\n\n`afterInteractive` scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.\n\n```jsx filename=\"app/page.js\"\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"afterInteractive\" />\n    </>\n  )\n}\n```\n\nSome examples of scripts that are good candidates for `afterInteractive` include:\n\n- Tag managers\n- Analytics\n\n### `lazyOnload`\n\nScripts that use the `lazyOnload` strategy are injected into the HTML client-side during browser idle time and will load after all resources on the page have been fetched. This strategy should be used for any background or low priority scripts that do not need to load early.\n\n`lazyOnload` scripts can be placed inside of any page or layout and will only load and execute when that page (or group of pages) is opened in the browser.\n\n```jsx filename=\"app/page.js\"\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"lazyOnload\" />\n    </>\n  )\n}\n```\n\nExamples of scripts that do not need to load immediately and can be fetched with `lazyOnload` include:\n\n- Chat support plugins\n- Social media widgets\n\n### `worker`\n\n> **Warning:** The `worker` strategy is not yet stable and does not yet work with the [`app`](/docs/app/building-your-application/routing/defining-routes) directory. Use with caution.\n\nScripts that use the `worker` strategy are off-loaded to a web worker in order to free up the main thread and ensure that only critical, first-party resources are processed on it. While this strategy can be used for any script, it is an advanced use case that is not guaranteed to support all third-party scripts.\n\nTo use `worker` as a strategy, the `nextScriptWorkers` flag must be enabled in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n```\n\n`worker` scripts can **only currently be used in the `pages/` directory**:\n\n```tsx filename=\"pages/home.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n```jsx filename=\"pages/home.js\" switcher\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n### `onLoad`\n\n> **Warning:** `onLoad` does not yet work with Server Components and can only be used in Client Components. Further, `onLoad` can't be used with `beforeInteractive` \u2013 consider using `onReady` instead.\n\nSome third-party scripts require users to run JavaScript code once after the script has finished loading in order to instantiate content or call a function. If you are loading a script with either afterInteractive or lazyOnload as a loading strategy, you can execute code after it has loaded using the onLoad property.\n\nHere's an example of executing a lodash method only after the library has been loaded.\n\n```tsx filename=\"app/page.tsx\" switcher\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js\"\n        onLoad={() => {\n          console.log(_.sample([1, 2, 3, 4]))\n        }}\n      />\n    </>\n  )\n}\n```\n\n### `onReady`\n\n> **Warning:** `onReady` does not yet work with Server Components and can only be used in Client Components.\n\nSome third-party scripts require users to run JavaScript code after the script has finished loading and every time the component is mounted (after a route navigation for example). You can execute code after the script's load event when it first loads and then after every subsequent component re-mount using the onReady property.\n\nHere's an example of how to re-instantiate a Google Maps JS embed every time the component is mounted:\n\n<AppOnly>\n\n```tsx filename=\"app/page.tsx\" switcher\n'use client'\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n'use client'\n\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx\nimport { useRef } from 'react'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const mapRef = useRef()\n\n  return (\n    <>\n      <div ref={mapRef}></div>\n      <Script\n        id=\"google-maps\"\n        src=\"https://maps.googleapis.com/maps/api/js\"\n        onReady={() => {\n          new google.maps.Map(mapRef.current, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8,\n          })\n        }}\n      />\n    </>\n  )\n}\n```\n\n</PagesOnly>\n\n### `onError`\n\n> **Warning:** `onError` does not yet work with Server Components and can only be used in Client Components. `onError` cannot be used with the `beforeInteractive` loading strategy.\n\nSometimes it is helpful to catch when a script fails to load. These errors can be handled with the onError property:\n\n<AppOnly>\n\n```tsx filename=\"app/page.tsx\" switcher\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onError={(e: Error) => {\n          console.error('Script failed to load', e)\n        }}\n      />\n    </>\n  )\n}\n```\n\n</PagesOnly>\n\n## Version History\n\n| Version   | Changes                                                                   |\n| --------- | ------------------------------------------------------------------------- |\n| `v13.0.0` | `beforeInteractive` and `afterInteractive` is modified to support `app`.  |\n| `v12.2.4` | `onReady` prop added.                                                     |\n| `v12.2.2` | Allow `next/script` with `beforeInteractive` to be placed in `_document`. |\n| `v11.0.0` | `next/script` introduced.                                                 |\n", "02-api-reference/01-components/font.mdx": "---\ntitle: Font Module\nnav_title: Font\ndescription: Optimizing loading web fonts with the built-in `next/font` loaders.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nThis API reference will help you understand how to use [`next/font/google`](/docs/app/building-your-application/optimizing/fonts#google-fonts) and [`next/font/local`](/docs/app/building-your-application/optimizing/fonts#local-fonts). For features and usage, please see the [Optimizing Fonts](/docs/app/building-your-application/optimizing/fonts) page.\n\n### Font Function Arguments\n\nFor usage, review [Google Fonts](/docs/app/building-your-application/optimizing/fonts#google-fonts) and [Local Fonts](/docs/app/building-your-application/optimizing/fonts#local-fonts).\n\n| Key                                         | `font/google`       | `font/local`        | Type                       | Required          |\n| ------------------------------------------- | ------------------- | ------------------- | -------------------------- | ----------------- |\n| [`src`](#src)                               | <Cross size={18} /> | <Check size={18} /> | String or Array of Objects | Yes               |\n| [`weight`](#weight)                         | <Check size={18} /> | <Check size={18} /> | String or Array            | Required/Optional |\n| [`style`](#style)                           | <Check size={18} /> | <Check size={18} /> | String or Array            | -                 |\n| [`subsets`](#subsets)                       | <Check size={18} /> | <Cross size={18} /> | Array of Strings           | -                 |\n| [`axes`](#axes)                             | <Check size={18} /> | <Cross size={18} /> | Array of Strings           | -                 |\n| [`display`](#display)                       | <Check size={18} /> | <Check size={18} /> | String                     | -                 |\n| [`preload`](#preload)                       | <Check size={18} /> | <Check size={18} /> | Boolean                    | -                 |\n| [`fallback`](#fallback)                     | <Check size={18} /> | <Check size={18} /> | Array of Strings           | -                 |\n| [`adjustFontFallback`](#adjustfontfallback) | <Check size={18} /> | <Check size={18} /> | Boolean or String          | -                 |\n| [`variable`](#variable)                     | <Check size={18} /> | <Check size={18} /> | String                     | -                 |\n| [`declarations`](#declarations)             | <Cross size={18} /> | <Check size={18} /> | Array of Objects           | -                 |\n\n### `src`\n\nThe path of the font file as a string or an array of objects (with type `Array<{path: string, weight?: string, style?: string}>`) relative to the directory where the font loader function is called.\n\nUsed in `next/font/local`\n\n- Required\n\nExamples:\n\n- `src:'./fonts/my-font.woff2'` where `my-font.woff2` is placed in a directory named `fonts` inside the `app` directory\n- `src:[{path: './inter/Inter-Thin.ttf', weight: '100',},{path: './inter/Inter-Regular.ttf',weight: '400',},{path: './inter/Inter-Bold-Italic.ttf', weight: '700',style: 'italic',},]`\n- if the font loader function is called in `app/page.tsx` using `src:'../styles/fonts/my-font.ttf'`, then `my-font.ttf` is placed in `styles/fonts` at the root of the project\n\n### `weight`\n\nThe font [`weight`](https://fonts.google.com/knowledge/glossary/weight) with the following possibilities:\n\n- A string with possible values of the weights available for the specific font or a range of values if it's a [variable](https://fonts.google.com/variablefonts) font\n- An array of weight values if the font is not a [variable google font](https://fonts.google.com/variablefonts). It applies to `next/font/google` only.\n\nUsed in `next/font/google` and `next/font/local`\n\n- Required if the font being used is **not** [variable](https://fonts.google.com/variablefonts)\n\nExamples:\n\n- `weight: '400'`: A string for a single weight value - for the font [`Inter`](https://fonts.google.com/specimen/Inter?query=inter), the possible values are `'100'`, `'200'`, `'300'`, `'400'`, `'500'`, `'600'`, `'700'`, `'800'`, `'900'` or `'variable'` where `'variable'` is the default)\n- `weight: '100 900'`: A string for the range between `100` and `900` for a variable font\n- `weight: ['100','400','900']`: An array of 3 possible values for a non variable font\n\n### `style`\n\nThe font [`style`](https://developer.mozilla.org/docs/Web/CSS/font-style) with the following possibilities:\n\n- A string [value](https://developer.mozilla.org/docs/Web/CSS/font-style#values) with default value of `'normal'`\n- An array of style values if the font is not a [variable google font](https://fonts.google.com/variablefonts). It applies to `next/font/google` only.\n\nUsed in `next/font/google` and `next/font/local`\n\n- Optional\n\nExamples:\n\n- `style: 'italic'`: A string - it can be `normal` or `italic` for `next/font/google`\n- `style: 'oblique'`: A string - it can take any value for `next/font/local` but is expected to come from [standard font styles](https://developer.mozilla.org/docs/Web/CSS/font-style)\n- `style: ['italic','normal']`: An array of 2 values for `next/font/google` - the values are from `normal` and `italic`\n\n### `subsets`\n\nThe font [`subsets`](https://fonts.google.com/knowledge/glossary/subsetting) defined by an array of string values with the names of each subset you would like to be [preloaded](/docs/app/building-your-application/optimizing/fonts#specifying-a-subset). Fonts specified via `subsets` will have a link preload tag injected into the head when the [`preload`](#preload) option is true, which is the default.\n\nUsed in `next/font/google`\n\n- Optional\n\nExamples:\n\n- `subsets: ['latin']`: An array with the subset `latin`\n\nYou can find a list of all subsets on the Google Fonts page for your font.\n\n### `axes`\n\nSome variable fonts have extra `axes` that can be included. By default, only the font weight is included to keep the file size down. The possible values of `axes` depend on the specific font.\n\nUsed in `next/font/google`\n\n- Optional\n\nExamples:\n\n- `axes: ['slnt']`: An array with value `slnt` for the `Inter` variable font which has `slnt` as additional `axes` as shown [here](https://fonts.google.com/variablefonts?vfquery=inter#font-families). You can find the possible `axes` values for your font by using the filter on the [Google variable fonts page](https://fonts.google.com/variablefonts#font-families) and looking for axes other than `wght`\n\n### `display`\n\nThe font [`display`](https://developer.mozilla.org/docs/Web/CSS/@font-face/font-display) with possible string [values](https://developer.mozilla.org/docs/Web/CSS/@font-face/font-display#values) of `'auto'`, `'block'`, `'swap'`, `'fallback'` or `'optional'` with default value of `'swap'`.\n\nUsed in `next/font/google` and `next/font/local`\n\n- Optional\n\nExamples:\n\n- `display: 'optional'`: A string assigned to the `optional` value\n\n### `preload`\n\nA boolean value that specifies whether the font should be [preloaded](/docs/app/building-your-application/optimizing/fonts#preloading) or not. The default is `true`.\n\nUsed in `next/font/google` and `next/font/local`\n\n- Optional\n\nExamples:\n\n- `preload: false`\n\n### `fallback`\n\nThe fallback font to use if the font cannot be loaded. An array of strings of fallback fonts with no default.\n\n- Optional\n\nUsed in `next/font/google` and `next/font/local`\n\nExamples:\n\n- `fallback: ['system-ui', 'arial']`: An array setting the fallback fonts to `system-ui` or `arial`\n\n### `adjustFontFallback`\n\n- For `next/font/google`: A boolean value that sets whether an automatic fallback font should be used to reduce [Cumulative Layout Shift](https://web.dev/cls/). The default is `true`.\n- For `next/font/local`: A string or boolean `false` value that sets whether an automatic fallback font should be used to reduce [Cumulative Layout Shift](https://web.dev/cls/). The possible values are `'Arial'`, `'Times New Roman'` or `false`. The default is `'Arial'`.\n\nUsed in `next/font/google` and `next/font/local`\n\n- Optional\n\nExamples:\n\n- `adjustFontFallback: false`: for `next/font/google`\n- `adjustFontFallback: 'Times New Roman'`: for `next/font/local`\n\n### `variable`\n\nA string value to define the CSS variable name to be used if the style is applied with the [CSS variable method](#css-variables).\n\nUsed in `next/font/google` and `next/font/local`\n\n- Optional\n\nExamples:\n\n- `variable: '--my-font'`: The CSS variable `--my-font` is declared\n\n### `declarations`\n\nAn array of font face [descriptor](https://developer.mozilla.org/docs/Web/CSS/@font-face#descriptors) key-value pairs that define the generated `@font-face` further.\n\nUsed in `next/font/local`\n\n- Optional\n\nExamples:\n\n- `declarations: [{ prop: 'ascent-override', value: '90%' }]`\n\n## Applying Styles\n\nYou can apply the font styles in three ways:\n\n- [`className`](#classname)\n- [`style`](#style-1)\n- [CSS Variables](#css-variables)\n\n### `className`\n\nReturns a read-only CSS `className` for the loaded font to be passed to an HTML element.\n\n```tsx\n<p className={inter.className}>Hello, Next.js!</p>\n```\n\n### `style`\n\nReturns a read-only CSS `style` object for the loaded font to be passed to an HTML element, including `style.fontFamily` to access the font family name and fallback fonts.\n\n```tsx\n<p style={inter.style}>Hello World</p>\n```\n\n### CSS Variables\n\nIf you would like to set your styles in an external style sheet and specify additional options there, use the CSS variable method.\n\nIn addition to importing the font, also import the CSS file where the CSS variable is defined and set the variable option of the font loader object as follows:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n\nconst inter = Inter({\n  variable: '--font-inter',\n})\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n\nconst inter = Inter({\n  variable: '--font-inter',\n})\n```\n\nTo use the font, set the `className` of the parent container of the text you would like to style to the font loader's `variable` value and the `className` of the text to the `styles` property from the external CSS file.\n\n```tsx filename=\"app/page.tsx\" switcher\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n```\n\n```jsx filename=\"app/page.js\" switcher\n<main className={inter.variable}>\n  <p className={styles.text}>Hello World</p>\n</main>\n```\n\nDefine the `text` selector class in the `component.module.css` CSS file as follows:\n\n```css filename=\"styles/component.module.css\"\n.text {\n  font-family: var(--font-inter);\n  font-weight: 200;\n  font-style: italic;\n}\n```\n\nIn the example above, the text `Hello World` is styled using the `Inter` font and the generated font fallback with `font-weight: 200` and `font-style: italic`.\n\n## Using a font definitions file\n\nEvery time you call the `localFont` or Google font function, that font will be hosted as one instance in your application. Therefore, if you need to use the same font in multiple places, you should load it in one place and import the related font object where you need it. This is done using a font definitions file.\n\nFor example, create a `fonts.ts` file in a `styles` folder at the root of your app directory.\n\nThen, specify your font definitions as follows:\n\n```ts filename=\"styles/fonts.ts\" switcher\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n\n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n\nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n```\n\n```js filename=\"styles/fonts.js\" switcher\nimport { Inter, Lora, Source_Sans_3 } from 'next/font/google'\nimport localFont from 'next/font/local'\n\n// define your variable fonts\nconst inter = Inter()\nconst lora = Lora()\n// define 2 weights of a non-variable font\nconst sourceCodePro400 = Source_Sans_3({ weight: '400' })\nconst sourceCodePro700 = Source_Sans_3({ weight: '700' })\n// define a custom local font where GreatVibes-Regular.ttf is stored in the styles folder\nconst greatVibes = localFont({ src: './GreatVibes-Regular.ttf' })\n\nexport { inter, lora, sourceCodePro400, sourceCodePro700, greatVibes }\n```\n\nYou can now use these definitions in your code as follows:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n\nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { inter, lora, sourceCodePro700, greatVibes } from '../styles/fonts'\n\nexport default function Page() {\n  return (\n    <div>\n      <p className={inter.className}>Hello world using Inter font</p>\n      <p style={lora.style}>Hello world using Lora font</p>\n      <p className={sourceCodePro700.className}>\n        Hello world using Source_Sans_3 font with weight 700\n      </p>\n      <p className={greatVibes.className}>My title in Great Vibes font</p>\n    </div>\n  )\n}\n```\n\nTo make it easier to access the font definitions in your code, you can define a path alias in your `tsconfig.json` or `jsconfig.json` files as follows:\n\n```json filename=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"@/fonts\": [\"./styles/fonts\"]\n    }\n  }\n}\n```\n\nYou can now import any font definition as follows:\n\n```tsx filename=\"app/about/page.tsx\" switcher\nimport { greatVibes, sourceCodePro400 } from '@/fonts'\n```\n\n```jsx filename=\"app/about/page.js\" switcher\nimport { greatVibes, sourceCodePro400 } from '@/fonts'\n```\n\n## Version Changes\n\n| Version   | Changes                                                               |\n| --------- | --------------------------------------------------------------------- |\n| `v13.2.0` | `@next/font` renamed to `next/font`. Installation no longer required. |\n| `v13.0.0` | `@next/font` was added.                                               |\n", "02-api-reference/02-file-conventions/route-segment-config.mdx": "---\ntitle: Route Segment Config\ndescription: Learn about how to configure options for Next.js route segments.\n---\n\nThe Route Segment options allows you to configure the behavior of a [Page](/docs/app/building-your-application/routing/layouts-and-templates), [Layout](/docs/app/building-your-application/routing/layouts-and-templates), or [Route Handler](/docs/app/building-your-application/routing/route-handlers) by directly exporting the following variables:\n\n| Option                                | Type                                                                                                                      | Default                    |\n| ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | -------------------------- |\n| [`dynamic`](#dynamic)                 | `'auto' \\| 'force-dynamic' \\| 'error' \\| 'force-static'`                                                                  | `'auto'`                   |\n| [`dynamicParams`](#dynamicparams)     | `boolean`                                                                                                                 | `true`                     |\n| [`revalidate`](#revalidate)           | `false \\| 0 \\| number`                                                                                                    | `false`                    |\n| [`fetchCache`](#fetchcache)           | `'auto' \\| 'default-cache' \\| 'only-cache' \\| 'force-cache' \\| 'force-no-store' \\| 'default-no-store' \\| 'only-no-store'` | `'auto'`                   |\n| [`runtime`](#runtime)                 | `'nodejs' \\| 'edge'`                                                                                                      | `'nodejs'`                 |\n| [`preferredRegion`](#preferredregion) | `'auto' \\| 'global' \\| 'home' \\| string \\| string[]`                                                                      | `'auto'`                   |\n| [`maxDuration`](#maxduration)         | `number`                                                                                                                  | Set by deployment platform |\n\n## Options\n\n### `dynamic`\n\nChange the dynamic behavior of a layout or page to fully static or fully dynamic.\n\n```tsx filename=\"layout.tsx | page.tsx | route.ts\" switcher\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const dynamic = 'auto'\n// 'auto' | 'force-dynamic' | 'error' | 'force-static'\n```\n\n> **Good to know**: The new model in the `app` directory favors granular caching control at the `fetch` request level over the binary all-or-nothing model of `getServerSideProps` and `getStaticProps` at the page-level in the `pages` directory. The `dynamic` option is a way to opt back in to the previous model as a convenience and provides a simpler migration path.\n\n- **`'auto'`** (default): The default option to cache as much as possible without preventing any components from opting into dynamic behavior.\n- **`'force-dynamic'`**: Force [dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering), which will result in routes being rendered for each user at request time. This option is equivalent to:\n\n  - `getServerSideProps()` in the `pages` directory.\n  - Setting the option of every `fetch()` request in a layout or page to `{ cache: 'no-store', next: { revalidate: 0 } }`.\n  - Setting the segment config to `export const fetchCache = 'force-no-store'`\n\n- **`'error'`**: Force static rendering and cache the data of a layout or page by causing an error if any components use [dynamic functions](/docs/app/building-your-application/rendering/server-components#dynamic-functions) or uncached data. This option is equivalent to:\n  - `getStaticProps()` in the `pages` directory.\n  - Setting the option of every `fetch()` request in a layout or page to `{ cache: 'force-cache' }`.\n  - Setting the segment config to `fetchCache = 'only-cache', dynamicParams = false`.\n  - `dynamic = 'error'` changes the default of `dynamicParams` from `true` to `false`. You can opt back into dynamically rendering pages for dynamic params not generated by `generateStaticParams` by manually setting `dynamicParams = true`.\n- **`'force-static'`**: Force static rendering and cache the data of a layout or page by forcing [`cookies()`](/docs/app/api-reference/functions/cookies), [`headers()`](/docs/app/api-reference/functions/headers) and [`useSearchParams()`](/docs/app/api-reference/functions/use-search-params) to return empty values.\n\n> **Good to know**:\n>\n> - Instructions on [how to migrate](/docs/app/building-your-application/upgrading/app-router-migration#step-6-migrating-data-fetching-methods) from `getServerSideProps` and `getStaticProps` to `dynamic: 'force-dynamic'` and `dynamic: 'error'` can be found in the [upgrade guide](/docs/app/building-your-application/upgrading/app-router-migration#step-6-migrating-data-fetching-methods).\n\n### `dynamicParams`\n\nControl what happens when a dynamic segment is visited that was not generated with [generateStaticParams](/docs/app/api-reference/functions/generate-static-params).\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nexport const dynamicParams = true // true | false,\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const dynamicParams = true // true | false,\n```\n\n- **`true`** (default): Dynamic segments not included in `generateStaticParams` are generated on demand.\n- **`false`**: Dynamic segments not included in `generateStaticParams` will return a 404.\n\n> **Good to know**:\n>\n> - This option replaces the `fallback: true | false | blocking` option of `getStaticPaths` in the `pages` directory.\n> - When `dynamicParams = true`, the segment uses [Streaming Server Rendering](/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense).\n> - If the `dynamic = 'error'` and `dynamic = 'force-static'` are used, it'll change the default of `dynamicParams` to `false`.\n\n### `revalidate`\n\nSet the default revalidation time for a layout or page. This option does not override the `revalidate` value set by individual `fetch` requests.\n\n```tsx filename=\"layout.tsx | page.tsx | route.ts\" switcher\nexport const revalidate = false\n// false | 0 | number\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const revalidate = false\n// false | 0 | number\n```\n\n- **`false`** (default): The default heuristic to cache any `fetch` requests that set their `cache` option to `'force-cache'` or are discovered before a [dynamic function](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions) is used. Semantically equivalent to `revalidate: Infinity` which effectively means the resource should be cached indefinitely. It is still possible for individual `fetch` requests to use `cache: 'no-store'` or `revalidate: 0` to avoid being cached and make the route dynamically rendered. Or set `revalidate` to a positive number lower than the route default to increase the revalidation frequency of a route.\n- **`0`**: Ensure a layout or page is always [dynamically rendered](/docs/app/building-your-application/rendering/server-components#dynamic-rendering) even if no dynamic functions or uncached data fetches are discovered. This option changes the default of `fetch` requests that do not set a `cache` option to `'no-store'` but leaves `fetch` requests that opt into `'force-cache'` or use a positive `revalidate` as is.\n- **`number`**: (in seconds) Set the default revalidation frequency of a layout or page to `n` seconds.\n\n> **Good to know**:\n>\n> - The revalidate value needs to be statically analyzable. For example `revalidate = 600` is valid, but `revalidate = 60 * 10` is not.\n> - The revalidate value is not available when using `runtime = 'edge'`.\n\n#### Revalidation Frequency\n\n- The lowest `revalidate` across each layout and page of a single route will determine the revalidation frequency of the _entire_ route. This ensures that child pages are revalidated as frequently as their parent layouts.\n- Individual `fetch` requests can set a lower `revalidate` than the route's default `revalidate` to increase the revalidation frequency of the entire route. This allows you to dynamically opt-in to more frequent revalidation for certain routes based on some criteria.\n\n### `fetchCache`\n\n<details>\n  <summary>This is an advanced option that should only be used if you specifically need to override the default behavior.</summary>\n\nBy default, Next.js **will cache** any `fetch()` requests that are reachable **before** any [dynamic functions](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions) are used and **will not cache** `fetch` requests that are discovered **after** dynamic functions are used.\n\n`fetchCache` allows you to override the default `cache` option of all `fetch` requests in a layout or page.\n\n```tsx filename=\"layout.tsx | page.tsx | route.ts\" switcher\nexport const fetchCache = 'auto'\n// 'auto' | 'default-cache' | 'only-cache'\n// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const fetchCache = 'auto'\n// 'auto' | 'default-cache' | 'only-cache'\n// 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store'\n```\n\n- **`'auto'`** (default): The default option to cache `fetch` requests before dynamic functions with the `cache` option they provide and not cache `fetch` requests after dynamic functions.\n- **`'default-cache'`**: Allow any `cache` option to be passed to `fetch` but if no option is provided then set the `cache` option to `'force-cache'`. This means that even `fetch` requests after dynamic functions are considered static.\n- **`'only-cache'`**: Ensure all `fetch` requests opt into caching by changing the default to `cache: 'force-cache'` if no option is provided and causing an error if any `fetch` requests use `cache: 'no-store'`.\n- **`'force-cache'`**: Ensure all `fetch` requests opt into caching by setting the `cache` option of all `fetch` requests to `'force-cache'`.\n- **`'default-no-store'`**: Allow any `cache` option to be passed to `fetch` but if no option is provided then set the `cache` option to `'no-store'`. This means that even `fetch` requests before dynamic functions are considered dynamic.\n- **`'only-no-store'`**: Ensure all `fetch` requests opt out of caching by changing the default to `cache: 'no-store'` if no option is provided and causing an error if any `fetch` requests use `cache: 'force-cache'`\n- **`'force-no-store'`**: Ensure all `fetch` requests opt out of caching by setting the `cache` option of all `fetch` requests to `'no-store'`. This forces all `fetch` requests to be re-fetched every request even if they provide a `'force-cache'` option.\n\n#### Cross-route segment behavior\n\n- Any options set across each layout and page of a single route need to be compatible with each other.\n  - If both the `'only-cache'` and `'force-cache'` are provided, then `'force-cache'` wins. If both `'only-no-store'` and `'force-no-store'` are provided, then `'force-no-store'` wins. The force option changes the behavior across the route so a single segment with `'force-*'` would prevent any errors caused by `'only-*'`.\n  - The intention of the `'only-*'` and `force-*'` options is to guarantee the whole route is either fully static or fully dynamic. This means:\n    - A combination of `'only-cache'` and `'only-no-store'` in a single route is not allowed.\n    - A combination of `'force-cache'` and `'force-no-store'` in a single route is not allowed.\n  - A parent cannot provide `'default-no-store'` if a child provides `'auto'` or `'*-cache'` since that could make the same fetch have different behavior.\n- It is generally recommended to leave shared parent layouts as `'auto'` and customize the options where child segments diverge.\n\n</details>\n\n### `runtime`\n\nWe recommend using the Node.js runtime for rendering your application, and the Edge runtime for Middleware (only supported option).\n\n```tsx filename=\"layout.tsx | page.tsx | route.ts\" switcher\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const runtime = 'nodejs'\n// 'nodejs' | 'edge'\n```\n\n- **`'nodejs'`** (default)\n- **`'edge'`**\n\nLearn more about the [different runtimes](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes).\n\n### `preferredRegion`\n\n```tsx filename=\"layout.tsx | page.tsx | route.ts\" switcher\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const preferredRegion = 'auto'\n// 'auto' | 'global' | 'home' | ['iad1', 'sfo1']\n```\n\nSupport for `preferredRegion`, and regions supported, is dependent on your deployment platform.\n\n> **Good to know**:\n>\n> - If a `preferredRegion` is not specified, it will inherit the option of the nearest parent layout.\n> - The root layout defaults to `all` regions.\n\n### `maxDuration`\n\nBy default, Next.js does not limit the execution of server-side logic (rendering a page or handling an API).\nDeployment platforms can use `maxDuration` from the Next.js build output to add specific execution limits.\nFor example, on [Vercel](https://vercel.com/docs/functions/serverless-functions/runtimes#max-duration).\n\n**Note**: This settings requires Next.js `13.4.10` or higher.\n\n```tsx filename=\"layout.tsx | page.tsx | route.ts\" switcher\nexport const maxDuration = 5\n```\n\n```js filename=\"layout.js | page.js | route.js\" switcher\nexport const maxDuration = 5\n```\n\n> **Good to know**:\n>\n> - If using [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations), set the `maxDuration` at the page level to change the default timeout of all Server Actions used on the page.\n\n### `generateStaticParams`\n\nThe `generateStaticParams` function can be used in combination with [dynamic route segments](/docs/app/building-your-application/routing/dynamic-routes) to define the list of route segment parameters that will be statically generated at build time instead of on-demand at request time.\n\nSee the [API reference](/docs/app/api-reference/functions/generate-static-params) for more details.\n", "02-api-reference/02-file-conventions/mdx-components.mdx": "---\ntitle: mdx-components.js\ndescription: API reference for the mdx-components.js file.\nrelated:\n  title: Learn more about MDX Components\n  links:\n    - app/building-your-application/configuring/mdx\n---\n\nThe `mdx-components.js|tsx` file is **required** to use [`@next/mdx` with App Router](/docs/app/building-your-application/configuring/mdx) and will not work without it. Additionally, you can use it to [customize styles](/docs/app/building-your-application/configuring/mdx#using-custom-styles-and-components).\n\nUse the file `mdx-components.tsx` (or `.js`) in the root of your project to define MDX Components. For example, at the same level as `pages` or `app`, or inside `src` if applicable.\n\n```tsx filename=\"mdx-components.tsx\" switcher\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n```js filename=\"mdx-components.js\" switcher\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n## Exports\n\n### `useMDXComponents` function\n\nThe file must export a single function, either as a default export or named `useMDXComponents`.\n\n```tsx filename=\"mdx-components.tsx\" switcher\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n```js filename=\"mdx-components.js\" switcher\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n## Params\n\n### `components`\n\nWhen defining MDX Components, the export function accepts a single parameter, `components`. This parameter is an instance of `MDXComponents`.\n\n- The key is the name of the HTML element to override.\n- The value is the component to render instead.\n\n> **Good to know**: Remember to pass all other components (i.e. `...components`) that do not have overrides.\n\n## Version History\n\n| Version   | Changes              |\n| --------- | -------------------- |\n| `v13.1.2` | MDX Components added |\n", "02-api-reference/02-file-conventions/index.mdx": "---\ntitle: File Conventions\ndescription: API Reference for Next.js Special Files.\n---\n", "02-api-reference/02-file-conventions/loading.mdx": "---\ntitle: loading.js\ndescription: API reference for the loading.js  file.\n---\n\nA **loading** file can create instant loading states built on [Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming).\n\nBy default, this file is a [Server Component](/docs/app/building-your-application/rendering/server-components) - but can also be used as a Client Component through the `\"use client\"` directive.\n\n```tsx filename=\"app/feed/loading.tsx\" switcher\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n```\n\n```jsx filename=\"app/feed/loading.js\" switcher\nexport default function Loading() {\n  // Or a custom loading skeleton component\n  return <p>Loading...</p>\n}\n```\n\nLoading UI components do not accept any parameters.\n\n> **Good to know**\n>\n> - While designing loading UI, you may find it helpful to use the [React Developer Tools](https://react.dev/learn/react-developer-tools) to manually toggle Suspense boundaries.\n\n## Version History\n\n| Version   | Changes               |\n| --------- | --------------------- |\n| `v13.0.0` | `loading` introduced. |\n", "02-api-reference/02-file-conventions/default.mdx": "---\ntitle: default.js\ndescription: API Reference for the default.js file.\nrelated:\n  title: Learn more about Parallel Routes\n  links:\n    - app/building-your-application/routing/parallel-routes\n---\n\nThe `default.js` file is used to render a fallback within [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes) when Next.js cannot recover a [slot's](/docs/app/building-your-application/routing/parallel-routes#slots) active state after a full-page load.\n\nDuring [soft navigation](/docs/app/building-your-application/routing/linking-and-navigating#5-soft-navigation), Next.js keeps track of the active _state_ (subpage) for each slot. However, for hard navigations (full-page load), Next.js cannot recover the active state. In this case, a `default.js` file can be rendered for subpages that don't match the current URL.\n\nConsider the following folder structure. The `@team` slot has a `settings` page, but `@analytics` does not.\n\n<Image\n  alt=\"Parallel Routes unmatched routes\"\n  srcLight=\"/docs/light/parallel-routes-unmatched-routes.png\"\n  srcDark=\"/docs/dark/parallel-routes-unmatched-routes.png\"\n  width=\"1600\"\n  height=\"930\"\n/>\n\nWhen navigating to `/settings`, the `@team` slot will render the `settings` page while maintaining the currently active page for the `@analytics` slot.\n\nOn refresh, Next.js will render a `default.js` for `@analytics`. If `default.js` doesn't exist, a `404` is rendered instead.\n\nAdditionally, since `children` is an implicit slot, you also need to create a `default.js` file to render a fallback for `children` when Next.js cannot recover the active state of the parent page.\n\n## Props\n\n### `params` (optional)\n\nAn object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) from the root segment down to the slot's subpages. For example:\n\n| Example                                    | URL          | `params`                            |\n| ------------------------------------------ | ------------ | ----------------------------------- |\n| `app/[artist]/@sidebar/default.js`         | `/zack`      | `{ artist: 'zack' }`                |\n| `app/[artist]/[album]/@sidebar/default.js` | `/zack/next` | `{ artist: 'zack', album: 'next' }` |\n", "02-api-reference/02-file-conventions/template.mdx": "---\ntitle: template.js\ndescription: API Reference for the template.js file.\n---\n\nA **template** file is similar to a [layout](/docs/app/building-your-application/routing/layouts-and-templates#layouts) in that it wraps a layout or page. Unlike layouts that persist across routes and maintain state, templates are given a unique key, meaning children Client Components reset their state on navigation.\n\n```tsx filename=\"app/template.tsx\" switcher\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\n```jsx filename=\"app/template.jsx\" switcher\nexport default function Template({ children }) {\n  return <div>{children}</div>\n}\n```\n\n<Image\n  alt=\"template.js special file\"\n  srcLight=\"/docs/light/template-special-file.png\"\n  srcDark=\"/docs/dark/template-special-file.png\"\n  width=\"1600\"\n  height=\"444\"\n/>\n\nWhile less common, you might choose to use a template over a layout if you want:\n\n- Features that rely on `useEffect` (e.g logging page views) and `useState` (e.g a per-page feedback form).\n- To change the default framework behavior. For example, Suspense Boundaries inside layouts only show the fallback the first time the Layout is loaded and not when switching pages. For templates, the fallback is shown on each navigation.\n\n## Props\n\n### `children` (required)\n\nTemplate accepts a `children` prop. For example:\n\n```jsx filename=\"Output\"\n<Layout>\n  {/* Note that the template is automatically given a unique key. */}\n  <Template key={routeParam}>{children}</Template>\n</Layout>\n```\n\n> **Good to know**:\n>\n> - By default, `template` is a [Server Component](/docs/app/building-your-application/rendering/server-components), but can also be used as a [Client Component](/docs/app/building-your-application/rendering/client-components) through the `\"use client\"` directive.\n> - When a user navigates between routes that share a `template`, a new instance of the component is mounted, DOM elements are recreated, state is **not** preserved in Client Components, and effects are re-synchronized.\n\n## Version History\n\n| Version   | Changes                |\n| --------- | ---------------------- |\n| `v13.0.0` | `template` introduced. |\n", "02-api-reference/02-file-conventions/middleware.mdx": "---\ntitle: middleware.js\ndescription: API reference for the middleware.js file.\nrelated:\n  title: Learn more about Middleware\n  links:\n    - app/building-your-application/routing/middleware\n---\n\nThe `middleware.js|ts` file is used to write [Middleware](/docs/app/building-your-application/routing/middleware) and run code on the server before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.\n\nMiddleware executes before routes are rendered. It's particularly useful for implementing custom server-side logic like authentication, logging, or handling redirects.\n\nUse the file `middleware.ts` (or .js) in the root of your project to define Middleware. For example, at the same level as `app` or `pages`, or inside `src` if applicable.\n\n```tsx filename=\"middleware.ts\" switcher\nimport { NextResponse, NextRequest } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n## Exports\n\n### Middleware function\n\nThe file must export a single function, either as a default export or named `middleware`. Note that multiple middleware from the same file are not supported.\n\n```js filename=\"middleware.js\"\n// Example of default export\nexport default function middleware(request) {\n  // Middleware logic\n}\n```\n\n### Config object (optional)\n\nOptionally, a config object can be exported alongside the Middleware function. This object includes the [matcher](#matcher) to specify paths where the Middleware applies.\n\n#### Matcher\n\nThe `matcher` option allows you to target specific paths for the Middleware to run on. You can specify these paths in several ways:\n\n- For a single path: Directly use a string to define the path, like `'/about'`.\n- For multiple paths: Use an array to list multiple paths, such as `matcher: ['/about', '/contact']`, which applies the Middleware to both `/about` and `/contact`.\n\nAdditionally, `matcher` supports complex path specifications through regular expressions, such as `matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)']`, enabling precise control over which paths to include or exclude.\n\nThe `matcher` option also accepts an array of objects with the following keys:\n\n- `source`: The path or pattern used to match the request paths. It can be a string for direct path matching or a pattern for more complex matching.\n- `regexp` (optional): A regular expression string that fine-tunes the matching based on the source. It provides additional control over which paths are included or excluded.\n- `locale` (optional): A boolean that, when set to `false`, ignores locale-based routing in path matching.\n- `has` (optional): Specifies conditions based on the presence of specific request elements such as headers, query parameters, or cookies.\n- `missing` (optional): Focuses on conditions where certain request elements are absent, like missing headers or cookies.\n\n```js filename=\"middleware.js\"\nexport const config = {\n  matcher: [\n    {\n      source: '/api/*',\n      regexp: '^/api/(.*)',\n      locale: false,\n      has: [\n        { type: 'header', key: 'Authorization', value: 'Bearer Token' },\n        { type: 'query', key: 'userId', value: '123' },\n      ],\n      missing: [{ type: 'cookie', key: 'session', value: 'active' }],\n    },\n  ],\n}\n```\n\n## Params\n\n### `request`\n\nWhen defining Middleware, the default export function accepts a single parameter, `request`. This parameter is an instance of `NextRequest`, which represents the incoming HTTP request.\n\n```tsx filename=\"middleware.ts\" switcher\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Middleware logic goes here\n}\n```\n\n```js filename=\"middleware.js\" switcher\nexport function middleware(request) {\n  // Middleware logic goes here\n}\n```\n\n> **Good to know**:\n>\n> - `NextRequest` is a type that represents incoming HTTP requests in Next.js Middleware, whereas [`NextResponse`](#nextresponse) is a class used to manipulate and send back HTTP responses.\n\n## NextResponse\n\nMiddleware can use the [`NextResponse`](/docs/app/building-your-application/routing/middleware#nextresponse) object which extends the [Web Response API](https://developer.mozilla.org/en-US/docs/Web/API/Response). By returning a `NextResponse` object, you can directly manipulate cookies, set headers, implement redirects, and rewrite paths.\n\n> **Good to know**: For redirects, you can also use `Response.redirect` instead of `NextResponse.redirect`.\n\n## Runtime\n\nMiddleware only supports the [Edge runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes). The Node.js runtime cannot be used.\n\n## Version History\n\n| Version   | Changes                                                                                       |\n| --------- | --------------------------------------------------------------------------------------------- |\n| `v13.1.0` | Advanced Middleware flags added                                                               |\n| `v13.0.0` | Middleware can modify request headers, response headers, and send responses                   |\n| `v12.2.0` | Middleware is stable, please see the [upgrade guide](/docs/messages/middleware-upgrade-guide) |\n| `v12.0.9` | Enforce absolute URLs in Edge Runtime ([PR](https://github.com/vercel/next.js/pull/33410))    |\n| `v12.0.0` | Middleware (Beta) added                                                                       |\n", "02-api-reference/02-file-conventions/not-found.mdx": "---\ntitle: not-found.js\ndescription: API reference for the not-found.js file.\n---\n\nThe **not-found** file is used to render UI when the [`notFound`](/docs/app/api-reference/functions/not-found) function is thrown within a route segment. Along with serving a custom UI, Next.js will return a `200` HTTP status code for streamed responses, and `404` for non-streamed responses.\n\n```tsx filename=\"app/not-found.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/blog/not-found.js\" switcher\nimport Link from 'next/link'\n\nexport default function NotFound() {\n  return (\n    <div>\n      <h2>Not Found</h2>\n      <p>Could not find requested resource</p>\n      <Link href=\"/\">Return Home</Link>\n    </div>\n  )\n}\n```\n\n> **Good to know**: In addition to catching expected `notFound()` errors, the root `app/not-found.js` file also handles any unmatched URLs for your whole application. This means users that visit a URL that is not handled by your app will be shown the UI exported by the `app/not-found.js` file.\n\n## Props\n\n`not-found.js` components do not accept any props.\n\n## Data Fetching\n\nBy default, `not-found` is a Server Component. You can mark it as `async` to fetch and display data:\n\n```tsx filename=\"app/not-found.tsx\" switcher\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n\nexport default async function NotFound() {\n  const headersList = headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/not-found.jsx\" switcher\nimport Link from 'next/link'\nimport { headers } from 'next/headers'\n\nexport default async function NotFound() {\n  const headersList = headers()\n  const domain = headersList.get('host')\n  const data = await getSiteData(domain)\n  return (\n    <div>\n      <h2>Not Found: {data.name}</h2>\n      <p>Could not find requested resource</p>\n      <p>\n        View <Link href=\"/blog\">all posts</Link>\n      </p>\n    </div>\n  )\n}\n```\n\nIf you need to use Client Component hooks like `usePathname` to display content based on the path, you must fetch data on the client-side instead.\n\n## Version History\n\n| Version   | Changes                                             |\n| --------- | --------------------------------------------------- |\n| `v13.3.0` | Root `app/not-found` handles global unmatched URLs. |\n| `v13.0.0` | `not-found` introduced.                             |\n", "02-api-reference/02-file-conventions/page.mdx": "---\ntitle: page.js\ndescription: API reference for the page.js file.\n---\n\nA **page** is UI that is unique to a route.\n\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\nexport default function Page({\n  params,\n  searchParams,\n}: {\n  params: { slug: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}) {\n  return <h1>My Page</h1>\n}\n```\n\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\nexport default function Page({ params, searchParams }) {\n  return <h1>My Page</h1>\n}\n```\n\n## Props\n\n### `params` (optional)\n\nAn object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) from the root segment down to that page. For example:\n\n| Example                              | URL         | `params`                       |\n| ------------------------------------ | ----------- | ------------------------------ |\n| `app/shop/[slug]/page.js`            | `/shop/1`   | `{ slug: '1' }`                |\n| `app/shop/[category]/[item]/page.js` | `/shop/1/2` | `{ category: '1', item: '2' }` |\n| `app/shop/[...slug]/page.js`         | `/shop/1/2` | `{ slug: ['1', '2'] }`         |\n\n### `searchParams` (optional)\n\nAn object containing the [search parameters](https://developer.mozilla.org/docs/Learn/Common_questions/What_is_a_URL#parameters) of the current URL. For example:\n\n| URL             | `searchParams`       |\n| --------------- | -------------------- |\n| `/shop?a=1`     | `{ a: '1' }`         |\n| `/shop?a=1&b=2` | `{ a: '1', b: '2' }` |\n| `/shop?a=1&a=2` | `{ a: ['1', '2'] }`  |\n\n> **Good to know**:\n>\n> - `searchParams` is a **[Dynamic API](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions)** whose values cannot be known ahead of time. Using it will opt the page into **[dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering)** at request time.\n> - `searchParams` returns a plain JavaScript object and not a `URLSearchParams` instance.\n\n## Version History\n\n| Version   | Changes            |\n| --------- | ------------------ |\n| `v13.0.0` | `page` introduced. |\n", "02-api-reference/02-file-conventions/instrumentation.mdx": "---\ntitle: instrumentation.js\ndescription: API reference for the instrumentation.js file.\nrelated:\n  title: Learn more about Instrumentation\n  links:\n    - app/building-your-application/optimizing/instrumentation\n---\n\nThe `instrumentation.js|ts` file is used to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production.\n\nTo use it, place the file in the **root** of your application or inside a [`src` folder](/docs/app/building-your-application/configuring/src-directory) if using one.\n\n## Config Option\n\nInstrumentation is currently an experimental feature, to use the `instrumentation` file, you must explicitly opt-in by defining [`experimental.instrumentationHook = true;`](/docs/app/api-reference/next-config-js/instrumentationHook) in your `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    instrumentationHook: true,\n  },\n}\n```\n\n## Exports\n\n### `register` (required)\n\nThe file exports a `register` function that is called **once** when a new Next.js server instance is initiated. `register` can be an async function.\n\n```ts filename=\"instrumentation.ts\" switcher\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n```js filename=\"instrumentation.js\" switcher\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n## Version History\n\n| Version   | Changes                                                 |\n| --------- | ------------------------------------------------------- |\n| `v14.0.4` | Turbopack support for `instrumentation`                 |\n| `v13.2.0` | `instrumentation` introduced as an experimental feature |\n", "02-api-reference/02-file-conventions/route.mdx": "---\ntitle: route.js\ndescription: API reference for the route.js special file.\n---\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web [Request](https://developer.mozilla.org/docs/Web/API/Request) and [Response](https://developer.mozilla.org/docs/Web/API/Response) APIs.\n\n## HTTP Methods\n\nA **route** file allows you to create custom request handlers for a given route. The following [HTTP methods](https://developer.mozilla.org/docs/Web/HTTP/Methods) are supported: `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, and `OPTIONS`.\n\n```ts filename=\"route.ts\" switcher\nexport async function GET(request: Request) {}\n\nexport async function HEAD(request: Request) {}\n\nexport async function POST(request: Request) {}\n\nexport async function PUT(request: Request) {}\n\nexport async function DELETE(request: Request) {}\n\nexport async function PATCH(request: Request) {}\n\n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and  set the appropriate Response `Allow` header depending on the other methods defined in the route handler.\nexport async function OPTIONS(request: Request) {}\n```\n\n```js filename=\"route.js\" switcher\nexport async function GET(request) {}\n\nexport async function HEAD(request) {}\n\nexport async function POST(request) {}\n\nexport async function PUT(request) {}\n\nexport async function DELETE(request) {}\n\nexport async function PATCH(request) {}\n\n// If `OPTIONS` is not defined, Next.js will automatically implement `OPTIONS` and  set the appropriate Response `Allow` header depending on the other methods defined in the route handler.\nexport async function OPTIONS(request) {}\n```\n\n> **Good to know**: Route Handlers are only available inside the `app` directory. You **do not** need to use API Routes (`pages`) and Route Handlers (`app`) together, as Route Handlers should be able to handle all use cases.\n\n## Parameters\n\n### `request` (optional)\n\nThe `request` object is a [NextRequest](/docs/app/api-reference/functions/next-request) object, which is an extension of the Web [Request](https://developer.mozilla.org/docs/Web/API/Request) API. `NextRequest` gives you further control over the incoming request, including easily accessing `cookies` and an extended, parsed, URL object `nextUrl`.\n\n### `context` (optional)\n\n```ts filename=\"app/dashboard/[team]/route.ts\" switcher\ntype Params = {\n  team: string\n}\n\nexport async function GET(request: Request, context: { params: Params }) {\n  const team = context.params.team // '1'\n}\n\n// Define params type according to your route parameters (see table below)\n```\n\n```js filename=\"app/dashboard/[team]/route.js\" switcher\n\nexport async function GET(request, context: { params }) {\n  const team = context.params.team // '1'\n}\n\n```\n\nCurrently, the only value of `context` is `params`, which is an object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) for the current route.\n\n| Example                          | URL            | `params`                  |\n| -------------------------------- | -------------- | ------------------------- |\n| `app/dashboard/[team]/route.js`  | `/dashboard/1` | `{ team: '1' }`           |\n| `app/shop/[tag]/[item]/route.js` | `/shop/1/2`    | `{ tag: '1', item: '2' }` |\n| `app/blog/[...slug]/route.js`    | `/blog/1/2`    | `{ slug: ['1', '2'] }`    |\n\n## NextResponse\n\nRoute Handlers can extend the Web Response API by returning a `NextResponse` object. This allows you to easily set cookies, headers, redirect, and rewrite. [View the API reference](/docs/app/api-reference/functions/next-response).\n\n## Version History\n\n| Version   | Changes                        |\n| --------- | ------------------------------ |\n| `v13.2.0` | Route handlers are introduced. |\n", "02-api-reference/02-file-conventions/error.mdx": "---\ntitle: error.js\ndescription: API reference for the error.js special file.\nrelated:\n  title: Learn more about error handling\n  links:\n    - app/building-your-application/routing/error-handling\n---\n\nAn **error** file defines an error UI boundary for a route segment.\n\nIt is useful for catching **unexpected** errors that occur in Server Components and Client Components and displaying a fallback UI.\n\n```tsx filename=\"app/dashboard/error.tsx\" switcher\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/error.js\" switcher\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n## Props\n\n### `error`\n\nAn instance of an [`Error`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Error) object forwarded to the `error.js` Client Component.\n\n#### `error.message`\n\nThe error message.\n\n- For errors forwarded from Client Components, this will be the original Error's message.\n- For errors forwarded from Server Components, this will be a generic error message to avoid leaking sensitive details. `errors.digest` can be used to match the corresponding error in server-side logs.\n\n#### `error.digest`\n\nAn automatically generated hash of the error thrown in a Server Component. It can be used to match the corresponding error in server-side logs.\n\n### `reset`\n\nA function to reset the error boundary. When executed, the function will try to re-render the Error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render.\n\nCan be used to prompt the user to attempt to recover from the error.\n\n> **Good to know**:\n>\n> - `error.js` boundaries must be **[Client Components](/docs/app/building-your-application/rendering/client-components)**.\n> - In Production builds, errors forwarded from Server Components will be stripped of specific error details to avoid leaking sensitive information.\n> - An `error.js` boundary will **not** handle errors thrown in a `layout.js` component in the **same** segment because the error boundary is nested **inside** that layouts component.\n>   - To handle errors for a specific layout, place an `error.js` file in the layouts parent segment.\n>   - To handle errors within the root layout or template, use a variation of `error.js` called `app/global-error.js`.\n\n## `global-error.js`\n\nTo specifically handle errors in root `layout.js`, use a variation of `error.js` called `app/global-error.js` located in the root `app` directory.\n\n```tsx filename=\"app/global-error.tsx\" switcher\n'use client'\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/global-error.js\" switcher\n'use client'\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n> **Good to know**:\n>\n> - `global-error.js` replaces the root `layout.js` when active and so **must** define its own `<html>` and `<body>` tags.\n> - While designing error UI, you may find it helpful to use the [React Developer Tools](https://react.dev/learn/react-developer-tools) to manually toggle Error boundaries.\n\n## not-found.js\n\nThe [`not-found`](https://nextjs.org/docs/app/api-reference/file-conventions/not-found) file is used to render UI when the `notFound()` function is thrown within a route segment.\n\n## Version History\n\n| Version   | Changes                    |\n| --------- | -------------------------- |\n| `v13.1.0` | `global-error` introduced. |\n| `v13.0.0` | `error` introduced.        |\n", "02-api-reference/02-file-conventions/layout.mdx": "---\ntitle: layout.js\ndescription: API reference for the layout.js file.\n---\n\nA **layout** is UI that is shared between routes.\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\nA **root layout** is the top-most layout in the root `app` directory. It is used to define the `<html>` and `<body>` tags and other globally shared UI.\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n## Props\n\n### `children` (required)\n\nLayout components should accept and use a `children` prop. During rendering, `children` will be populated with the route segments the layout is wrapping. These will primarily be the component of a child [Layout](/docs/app/building-your-application/routing/pages) (if it exists) or [Page](/docs/app/building-your-application/routing/pages), but could also be other special files like [Loading](/docs/app/building-your-application/routing/loading-ui-and-streaming) or [Error](/docs/app/building-your-application/routing/error-handling) when applicable.\n\n### `params` (optional)\n\nThe [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to that layout.\n\n| Example                           | URL            | `params`                  |\n| --------------------------------- | -------------- | ------------------------- |\n| `app/dashboard/[team]/layout.js`  | `/dashboard/1` | `{ team: '1' }`           |\n| `app/shop/[tag]/[item]/layout.js` | `/shop/1/2`    | `{ tag: '1', item: '2' }` |\n| `app/blog/[...slug]/layout.js`    | `/blog/1/2`    | `{ slug: ['1', '2'] }`    |\n\nFor example:\n\n```tsx filename=\"app/shop/[tag]/[item]/layout.tsx\" switcher\nexport default function ShopLayout({\n  children,\n  params,\n}: {\n  children: React.ReactNode\n  params: {\n    tag: string\n    item: string\n  }\n}) {\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  return <section>{children}</section>\n}\n```\n\n```jsx filename=\"app/shop/[tag]/[item]/layout.js\" switcher\nexport default function ShopLayout({ children, params }) {\n  // URL -> /shop/shoes/nike-air-max-97\n  // `params` -> { tag: 'shoes', item: 'nike-air-max-97' }\n  return <section>{children}</section>\n}\n```\n\n## Good to know\n\n### Root Layouts\n\n- The `app` directory **must** include a root `app/layout.js`.\n- The root layout **must** define `<html>` and `<body>` tags.\n  - You should **not** manually add `<head>` tags such as `<title>` and `<meta>` to root layouts. Instead, you should use the [Metadata API](/docs/app/api-reference/functions/generate-metadata) which automatically handles advanced requirements such as streaming and de-duplicating `<head>` elements.\n- You can use [route groups](/docs/app/building-your-application/routing/route-groups) to create multiple root layouts.\n  - Navigating **across multiple root layouts** will cause a **full page load** (as opposed to a client-side navigation). For example, navigating from `/cart` that uses `app/(shop)/layout.js` to `/blog` that uses `app/(marketing)/layout.js` will cause a full page load. This **only** applies to multiple root layouts.\n\n### Layouts do not receive `searchParams`\n\nUnlike [Pages](/docs/app/api-reference/file-conventions/page), Layout components **do not** receive the `searchParams` prop. This is because a shared layout is [not re-rendered during navigation](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering) which could lead to stale `searchParams` between navigations.\n\nWhen using client-side navigation, Next.js automatically only renders the part of the page below the common layout between two routes.\n\nFor example, in the following directory structure, `dashboard/layout.tsx` is the common layout for both `/dashboard/settings` and `/dashboard/analytics`:\n\n<Image\n  alt=\"File structure showing a dashboard folder nesting a layout.tsx file, and settings and analytics folders with their own pages\"\n  srcLight=\"/docs/light/shared-dashboard-layout.png\"\n  srcDark=\"/docs/dark/shared-dashboard-layout.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nWhen navigating from `/dashboard/settings` to `/dashboard/analytics`, `page.tsx` in `/dashboard/analytics` will rerender on the server, while `dashboard/layout.tsx` will **not** rerender because it's a common UI shared between the two routes.\n\nThis performance optimization allows navigation between pages that share a layout to be quicker as only the data fetching and rendering for the page has to run, instead of the entire route that could include shared layouts that fetch their own data.\n\nBecause `dashboard/layout.tsx` doesn't re-render, the `searchParams` prop in the layout Server Component might become **stale** after navigation.\n\nInstead, use the Page [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) prop or the [`useSearchParams`](/docs/app/api-reference/functions/use-search-params) hook in a Client Component, which is re-rendered on the client with the latest `searchParams`.\n\n### Layouts cannot access `pathname`\n\nLayouts cannot access `pathname`. This is because layouts are Server Components by default, and [don't rerender during client-side navigation](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering), which could lead to `pathname` becoming stale between navigations. To prevent staleness, Next.js would need to refetch all segments of a route, losing the benefits of caching and increasing the [RSC payload](/docs/app/building-your-application/rendering/server-components#what-is-the-react-server-component-payload-rsc) size on navigation.\n\nInstead, you can extract the logic that depends on pathname into a Client Component and import it into your layouts. Since Client Components rerender (but are not refetched) during navigation, you can use Next.js hooks such as [`usePathname`](https://nextjs.org/docs/app/api-reference/functions/use-pathname) to access the current pathname and prevent staleness.\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nimport { ClientComponent } from '@/app/ui/ClientComponent'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <ClientComponent />\n      {/* Other Layout UI */}\n      <main>{children}</main>\n    <>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nimport { ClientComponent } from '@/app/ui/ClientComponent'\n\nexport default function Layout({ children }) {\n  return (\n    <>\n      <ClientComponent />\n      {/* Other Layout UI */}\n      <main>{children}</main>\n    <>\n  )\n}\n```\n\nCommon `pathname` patterns can also be implemented with [`params`](#params-optional) prop.\n\nSee the [examples](/docs/app/building-your-application/routing/layouts-and-templates#examples) section for more information.\n\n## Version History\n\n| Version   | Changes              |\n| --------- | -------------------- |\n| `v13.0.0` | `layout` introduced. |\n", "02-api-reference/02-file-conventions/01-metadata/manifest.mdx": "---\ntitle: manifest.json\ndescription: API Reference for manifest.json file.\n---\n\nAdd or generate a `manifest.(json|webmanifest)` file that matches the [Web Manifest Specification](https://developer.mozilla.org/docs/Web/Manifest) in the **root** of `app` directory to provide information about your web application for the browser.\n\n## Static Manifest file\n\n```json filename=\"app/manifest.json | app/manifest.webmanifest\"\n{\n  \"name\": \"My Next.js Application\",\n  \"short_name\": \"Next.js App\",\n  \"description\": \"An application built with Next.js\",\n  \"start_url\": \"/\"\n  // ...\n}\n```\n\n## Generate a Manifest file\n\nAdd a `manifest.js` or `manifest.ts` file that returns a [`Manifest` object](#manifest-object).\n\n```ts filename=\"app/manifest.ts\" switcher\nimport { MetadataRoute } from 'next'\n\nexport default function manifest(): MetadataRoute.Manifest {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n```js filename=\"app/manifest.js\" switcher\nexport default function manifest() {\n  return {\n    name: 'Next.js App',\n    short_name: 'Next.js App',\n    description: 'Next.js App',\n    start_url: '/',\n    display: 'standalone',\n    background_color: '#fff',\n    theme_color: '#fff',\n    icons: [\n      {\n        src: '/favicon.ico',\n        sizes: 'any',\n        type: 'image/x-icon',\n      },\n    ],\n  }\n}\n```\n\n### Manifest Object\n\nThe manifest object contains an extensive list of options that may be updated due to new web standards. For information on all the current options, refer to the `MetadataRoute.Manifest` type in your code editor if using [TypeScript](https://nextjs.org/docs/app/building-your-application/configuring/typescript#typescript-plugin) or see the [MDN](https://developer.mozilla.org/docs/Web/Manifest) docs.\n", "02-api-reference/02-file-conventions/01-metadata/app-icons.mdx": "---\ntitle: favicon, icon, and apple-icon\ndescription: API Reference for the Favicon, Icon and Apple Icon file conventions.\n---\n\nThe `favicon`, `icon`, or `apple-icon` file conventions allow you to set icons for your application.\n\nThey are useful for adding app icons that appear in places like web browser tabs, phone home screens, and search engine results.\n\nThere are two ways to set app icons:\n\n- [Using image files (.ico, .jpg, .png)](#image-files-ico-jpg-png)\n- [Using code to generate an icon (.js, .ts, .tsx)](#generate-icons-using-code-js-ts-tsx)\n\n## Image files (.ico, .jpg, .png)\n\nUse an image file to set an app icon by placing a `favicon`, `icon`, or `apple-icon` image file within your `/app` directory.\nThe `favicon` image can only be located in the top level of `app/`.\n\nNext.js will evaluate the file and automatically add the appropriate tags to your app's `<head>` element.\n\n| File convention             | Supported file types                    | Valid locations |\n| --------------------------- | --------------------------------------- | --------------- |\n| [`favicon`](#favicon)       | `.ico`                                  | `app/`          |\n| [`icon`](#icon)             | `.ico`, `.jpg`, `.jpeg`, `.png`, `.svg` | `app/**/*`      |\n| [`apple-icon`](#apple-icon) | `.jpg`, `.jpeg`, `.png`                 | `app/**/*`      |\n\n### `favicon`\n\nAdd a `favicon.ico` image file to the root `/app` route segment.\n\n```html filename=\"<head> output\"\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\" />\n```\n\n### `icon`\n\nAdd an `icon.(ico|jpg|jpeg|png|svg)` image file.\n\n```html filename=\"<head> output\"\n<link\n  rel=\"icon\"\n  href=\"/icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n```\n\n### `apple-icon`\n\nAdd an `apple-icon.(jpg|jpeg|png)` image file.\n\n```html filename=\"<head> output\"\n<link\n  rel=\"apple-touch-icon\"\n  href=\"/apple-icon?<generated>\"\n  type=\"image/<generated>\"\n  sizes=\"<generated>\"\n/>\n```\n\n> **Good to know**\n>\n> - You can set multiple icons by adding a number suffix to the file name. For example, `icon1.png`, `icon2.png`, etc. Numbered files will sort lexically.\n> - Favicons can only be set in the root `/app` segment. If you need more granularity, you can use [`icon`](#icon).\n> - The appropriate `<link>` tags and attributes such as `rel`, `href`, `type`, and `sizes` are determined by the icon type and metadata of the evaluated file.\n>   - For example, a 32 by 32px `.png` file will have `type=\"image/png\"` and `sizes=\"32x32\"` attributes.\n> - `sizes=\"any\"` is added to `favicon.ico` output to [avoid a browser bug](https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs) where an `.ico` icon is favored over `.svg`.\n\n## Generate icons using code (.js, .ts, .tsx)\n\nIn addition to using [literal image files](#image-files-ico-jpg-png), you can programmatically **generate** icons using code.\n\nGenerate an app icon by creating an `icon` or `apple-icon` route that default exports a function.\n\n| File convention | Supported file types |\n| --------------- | -------------------- |\n| `icon`          | `.js`, `.ts`, `.tsx` |\n| `apple-icon`    | `.js`, `.ts`, `.tsx` |\n\nThe easiest way to generate an icon is to use the [`ImageResponse`](/docs/app/api-reference/functions/image-response) API from `next/og`.\n\n```tsx filename=\"app/icon.tsx\" switcher\nimport { ImageResponse } from 'next/og'\n\n// Image metadata\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n\n// Image generation\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported icons size metadata\n      // config to also set the ImageResponse's width and height.\n      ...size,\n    }\n  )\n}\n```\n\n```jsx filename=\"app/icon.js\" switcher\nimport { ImageResponse } from 'next/og'\n\n// Image metadata\nexport const size = {\n  width: 32,\n  height: 32,\n}\nexport const contentType = 'image/png'\n\n// Image generation\nexport default function Icon() {\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 24,\n          background: 'black',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          color: 'white',\n        }}\n      >\n        A\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported icons size metadata\n      // config to also set the ImageResponse's width and height.\n      ...size,\n    }\n  )\n}\n```\n\n```html filename=\"<head> output\"\n<link rel=\"icon\" href=\"/icon?<generated>\" type=\"image/png\" sizes=\"32x32\" />\n```\n\n> **Good to know**\n>\n> - By default, generated icons are [**statically optimized**](/docs/app/building-your-application/rendering/server-components#static-rendering-default) (generated at build time and cached) unless they use [dynamic functions](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions) or uncached data.\n> - You can generate multiple icons in the same file using [`generateImageMetadata`](/docs/app/api-reference/functions/generate-image-metadata).\n> - You cannot generate a `favicon` icon. Use [`icon`](#icon) or a [favicon.ico](#favicon) file instead.\n\n### Props\n\nThe default export function receives the following props:\n\n#### `params` (optional)\n\nAn object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to the segment `icon` or `apple-icon` is colocated in.\n\n```tsx filename=\"app/shop/[slug]/icon.tsx\" switcher\nexport default function Icon({ params }: { params: { slug: string } }) {\n  // ...\n}\n```\n\n```jsx filename=\"app/shop/[slug]/icon.js\" switcher\nexport default function Icon({ params }) {\n  // ...\n}\n```\n\n| Route                           | URL         | `params`                  |\n| ------------------------------- | ----------- | ------------------------- |\n| `app/shop/icon.js`              | `/shop`     | `undefined`               |\n| `app/shop/[slug]/icon.js`       | `/shop/1`   | `{ slug: '1' }`           |\n| `app/shop/[tag]/[item]/icon.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |\n| `app/shop/[...slug]/icon.js`    | `/shop/1/2` | `{ slug: ['1', '2'] }`    |\n\n### Returns\n\nThe default export function should return a `Blob` | `ArrayBuffer` | `TypedArray` | `DataView` | `ReadableStream` | `Response`.\n\n> **Good to know**: `ImageResponse` satisfies this return type.\n\n### Config exports\n\nYou can optionally configure the icon's metadata by exporting `size` and `contentType` variables from the `icon` or `apple-icon` route.\n\n| Option                        | Type                                                                                                            |\n| ----------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| [`size`](#size)               | `{ width: number; height: number }`                                                                             |\n| [`contentType`](#contenttype) | `string` - [image MIME type](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#image_types) |\n\n#### `size`\n\n```tsx filename=\"icon.tsx | apple-icon.tsx\" switcher\nexport const size = { width: 32, height: 32 }\n\nexport default function Icon() {}\n```\n\n```jsx filename=\"icon.js | apple-icon.js\" switcher\nexport const size = { width: 32, height: 32 }\n\nexport default function Icon() {}\n```\n\n```html filename=\"<head> output\"\n<link rel=\"icon\" sizes=\"32x32\" />\n```\n\n#### `contentType`\n\n```tsx filename=\"icon.tsx | apple-icon.tsx\" switcher\nexport const contentType = 'image/png'\n\nexport default function Icon() {}\n```\n\n```jsx filename=\"icon.js | apple-icon.js\" switcher\nexport const contentType = 'image/png'\n\nexport default function Icon() {}\n```\n\n```html filename=\"<head> output\"\n<link rel=\"icon\" type=\"image/png\" />\n```\n\n#### Route Segment Config\n\n`icon` and `apple-icon` are specialized [Route Handlers](/docs/app/building-your-application/routing/route-handlers) that can use the same [route segment configuration](/docs/app/api-reference/file-conventions/route-segment-config) options as Pages and Layouts.\n\n## Version History\n\n| Version   | Changes                                      |\n| --------- | -------------------------------------------- |\n| `v13.3.0` | `favicon` `icon` and `apple-icon` introduced |\n", "02-api-reference/02-file-conventions/01-metadata/opengraph-image.mdx": "---\ntitle: opengraph-image and twitter-image\ndescription: API Reference for the Open Graph Image and Twitter Image file conventions.\n---\n\nThe `opengraph-image` and `twitter-image` file conventions allow you to set Open Graph and Twitter images for a route segment.\n\nThey are useful for setting the images that appear on social networks and messaging apps when a user shares a link to your site.\n\nThere are two ways to set Open Graph and Twitter images:\n\n- [Using image files (.jpg, .png, .gif)](#image-files-jpg-png-gif)\n- [Using code to generate images (.js, .ts, .tsx)](#generate-images-using-code-js-ts-tsx)\n\n## Image files (.jpg, .png, .gif)\n\nUse an image file to set a route segment's shared image by placing an `opengraph-image` or `twitter-image` image file in the segment.\n\nNext.js will evaluate the file and automatically add the appropriate tags to your app's `<head>` element.\n\n| File convention                                 | Supported file types            |\n| ----------------------------------------------- | ------------------------------- |\n| [`opengraph-image`](#opengraph-image)           | `.jpg`, `.jpeg`, `.png`, `.gif` |\n| [`twitter-image`](#twitter-image)               | `.jpg`, `.jpeg`, `.png`, `.gif` |\n| [`opengraph-image.alt`](#opengraph-imagealttxt) | `.txt`                          |\n| [`twitter-image.alt`](#twitter-imagealttxt)     | `.txt`                          |\n\n### `opengraph-image`\n\nAdd an `opengraph-image.(jpg|jpeg|png|gif)` image file to any route segment.\n\n```html filename=\"<head> output\"\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:type\" content=\"<generated>\" />\n<meta property=\"og:image:width\" content=\"<generated>\" />\n<meta property=\"og:image:height\" content=\"<generated>\" />\n```\n\n### `twitter-image`\n\nAdd a `twitter-image.(jpg|jpeg|png|gif)` image file to any route segment.\n\n```html filename=\"<head> output\"\n<meta name=\"twitter:image\" content=\"<generated>\" />\n<meta name=\"twitter:image:type\" content=\"<generated>\" />\n<meta name=\"twitter:image:width\" content=\"<generated>\" />\n<meta name=\"twitter:image:height\" content=\"<generated>\" />\n```\n\n### `opengraph-image.alt.txt`\n\nAdd an accompanying `opengraph-image.alt.txt` file in the same route segment as the `opengraph-image.(jpg|jpeg|png|gif)` image it's alt text.\n\n```txt filename=\"opengraph-image.alt.txt\"\nAbout Acme\n```\n\n```html filename=\"<head> output\"\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n```\n\n### `twitter-image.alt.txt`\n\nAdd an accompanying `twitter-image.alt.txt` file in the same route segment as the `twitter-image.(jpg|jpeg|png|gif)` image it's alt text.\n\n```txt filename=\"twitter-image.alt.txt\"\nAbout Acme\n```\n\n```html filename=\"<head> output\"\n<meta property=\"twitter:image:alt\" content=\"About Acme\" />\n```\n\n## Generate images using code (.js, .ts, .tsx)\n\nIn addition to using [literal image files](#image-files-jpg-png-gif), you can programmatically **generate** images using code.\n\nGenerate a route segment's shared image by creating an `opengraph-image` or `twitter-image` route that default exports a function.\n\n| File convention   | Supported file types |\n| ----------------- | -------------------- |\n| `opengraph-image` | `.js`, `.ts`, `.tsx` |\n| `twitter-image`   | `.js`, `.ts`, `.tsx` |\n\n> **Good to know**\n>\n> - By default, generated images are [**statically optimized**](/docs/app/building-your-application/rendering/server-components#static-rendering-default) (generated at build time and cached) unless they use [dynamic functions](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies#dynamic-functions) or uncached data.\n> - You can generate multiple Images in the same file using [`generateImageMetadata`](/docs/app/api-reference/functions/generate-image-metadata).\n\nThe easiest way to generate an image is to use the [ImageResponse](/docs/app/api-reference/functions/image-response) API from `next/og`.\n\n```tsx filename=\"app/about/opengraph-image.tsx\" switcher\nimport { ImageResponse } from 'next/og'\n\n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image() {\n  // Font\n  const interSemiBold = fetch(\n    new URL('./Inter-SemiBold.ttf', import.meta.url)\n  ).then((res) => res.arrayBuffer())\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: await interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n```jsx filename=\"app/about/opengraph-image.js\" switcher\nimport { ImageResponse } from 'next/og'\n\n// Image metadata\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\n\nexport const contentType = 'image/png'\n\n// Image generation\nexport default async function Image() {\n  // Font\n  const interSemiBold = fetch(\n    new URL('./Inter-SemiBold.ttf', import.meta.url)\n  ).then((res) => res.arrayBuffer())\n\n  return new ImageResponse(\n    (\n      // ImageResponse JSX element\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        About Acme\n      </div>\n    ),\n    // ImageResponse options\n    {\n      // For convenience, we can re-use the exported opengraph-image\n      // size config to also set the ImageResponse's width and height.\n      ...size,\n      fonts: [\n        {\n          name: 'Inter',\n          data: await interSemiBold,\n          style: 'normal',\n          weight: 400,\n        },\n      ],\n    }\n  )\n}\n```\n\n```html filename=\"<head> output\"\n<meta property=\"og:image\" content=\"<generated>\" />\n<meta property=\"og:image:alt\" content=\"About Acme\" />\n<meta property=\"og:image:type\" content=\"image/png\" />\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```\n\n### Props\n\nThe default export function receives the following props:\n\n#### `params` (optional)\n\nAn object containing the [dynamic route parameters](/docs/app/building-your-application/routing/dynamic-routes) object from the root segment down to the segment `opengraph-image` or `twitter-image` is colocated in.\n\n```tsx filename=\"app/shop/[slug]/opengraph-image.tsx\" switcher\nexport default function Image({ params }: { params: { slug: string } }) {\n  // ...\n}\n```\n\n```jsx filename=\"app/shop/[slug]/opengraph-image.js\" switcher\nexport default function Image({ params }) {\n  // ...\n}\n```\n\n| Route                                      | URL         | `params`                  |\n| ------------------------------------------ | ----------- | ------------------------- |\n| `app/shop/opengraph-image.js`              | `/shop`     | `undefined`               |\n| `app/shop/[slug]/opengraph-image.js`       | `/shop/1`   | `{ slug: '1' }`           |\n| `app/shop/[tag]/[item]/opengraph-image.js` | `/shop/1/2` | `{ tag: '1', item: '2' }` |\n| `app/shop/[...slug]/opengraph-image.js`    | `/shop/1/2` | `{ slug: ['1', '2'] }`    |\n\n### Returns\n\nThe default export function should return a `Blob` | `ArrayBuffer` | `TypedArray` | `DataView` | `ReadableStream` | `Response`.\n\n> **Good to know**: `ImageResponse` satisfies this return type.\n\n### Config exports\n\nYou can optionally configure the image's metadata by exporting `alt`, `size`, and `contentType` variables from `opengraph-image` or `twitter-image` route.\n\n| Option                        | Type                                                                                                            |\n| ----------------------------- | --------------------------------------------------------------------------------------------------------------- |\n| [`alt`](#alt)                 | `string`                                                                                                        |\n| [`size`](#size)               | `{ width: number; height: number }`                                                                             |\n| [`contentType`](#contenttype) | `string` - [image MIME type](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types#image_types) |\n\n#### `alt`\n\n```tsx filename=\"opengraph-image.tsx | twitter-image.tsx\" switcher\nexport const alt = 'My images alt text'\n\nexport default function Image() {}\n```\n\n```jsx filename=\"opengraph-image.js | twitter-image.js\" switcher\nexport const alt = 'My images alt text'\n\nexport default function Image() {}\n```\n\n```html filename=\"<head> output\"\n<meta property=\"og:image:alt\" content=\"My images alt text\" />\n```\n\n#### `size`\n\n```tsx filename=\"opengraph-image.tsx | twitter-image.tsx\" switcher\nexport const size = { width: 1200, height: 630 }\n\nexport default function Image() {}\n```\n\n```jsx filename=\"opengraph-image.js | twitter-image.js\" switcher\nexport const size = { width: 1200, height: 630 }\n\nexport default function Image() {}\n```\n\n```html filename=\"<head> output\"\n<meta property=\"og:image:width\" content=\"1200\" />\n<meta property=\"og:image:height\" content=\"630\" />\n```\n\n#### `contentType`\n\n```tsx filename=\"opengraph-image.tsx | twitter-image.tsx\" switcher\nexport const contentType = 'image/png'\n\nexport default function Image() {}\n```\n\n```jsx filename=\"opengraph-image.js | twitter-image.js\" switcher\nexport const contentType = 'image/png'\n\nexport default function Image() {}\n```\n\n```html filename=\"<head> output\"\n<meta property=\"og:image:type\" content=\"image/png\" />\n```\n\n#### Route Segment Config\n\n`opengraph-image` and `twitter-image` are specialized [Route Handlers](/docs/app/building-your-application/routing/route-handlers) that can use the same [route segment configuration](/docs/app/api-reference/file-conventions/route-segment-config) options as Pages and Layouts.\n\n### Examples\n\n#### Using external data\n\nThis example uses the `params` object and external data to generate the image.\n\n> **Good to know**:\n> By default, this generated image will be [statically optimized](/docs/app/building-your-application/rendering/server-components#static-rendering-default). You can configure the individual `fetch` [`options`](/docs/app/api-reference/functions/fetch) or route segments [options](/docs/app/api-reference/file-conventions/route-segment-config#revalidate) to change this behavior.\n\n```tsx filename=\"app/posts/[slug]/opengraph-image.tsx\" switcher\nimport { ImageResponse } from 'next/og'\n\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n\nexport default async function Image({ params }: { params: { slug: string } }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n```jsx filename=\"app/posts/[slug]/opengraph-image.js\" switcher\nimport { ImageResponse } from 'next/og'\n\nexport const alt = 'About Acme'\nexport const size = {\n  width: 1200,\n  height: 630,\n}\nexport const contentType = 'image/png'\n\nexport default async function Image({ params }) {\n  const post = await fetch(`https://.../posts/${params.slug}`).then((res) =>\n    res.json()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 48,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        {post.title}\n      </div>\n    ),\n    {\n      ...size,\n    }\n  )\n}\n```\n\n#### Using Edge runtime with local assets\n\nThis example uses the Edge runtime to fetch a local image on the file system and passes it as an `ArrayBuffer` to the `src` attribute of an `<img>` element. The local asset should be placed relative to the example source file location.\n\n```jsx filename=\"app/opengraph-image.js\" switcher\nimport { ImageResponse } from 'next/og'\nimport { readFile } from 'node:fs/promises'\n\nexport const runtime = 'edge'\n\nexport async function GET() {\n  const logoSrc = await fetch(new URL('./logo.png', import.meta.url)).then(\n    (res) => res.arrayBuffer()\n  )\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\n```\n\n#### Using Node.js runtime with local assets\n\nThis example uses the Node.js runtime to fetch a local image on the file system and passes it as an `ArrayBuffer` to the `src` attribute of an `<img>` element. The local asset should be placed relative to the root of your project, rather than the location of the example source file.\n\n```jsx filename=\"app/opengraph-image.js\" switcher\nimport { ImageResponse } from 'next/og'\nimport { join } from 'node:path'\nimport { readFile } from 'node:fs/promises'\n\nexport async function GET() {\n  const logoData = await readFile(join(process.cwd(), 'logo.png'))\n  const logoSrc = Uint8Array.from(logoData).buffer\n\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <img src={logoSrc} height=\"100\" />\n      </div>\n    )\n  )\n}\n```\n\n## Version History\n\n| Version   | Changes                                           |\n| --------- | ------------------------------------------------- |\n| `v13.3.0` | `opengraph-image` and `twitter-image` introduced. |\n", "02-api-reference/02-file-conventions/01-metadata/index.mdx": "---\ntitle: Metadata Files API Reference\nnav_title: Metadata Files\ndescription: API documentation for the metadata file conventions.\n---\n\nThis section of the docs covers **Metadata file conventions**. File-based metadata can be defined by adding special metadata files to route segments.\n\nEach file convention can be defined using a static file (e.g. `opengraph-image.jpg`), or a dynamic variant that uses code to generate the file (e.g. `opengraph-image.js`).\n\nOnce a file is defined, Next.js will automatically serve the file (with hashes in production for caching) and update the relevant head elements with the correct metadata, such as the asset's URL, file type, and image size.\n", "02-api-reference/02-file-conventions/01-metadata/sitemap.mdx": "---\ntitle: sitemap.xml\ndescription: API Reference for the sitemap.xml file.\nrelated:\n  title: Next Steps\n  description: Learn how to use the generateSitemaps function.\n  links:\n    - app/api-reference/functions/generate-sitemaps\n---\n\n`sitemap.(xml|js|ts)` is a special file that matches the [Sitemaps XML format](https://www.sitemaps.org/protocol.html) to help search engine crawlers index your site more efficiently.\n\n### Sitemap files (.xml)\n\nFor smaller applications, you can create a `sitemap.xml` file and place it in the root of your `app` directory.\n\n```xml filename=\"app/sitemap.xml\"\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n### Generating a sitemap using code (.js, .ts)\n\nYou can use the `sitemap.(js|ts)` file convention to programmatically **generate** a sitemap by exporting a default function that returns an array of URLs. If using TypeScript, a [`Sitemap`](#returns) type is available.\n\n```ts filename=\"app/sitemap.ts\" switcher\nimport { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n```\n\n```js filename=\"app/sitemap.js\" switcher\nexport default function sitemap() {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      changeFrequency: 'yearly',\n      priority: 1,\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      changeFrequency: 'monthly',\n      priority: 0.8,\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      changeFrequency: 'weekly',\n      priority: 0.5,\n    },\n  ]\n}\n```\n\nOutput:\n\n```xml filename=\"acme.com/sitemap.xml\"\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n  <url>\n    <loc>https://acme.com</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>yearly</changefreq>\n    <priority>1</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>monthly</changefreq>\n    <priority>0.8</priority>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n    <changefreq>weekly</changefreq>\n    <priority>0.5</priority>\n  </url>\n</urlset>\n```\n\n### Generate a localized Sitemap\n\n```ts filename=\"app/sitemap.ts\" switcher\nimport { MetadataRoute } from 'next'\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  return [\n    {\n      url: 'https://acme.com',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es',\n          de: 'https://acme.com/de',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/about',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/about',\n          de: 'https://acme.com/de/about',\n        },\n      },\n    },\n    {\n      url: 'https://acme.com/blog',\n      lastModified: new Date(),\n      alternates: {\n        languages: {\n          es: 'https://acme.com/es/blog',\n          de: 'https://acme.com/de/blog',\n        },\n      },\n    },\n  ]\n}\n```\n\nOutput:\n\n```xml filename=\"acme.com/sitemap.xml\"\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n  <url>\n    <loc>https://acme.com</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/about</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/about\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/about\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n  <url>\n    <loc>https://acme.com/blog</loc>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"es\"\n      href=\"https://acme.com/es/blog\"/>\n    <xhtml:link\n      rel=\"alternate\"\n      hreflang=\"de\"\n      href=\"https://acme.com/de/blog\"/>\n    <lastmod>2023-04-06T15:02:24.021Z</lastmod>\n  </url>\n</urlset>\n```\n\n### Generating multiple sitemaps\n\nWhile a single sitemap will work for most applications. For large web applications, you may need to split a sitemap into multiple files.\n\nThere are two ways you can create multiple sitemaps:\n\n- By nesting `sitemap.(xml|js|ts)` inside multiple route segments e.g. `app/sitemap.xml` and `app/products/sitemap.xml`.\n- By using the [`generateSitemaps`](/docs/app/api-reference/functions/generate-sitemaps) function.\n\nFor example, to split a sitemap using `generateSitemaps`, return an array of objects with the sitemap `id`. Then, use the `id` to generate the unique sitemaps.\n\n```ts filename=\"app/product/sitemap.ts\" switcher\nimport { MetadataRoute } from 'next'\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({\n  id,\n}: {\n  id: number\n}): Promise<MetadataRoute.Sitemap> {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\n```js filename=\"app/product/sitemap.js\" switcher\nimport { BASE_URL } from '@/app/lib/constants'\n\nexport async function generateSitemaps() {\n  // Fetch the total number of products and calculate the number of sitemaps needed\n  return [{ id: 0 }, { id: 1 }, { id: 2 }, { id: 3 }]\n}\n\nexport default async function sitemap({ id }) {\n  // Google's limit is 50,000 URLs per sitemap\n  const start = id * 50000\n  const end = start + 50000\n  const products = await getProducts(\n    `SELECT id, date FROM products WHERE id BETWEEN ${start} AND ${end}`\n  )\n  return products.map((product) => ({\n    url: `${BASE_URL}/product/${id}`,\n    lastModified: product.date,\n  }))\n}\n```\n\nIn production, your generated sitemaps will be available at `/.../sitemap/[id].xml`. For example, `/product/sitemap/1.xml`.\n\nIn development, you can view the generated sitemap on `/.../sitemap.xml/[id]`. For example, `/product/sitemap.xml/1`. This difference is temporary and will follow the production format.\n\nSee the [`generateSitemaps` API reference](/docs/app/api-reference/functions/generate-sitemaps) for more information.\n\n## Returns\n\nThe default function exported from `sitemap.(xml|ts|js)` should return an array of objects with the following properties:\n\n```tsx\ntype Sitemap = Array<{\n  url: string\n  lastModified?: string | Date\n  changeFrequency?:\n    | 'always'\n    | 'hourly'\n    | 'daily'\n    | 'weekly'\n    | 'monthly'\n    | 'yearly'\n    | 'never'\n  priority?: number\n  alternates?: {\n    languages?: Languages<string>\n  }\n}>\n```\n\n## Version History\n\n| Version   | Changes                                                      |\n| --------- | ------------------------------------------------------------ |\n| `v13.4.5` | Add `changeFrequency` and `priority` attributes to sitemaps. |\n| `v13.3.0` | `sitemap` introduced.                                        |\n", "02-api-reference/02-file-conventions/01-metadata/robots.mdx": "---\ntitle: robots.txt\ndescription: API Reference for robots.txt file.\n---\n\nAdd or generate a `robots.txt` file that matches the [Robots Exclusion Standard](https://en.wikipedia.org/wiki/Robots.txt#Standard) in the **root** of `app` directory to tell search engine crawlers which URLs they can access on your site.\n\n## Static `robots.txt`\n\n```txt filename=\"app/robots.txt\"\nUser-Agent: *\nAllow: /\nDisallow: /private/\n\nSitemap: https://acme.com/sitemap.xml\n```\n\n## Generate a Robots file\n\nAdd a `robots.js` or `robots.ts` file that returns a [`Robots` object](#robots-object).\n\n```ts filename=\"app/robots.ts\" switcher\nimport { MetadataRoute } from 'next'\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n```js filename=\"app/robots.js\" switcher\nexport default function robots() {\n  return {\n    rules: {\n      userAgent: '*',\n      allow: '/',\n      disallow: '/private/',\n    },\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\nOutput:\n\n```txt\nUser-Agent: *\nAllow: /\nDisallow: /private/\n\nSitemap: https://acme.com/sitemap.xml\n```\n\n### Customizing specific user agents\n\nYou can customise how individual search engine bots crawl your site by passing an array of user agents to the `rules` property. For example:\n\n```ts filename=\"app/robots.ts\" switcher\nimport type { MetadataRoute } from 'next'\n\nexport default function robots(): MetadataRoute.Robots {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: '/private/',\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\n```js filename=\"app/robots.js\" switcher\nexport default function robots() {\n  return {\n    rules: [\n      {\n        userAgent: 'Googlebot',\n        allow: ['/'],\n        disallow: ['/private/'],\n      },\n      {\n        userAgent: ['Applebot', 'Bingbot'],\n        disallow: ['/'],\n      },\n    ],\n    sitemap: 'https://acme.com/sitemap.xml',\n  }\n}\n```\n\nOutput:\n\n```txt\nUser-Agent: Googlebot\nAllow: /\nDisallow: /private/\n\nUser-Agent: Applebot\nDisallow: /\n\nUser-Agent: Bingbot\nDisallow: /\n\nSitemap: https://acme.com/sitemap.xml\n```\n\n### Robots object\n\n```tsx\ntype Robots = {\n  rules:\n    | {\n        userAgent?: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }\n    | Array<{\n        userAgent: string | string[]\n        allow?: string | string[]\n        disallow?: string | string[]\n        crawlDelay?: number\n      }>\n  sitemap?: string | string[]\n  host?: string\n}\n```\n\n## Version History\n\n| Version   | Changes              |\n| --------- | -------------------- |\n| `v13.3.0` | `robots` introduced. |\n", "01-building-your-application/index.mdx": "---\ntitle: Building Your Application\ndescription: Learn how to use Next.js features to build your application.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js provides the building blocks to create flexible, full-stack web applications. The guides in **Building Your Application** explain how to use these features and how to customize your application's behavior.\n\nThe sections and pages are organized sequentially, from basic to advanced, so you can follow them step-by-step when building your Next.js application. However, you can read them in any order or skip to the pages that apply to your use case.\n\n<AppOnly>\n\nIf you're new to Next.js, we recommend starting with the [Routing](/docs/app/building-your-application/routing), [Rendering](/docs/app/building-your-application/rendering), [Data Fetching](/docs/app/building-your-application/data-fetching) and [Styling](/docs/app/building-your-application/styling) sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as [Optimizing](/docs/app/building-your-application/optimizing) and [Configuring](/docs/app/building-your-application/configuring). Finally, once you're ready, checkout the [Deploying](/docs/app/building-your-application/deploying) and [Upgrading](/docs/app/building-your-application/upgrading) sections.\n\n</AppOnly>\n\n<PagesOnly>\n\nIf you're new to Next.js, we recommend starting with the [Routing](/docs/pages/building-your-application/routing), [Rendering](/docs/pages/building-your-application/rendering), [Data Fetching](/docs/pages/building-your-application/data-fetching) and [Styling](/docs/pages/building-your-application/styling) sections, as they introduce the fundamental Next.js and web concepts to help you get started. Then, you can dive deeper into the other sections such as [Optimizing](/docs/pages/building-your-application/optimizing) and [Configuring](/docs/pages/building-your-application/configuring). Finally, once you're ready, checkout the [Deploying](/docs/pages/building-your-application/deploying) and [Upgrading](/docs/pages/building-your-application/upgrading) sections.\n\n</PagesOnly>\n", "01-building-your-application/03-rendering/02-client-components.mdx": "---\ntitle: Client Components\ndescription: Learn how to use Client Components to render parts of your application on the client.\n---\n\nClient Components allow you to write interactive UI that is [prerendered on the server](https://github.com/reactwg/server-components/discussions/4) and can use client JavaScript to run in the browser.\n\nThis page will go through how Client Components work, how they're rendered, and when you might use them.\n\n## Benefits of Client Rendering\n\nThere are a couple of benefits to doing the rendering work on the client, including:\n\n- **Interactivity**: Client Components can use state, effects, and event listeners, meaning they can provide immediate feedback to the user and update the UI.\n- **Browser APIs**: Client Components have access to browser APIs, like [geolocation](https://developer.mozilla.org/docs/Web/API/Geolocation_API) or [localStorage](https://developer.mozilla.org/docs/Web/API/Window/localStorage).\n\n## Using Client Components in Next.js\n\nTo use Client Components, you can add the React [`\"use client\"` directive](https://react.dev/reference/react/use-client) at the top of a file, above your imports.\n\n`\"use client\"` is used to declare a [boundary](/docs/app/building-your-application/rendering#network-boundary) between a Server and Client Component modules. This means that by defining a `\"use client\"` in a file, all other modules imported into it, including child components, are considered part of the client bundle.\n\n```tsx filename=\"app/counter.tsx\" highlight={1} switcher\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/counter.js\" highlight={1} switcher\n'use client'\n\nimport { useState } from 'react'\n\nexport default function Counter() {\n  const [count, setCount] = useState(0)\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  )\n}\n```\n\nThe diagram below shows that using `onClick` and `useState` in a nested component (`toggle.js`) will cause an error if the `\"use client\"` directive is not defined. This is because, by default, all components in the App Router are Server Components where these APIs are not available. By defining the `\"use client\"` directive in `toggle.js`, you can tell React to enter the client boundary where these APIs are available.\n\n<Image\n  alt=\"Use Client Directive and Network Boundary\"\n  srcLight=\"/docs/light/use-client-directive.png\"\n  srcDark=\"/docs/dark/use-client-directive.png\"\n  width=\"1600\"\n  height=\"1320\"\n/>\n\n> **Defining multiple `use client` entry points**:\n>\n> You can define multiple \"use client\" entry points in your React Component tree. This allows you to split your application into multiple client bundles.\n>\n> However, `\"use client\"` doesn't need to be defined in every component that needs to be rendered on the client. Once you define the boundary, all child components and modules imported into it are considered part of the client bundle.\n\n## How are Client Components Rendered?\n\nIn Next.js, Client Components are rendered differently depending on whether the request is part of a full page load (an initial visit to your application or a page reload triggered by a browser refresh) or a subsequent navigation.\n\n### Full page load\n\nTo optimize the initial page load, Next.js will use React's APIs to render a static HTML preview on the server for both Client and Server Components. This means, when the user first visits your application, they will see the content of the page immediately, without having to wait for the client to download, parse, and execute the Client Component JavaScript bundle.\n\nOn the server:\n\n1. React renders Server Components into a special data format called the [**React Server Component Payload (RSC Payload)**](/docs/app/building-your-application/rendering/server-components#what-is-the-react-server-component-payload-rsc), which includes references to Client Components.\n2. Next.js uses the RSC Payload and Client Component JavaScript instructions to render **HTML** for the route on the server.\n\nThen, on the client:\n\n1. The HTML is used to immediately show a fast non-interactive initial preview of the route.\n2. The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.\n3. The JavaScript instructions are used to [hydrate](https://react.dev/reference/react-dom/client/hydrateRoot) Client Components and make their UI interactive.\n\n> **What is hydration?**\n>\n> Hydration is the process of attaching event listeners to the DOM, to make the static HTML interactive. Behind the scenes, hydration is done with the [`hydrateRoot`](https://react.dev/reference/react-dom/client/hydrateRoot) React API.\n\n### Subsequent Navigations\n\nOn subsequent navigations, Client Components are rendered entirely on the client, without the server-rendered HTML.\n\nThis means the Client Component JavaScript bundle is downloaded and parsed. Once the bundle is ready, React will use the [RSC Payload](/docs/app/building-your-application/rendering/server-components#what-is-the-react-server-component-payload-rsc) to reconcile the Client and Server Component trees, and update the DOM.\n\n## Going back to the Server Environment\n\nSometimes, after you've declared the `\"use client\"` boundary, you may want to go back to the server environment. For example, you may want to reduce the client bundle size, fetch data on the server, or use an API that is only available on the server.\n\nYou can keep code on the server even though it's theoretically nested inside Client Components by interleaving Client and Server Components and [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations). See the [Composition Patterns](/docs/app/building-your-application/rendering/composition-patterns) page for more information.\n", "01-building-your-application/03-rendering/04-edge-and-nodejs-runtimes.mdx": "---\ntitle: Runtimes\ndescription: Learn about the switchable runtimes (Edge and Node.js) in Next.js.\nrelated:\n  description: View the Edge Runtime API reference.\n  links:\n    - app/api-reference/edge\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js has two server runtimes you can use in your application:\n\n- The **Node.js Runtime** (default) which has access to all Node.js APIs and compatible packages from the ecosystem.\n- The **Edge Runtime** which contains a more limited [set of APIs](/docs/app/api-reference/edge).\n\n## Use Cases\n\n- The Node.js runtime is used for rendering your application.\n- The Edge runtime is used for Middleware (routing rules like redirects, rewrites, and setting headers).\n\n## Caveats\n\n- The Edge runtime does not support all Node.js APIs. Some packages will not work. Learn more about the unsupported APIs in the [Edge Runtime](/docs/app/api-reference/edge#unsupported-apis).\n- The Edge runtime does not support Incremental Static Regeneration (ISR).\n- Both runtimes can support [streaming](/docs/app/building-your-application/routing/loading-ui-and-streaming) depending on your deployment infrastructure.\n", "01-building-your-application/03-rendering/index.mdx": "---\ntitle: Rendering\ndescription: Learn the differences between Next.js rendering environments, strategies, and runtimes.\n---\n\nRendering converts the code you write into user interfaces. React and Next.js allow you to create hybrid web applications where parts of your code can be rendered on the server or the client. This section will help you understand the differences between these rendering environments, strategies, and runtimes.\n\n## Fundamentals\n\nTo start, it's helpful to be familiar with three foundational web concepts:\n\n- The [Environments](#rendering-environments) your application code can be executed in: the server and the client.\n- The [Request-Response Lifecycle](#request-response-lifecycle) that's initiated when a user visits or interacts with your application.\n- The [Network Boundary](#network-boundary) that separates server and client code.\n\n### Rendering Environments\n\nThere are two environments where web applications can be rendered: the client and the server.\n\n<Image\n  alt=\"Client and Server Environments\"\n  srcLight=\"/docs/light/client-and-server-environments.png\"\n  srcDark=\"/docs/dark/client-and-server-environments.png\"\n  width=\"1600\"\n  height=\"672\"\n/>\n\n- The **client** refers to the browser on a user's device that sends a request to a server for your application code. It then turns the response from the server into a user interface.\n- The **server** refers to the computer in a data center that stores your application code, receives requests from a client, and sends back an appropriate response.\n\nHistorically, developers had to use different languages (e.g. JavaScript, PHP) and frameworks when writing code for the server and the client. With React, developers can use the **same language** (JavaScript), and the **same framework** (e.g. Next.js or your framework of choice). This flexibility allows you to seamlessly write code for both environments without context switching.\n\nHowever, each environment has its own set of capabilities and constraints. Therefore, the code you write for the server and the client is not always the same. There are certain operations (e.g. data fetching or managing user state) that are better suited for one environment over the other.\n\nUnderstanding these differences is key to effectively using React and Next.js. We'll cover the differences and use cases in more detail on the [Server](/docs/app/building-your-application/rendering/server-components) and [Client](/docs/app/building-your-application/rendering/client-components) Components pages, for now, let's continue building on our foundation.\n\n### Request-Response Lifecycle\n\nBroadly speaking, all websites follow the same **Request-Response Lifecycle**:\n\n1. **User Action:** The user interacts with a web application. This could be clicking a link, submitting a form, or typing a URL directly into the browser's address bar.\n2. **HTTP Request:** The client sends an [HTTP](https://developer.mozilla.org/docs/Web/HTTP) request to the server that contains necessary information about what resources are being requested, what method is being used (e.g. `GET`, `POST`), and additional data if necessary.\n3. **Server:** The server processes the request and responds with the appropriate resources. This process may take a couple of steps like routing, fetching data, etc.\n4. **HTTP Response:** After processing the request, the server sends an HTTP response back to the client. This response contains a status code (which tells the client whether the request was successful or not) and requested resources (e.g. HTML, CSS, JavaScript, static assets, etc).\n5. **Client:** The client parses the resources to render the user interface.\n6. **User Action:** Once the user interface is rendered, the user can interact with it, and the whole process starts again.\n\nA major part of building a hybrid web application is deciding how to split the work in the lifecycle, and where to place the Network Boundary.\n\n### Network Boundary\n\nIn web development, the **Network Boundary** is a conceptual line that separates the different environments. For example, the client and the server, or the server and the data store.\n\n{/* Diagram: Network Boundary */}\n\nIn React, you choose where to place the client-server network boundary wherever it makes the most sense.\n\nBehind the scenes, the work is split into two parts: the **client module graph** and the **server module graph**. The server module graph contains all the components that are rendered on the server, and the client module graph contains all components that are rendered on the client.\n\n{/* Diagram: Client and Server Module Graphs */}\n\nIt may be helpful to think about module graphs as a visual representation of how files in your application depend on each other.\n\n{/* For example, if you have a file called `Page.jsx` that imports a file called `Button.jsx` on the server, the module graph would look something like this: - Diagram - */}\n\nYou can use the React `\"use client\"` convention to define the boundary. There's also a `\"use server\"` convention, which tells React to do some computational work on the server.\n\n## Building Hybrid Applications\n\nWhen working in these environments, it's helpful to think of the flow of the code in your application as **unidirectional**. In other words, during a response, your application code flows in one direction: from the server to the client.\n\n{/* Diagram: Response flow */}\n\nIf you need to access the server from the client, you send a **new** request to the server rather than re-use the same request. This makes it easier to understand where to render your components and where to place the Network Boundary.\n\nIn practice, this model encourages developers to think about what they want to execute on the server first, before sending the result to the client and making the application interactive.\n\nThis concept will become clearer when we look at how you can [interleave client and server components](/docs/app/building-your-application/rendering/composition-patterns) in the same component tree.\n", "01-building-your-application/03-rendering/01-server-components.mdx": "---\ntitle: Server Components\ndescription: Learn how you can use React Server Components to render parts of your application on the server.\nrelated:\n  description: Learn how Next.js caches data and the result of static rendering.\n  links:\n    - app/building-your-application/caching\n---\n\nReact Server Components allow you to write UI that can be rendered and optionally cached on the server. In Next.js, the rendering work is further split by route segments to enable streaming and partial rendering, and there are three different server rendering strategies:\n\n- [Static Rendering](#static-rendering-default)\n- [Dynamic Rendering](#dynamic-rendering)\n- [Streaming](#streaming)\n\nThis page will go through how Server Components work, when you might use them, and the different server rendering strategies.\n\n## Benefits of Server Rendering\n\nThere are a couple of benefits to doing the rendering work on the server, including:\n\n- **Data Fetching**: Server Components allow you to move data fetching to the server, closer to your data source. This can improve performance by reducing time it takes to fetch data needed for rendering, and the number of requests the client needs to make.\n- **Security**: Server Components allow you to keep sensitive data and logic on the server, such as tokens and API keys, without the risk of exposing them to the client.\n- **Caching**: By rendering on the server, the result can be cached and reused on subsequent requests and across users. This can improve performance and reduce cost by reducing the amount of rendering and data fetching done on each request.\n- **Performance**: Server Components give you additional tools to optimize performance from the baseline. For example, if you start with an app composed of entirely Client Components, moving non-interactive pieces of your UI to Server Components can reduce the amount of client-side JavaScript needed. This is beneficial for users with slower internet or less powerful devices, as the browser has less client-side JavaScript to download, parse, and execute.\n- **Initial Page Load and [First Contentful Paint (FCP)](https://web.dev/fcp/)**: On the server, we can generate HTML to allow users to view the page immediately, without waiting for the client to download, parse and execute the JavaScript needed to render the page.\n- **Search Engine Optimization and Social Network Shareability**: The rendered HTML can be used by search engine bots to index your pages and social network bots to generate social card previews for your pages.\n- **Streaming**: Server Components allow you to split the rendering work into chunks and stream them to the client as they become ready. This allows the user to see parts of the page earlier without having to wait for the entire page to be rendered on the server.\n\n## Using Server Components in Next.js\n\nBy default, Next.js uses Server Components. This allows you to automatically implement server rendering with no additional configuration, and you can opt into using Client Components when needed, see [Client Components](/docs/app/building-your-application/rendering/client-components).\n\n## How are Server Components rendered?\n\nOn the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual route segments and [Suspense Boundaries](https://react.dev/reference/react/Suspense).\n\nEach chunk is rendered in two steps:\n\n1. React renders Server Components into a special data format called the **React Server Component Payload (RSC Payload)**.\n2. Next.js uses the RSC Payload and Client Component JavaScript instructions to render **HTML** on the server.\n\n{/* Rendering Diagram */}\n\nThen, on the client:\n\n1. The HTML is used to immediately show a fast non-interactive preview of the route - this is for the initial page load only.\n2. The React Server Components Payload is used to reconcile the Client and Server Component trees, and update the DOM.\n3. The JavaScript instructions are used to [hydrate](https://react.dev/reference/react-dom/client/hydrateRoot) Client Components and make the application interactive.\n\n> #### What is the React Server Component Payload (RSC)?\n>\n> The RSC Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The RSC Payload contains:\n>\n> - The rendered result of Server Components\n> - Placeholders for where Client Components should be rendered and references to their JavaScript files\n> - Any props passed from a Server Component to a Client Component\n\n## Server Rendering Strategies\n\nThere are three subsets of server rendering: Static, Dynamic, and Streaming.\n\n### Static Rendering (Default)\n\n{/* Static Rendering Diagram */}\n\nWith Static Rendering, routes are rendered at **build time**, or in the background after [data revalidation](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data). The result is cached and can be pushed to a [Content Delivery Network (CDN)](https://developer.mozilla.org/docs/Glossary/CDN). This optimization allows you to share the result of the rendering work between users and server requests.\n\nStatic rendering is useful when a route has data that is not personalized to the user and can be known at build time, such as a static blog post or a product page.\n\n### Dynamic Rendering\n\n{/* Dynamic Rendering Diagram */}\n\nWith Dynamic Rendering, routes are rendered for each user at **request time**.\n\nDynamic rendering is useful when a route has data that is personalized to the user or has information that can only be known at request time, such as cookies or the URL's search params.\n\n> **Dynamic Routes with Cached Data**\n>\n> In most websites, routes are not fully static or fully dynamic - it's a spectrum. For example, you can have an e-commerce page that uses cached product data that's revalidated at an interval, but also has uncached, personalized customer data.\n>\n> In Next.js, you can have dynamically rendered routes that have both cached and uncached data. This is because the RSC Payload and data are cached separately. This allows you to opt into dynamic rendering without worrying about the performance impact of fetching all the data at request time.\n>\n> Learn more about the [full-route cache](/docs/app/building-your-application/caching#full-route-cache) and [Data Cache](/docs/app/building-your-application/caching#data-cache).\n\n#### Switching to Dynamic Rendering\n\nDuring rendering, if a [dynamic function](#dynamic-functions) or [uncached data request](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#opting-out-of-data-caching) is discovered, Next.js will switch to dynamically rendering the whole route. This table summarizes how dynamic functions and data caching affect whether a route is statically or dynamically rendered:\n\n| Dynamic Functions | Data       | Route                |\n| ----------------- | ---------- | -------------------- |\n| No                | Cached     | Statically Rendered  |\n| Yes               | Cached     | Dynamically Rendered |\n| No                | Not Cached | Dynamically Rendered |\n| Yes               | Not Cached | Dynamically Rendered |\n\nIn the table above, for a route to be fully static, all data must be cached. However, you can have a dynamically rendered route that uses both cached and uncached data fetches.\n\nAs a developer, you do not need to choose between static and dynamic rendering as Next.js will automatically choose the best rendering strategy for each route based on the features and APIs used. Instead, you choose when to [cache or revalidate specific data](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating), and you may choose to [stream](#streaming) parts of your UI.\n\n#### Dynamic Functions\n\nDynamic functions rely on information that can only be known at request time such as a user's cookies, current requests headers, or the URL's search params. In Next.js, these dynamic functions are:\n\n- **[`cookies()`](/docs/app/api-reference/functions/cookies) and [`headers()`](/docs/app/api-reference/functions/headers)**: Using these in a Server Component will opt the whole route into dynamic rendering at request time.\n- **[`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional)**: Using the `searchParams` prop on a [Page](/docs/app/api-reference/file-conventions/page) will opt the page into dynamic rendering at request time.\n\nUsing any of these functions will opt the whole route into dynamic rendering at request time.\n\n### Streaming\n\n<Image\n  alt=\"Diagram showing parallelization of route segments during streaming, showing data fetching, rendering, and hydration of individual chunks.\"\n  srcLight=\"/docs/light/sequential-parallel-data-fetching.png\"\n  srcDark=\"/docs/dark/sequential-parallel-data-fetching.png\"\n  width=\"1600\"\n  height=\"525\"\n/>\n\nStreaming enables you to progressively render UI from the server. Work is split into chunks and streamed to the client as it becomes ready. This allows the user to see parts of the page immediately, before the entire content has finished rendering.\n\n<Image\n  alt=\"Diagram showing partially rendered page on the client, with loading UI for chunks that are being streamed.\"\n  srcLight=\"/docs/light/server-rendering-with-streaming.png\"\n  srcDark=\"/docs/dark/server-rendering-with-streaming.png\"\n  width=\"1600\"\n  height=\"785\"\n/>\n\nStreaming is built into the Next.js App Router by default. This helps improve both the initial page loading performance, as well as UI that depends on slower data fetches that would block rendering the whole route. For example, reviews on a product page.\n\nYou can start streaming route segments using `loading.js` and UI components with [React Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming). See the [Loading UI and Streaming](/docs/app/building-your-application/routing/loading-ui-and-streaming) section for more information.\n", "01-building-your-application/03-rendering/03-composition-patterns.mdx": "---\ntitle: Server and Client Composition Patterns\nnav_title: Composition Patterns\ndescription: Recommended patterns for using Server and Client Components.\n---\n\nWhen building React applications, you will need to consider what parts of your application should be rendered on the server or the client. This page covers some recommended composition patterns when using Server and Client Components.\n\n## When to use Server and Client Components?\n\nHere's a quick summary of the different use cases for Server and Client Components:\n\n| What do you need to do?                                                            | Server Component    | Client Component    |\n| ---------------------------------------------------------------------------------- | ------------------- | ------------------- |\n| Fetch data                                                                         | <Check size={18} /> | <Cross size={18} /> |\n| Access backend resources (directly)                                                | <Check size={18} /> | <Cross size={18} /> |\n| Keep sensitive information on the server (access tokens, API keys, etc)            | <Check size={18} /> | <Cross size={18} /> |\n| Keep large dependencies on the server / Reduce client-side JavaScript              | <Check size={18} /> | <Cross size={18} /> |\n| Add interactivity and event listeners (`onClick()`, `onChange()`, etc)             | <Cross size={18} /> | <Check size={18} /> |\n| Use State and Lifecycle Effects (`useState()`, `useReducer()`, `useEffect()`, etc) | <Cross size={18} /> | <Check size={18} /> |\n| Use browser-only APIs                                                              | <Cross size={18} /> | <Check size={18} /> |\n| Use custom hooks that depend on state, effects, or browser-only APIs               | <Cross size={18} /> | <Check size={18} /> |\n| Use [React Class components](https://react.dev/reference/react/Component)          | <Cross size={18} /> | <Check size={18} /> |\n\n## Server Component Patterns\n\nBefore opting into client-side rendering, you may wish to do some work on the server like fetching data, or accessing your database or backend services.\n\nHere are some common patterns when working with Server Components:\n\n### Sharing data between components\n\nWhen fetching data on the server, there may be cases where you need to share data across different components. For example, you may have a layout and a page that depend on the same data.\n\nInstead of using [React Context](https://react.dev/learn/passing-data-deeply-with-context) (which is not available on the server) or passing data as props, you can use [`fetch`](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#fetching-data-on-the-server-with-fetch) or React's `cache` function to fetch the same data in the components that need it, without worrying about making duplicate requests for the same data. This is because React extends `fetch` to automatically memoize data requests, and the `cache` function can be used when `fetch` is not available.\n\nLearn more about [memoization](/docs/app/building-your-application/caching#request-memoization) in React.\n\n### Keeping Server-only Code out of the Client Environment\n\nSince JavaScript modules can be shared between both Server and Client Components modules, it's possible for code that was only ever intended to be run on the server to sneak its way into the client.\n\nFor example, take the following data-fetching function:\n\n```ts filename=\"lib/data.ts\" switcher\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\n```js filename=\"lib/data.js\" switcher\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\nAt first glance, it appears that `getData` works on both the server and the client. However, this function contains an `API_KEY`, written with the intention that it would only ever be executed on the server.\n\nSince the environment variable `API_KEY` is not prefixed with `NEXT_PUBLIC`, it's a private variable that can only be accessed on the server. To prevent your environment variables from being leaked to the client, Next.js replaces private environment variables with an empty string.\n\nAs a result, even though `getData()` can be imported and executed on the client, it won't work as expected. And while making the variable public would make the function work on the client, you may not want to expose sensitive information to the client.\n\nTo prevent this sort of unintended client usage of server code, we can use the `server-only` package to give other developers a build-time error if they ever accidentally import one of these modules into a Client Component.\n\nTo use `server-only`, first install the package:\n\n```bash filename=\"Terminal\"\nnpm install server-only\n```\n\nThen import the package into any module that contains server-only code:\n\n```js filename=\"lib/data.js\"\nimport 'server-only'\n\nexport async function getData() {\n  const res = await fetch('https://external-service.com/data', {\n    headers: {\n      authorization: process.env.API_KEY,\n    },\n  })\n\n  return res.json()\n}\n```\n\nNow, any Client Component that imports `getData()` will receive a build-time error explaining that this module can only be used on the server.\n\nThe corresponding package `client-only` can be used to mark modules that contain client-only code \u2013 for example, code that accesses the `window` object.\n\n### Using Third-party Packages and Providers\n\nSince Server Components are a new React feature, third-party packages and providers in the ecosystem are just beginning to add the `\"use client\"` directive to components that use client-only features like `useState`, `useEffect`, and `createContext`.\n\nToday, many components from `npm` packages that use client-only features do not yet have the directive. These third-party components will work as expected within Client Components since they have the `\"use client\"` directive, but they won't work within Server Components.\n\nFor example, let's say you've installed the hypothetical `acme-carousel` package which has a `<Carousel />` component. This component uses `useState`, but it doesn't yet have the `\"use client\"` directive.\n\nIf you use `<Carousel />` within a Client Component, it will work as expected:\n\n```tsx filename=\"app/gallery.tsx\" switcher\n'use client'\n\nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n\nexport default function Gallery() {\n  let [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n\n      {/* Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/gallery.js\" switcher\n'use client'\n\nimport { useState } from 'react'\nimport { Carousel } from 'acme-carousel'\n\nexport default function Gallery() {\n  let [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div>\n      <button onClick={() => setIsOpen(true)}>View pictures</button>\n\n      {/*  Works, since Carousel is used within a Client Component */}\n      {isOpen && <Carousel />}\n    </div>\n  )\n}\n```\n\nHowever, if you try to use it directly within a Server Component, you'll see an error:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { Carousel } from 'acme-carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/* Error: `useState` can not be used within Server Components */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { Carousel } from 'acme-carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Error: `useState` can not be used within Server Components */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\nThis is because Next.js doesn't know `<Carousel />` is using client-only features.\n\nTo fix this, you can wrap third-party components that rely on client-only features in your own Client Components:\n\n```tsx filename=\"app/carousel.tsx\" switcher\n'use client'\n\nimport { Carousel } from 'acme-carousel'\n\nexport default Carousel\n```\n\n```jsx filename=\"app/carousel.js\" switcher\n'use client'\n\nimport { Carousel } from 'acme-carousel'\n\nexport default Carousel\n```\n\nNow, you can use `<Carousel />` directly within a Server Component:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Carousel from './carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Carousel from './carousel'\n\nexport default function Page() {\n  return (\n    <div>\n      <p>View pictures</p>\n\n      {/*  Works, since Carousel is a Client Component */}\n      <Carousel />\n    </div>\n  )\n}\n```\n\nWe don't expect you to need to wrap most third-party components since it's likely you'll be using them within Client Components. However, one exception is providers, since they rely on React state and context, and are typically needed at the root of an application. [Learn more about third-party context providers below](#using-context-providers).\n\n#### Using Context Providers\n\nContext providers are typically rendered near the root of an application to share global concerns, like the current theme. Since [React context](https://react.dev/learn/passing-data-deeply-with-context) is not supported in Server Components, trying to create a context at the root of your application will cause an error:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { createContext } from 'react'\n\n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { createContext } from 'react'\n\n//  createContext is not supported in Server Components\nexport const ThemeContext = createContext({})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n      </body>\n    </html>\n  )\n}\n```\n\nTo fix this, create your context and render its provider inside of a Client Component:\n\n```tsx filename=\"app/theme-provider.tsx\" switcher\n'use client'\n\nimport { createContext } from 'react'\n\nexport const ThemeContext = createContext({})\n\nexport default function ThemeProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n```\n\n```jsx filename=\"app/theme-provider.js\" switcher\n'use client'\n\nimport { createContext } from 'react'\n\nexport const ThemeContext = createContext({})\n\nexport default function ThemeProvider({ children }) {\n  return <ThemeContext.Provider value=\"dark\">{children}</ThemeContext.Provider>\n}\n```\n\nYour Server Component will now be able to directly render your provider since it's been marked as a Client Component:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport ThemeProvider from './theme-provider'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport ThemeProvider from './theme-provider'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <ThemeProvider>{children}</ThemeProvider>\n      </body>\n    </html>\n  )\n}\n```\n\nWith the provider rendered at the root, all other Client Components throughout your app will be able to consume this context.\n\n> **Good to know**: You should render providers as deep as possible in the tree \u2013 notice how `ThemeProvider` only wraps `{children}` instead of the entire `<html>` document. This makes it easier for Next.js to optimize the static parts of your Server Components.\n\n#### Advice for Library Authors\n\nIn a similar fashion, library authors creating packages to be consumed by other developers can use the `\"use client\"` directive to mark client entry points of their package. This allows users of the package to import package components directly into their Server Components without having to create a wrapping boundary.\n\nYou can optimize your package by using ['use client' deeper in the tree](#moving-client-components-down-the-tree), allowing the imported modules to be part of the Server Component module graph.\n\nIt's worth noting some bundlers might strip out `\"use client\"` directives. You can find an example of how to configure esbuild to include the `\"use client\"` directive in the [React Wrap Balancer](https://github.com/shuding/react-wrap-balancer/blob/main/tsup.config.ts#L10-L13) and [Vercel Analytics](https://github.com/vercel/analytics/blob/main/packages/web/tsup.config.js#L26-L30) repositories.\n\n## Client Components\n\n### Moving Client Components Down the Tree\n\nTo reduce the Client JavaScript bundle size, we recommend moving Client Components down your component tree.\n\nFor example, you may have a Layout that has static elements (e.g. logo, links, etc) and an interactive search bar that uses state.\n\nInstead of making the whole layout a Client Component, move the interactive logic to a Client Component (e.g. `<SearchBar />`) and keep your layout as a Server Component. This means you don't have to send all the component Javascript of the layout to the client.\n\n```tsx filename=\"app/layout.tsx\" switcher\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n\n// Layout is a Server Component by default\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\n// SearchBar is a Client Component\nimport SearchBar from './searchbar'\n// Logo is a Server Component\nimport Logo from './logo'\n\n// Layout is a Server Component by default\nexport default function Layout({ children }) {\n  return (\n    <>\n      <nav>\n        <Logo />\n        <SearchBar />\n      </nav>\n      <main>{children}</main>\n    </>\n  )\n}\n```\n\n### Passing props from Server to Client Components (Serialization)\n\nIf you fetch data in a Server Component, you may want to pass data down as props to Client Components. Props passed from the Server to Client Components need to be [serializable](https://react.dev/reference/react/use-server#serializable-parameters-and-return-values) by React.\n\nIf your Client Components depend on data that is not serializable, you can [fetch data on the client with a third party library](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#fetching-data-on-the-client-with-third-party-libraries) or on the server via a [Route Handler](/docs/app/building-your-application/routing/route-handlers).\n\n## Interleaving Server and Client Components\n\nWhen interleaving Client and Server Components, it may be helpful to visualize your UI as a tree of components. Starting with the [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required), which is a Server Component, you can then render certain subtrees of components on the client by adding the `\"use client\"` directive.\n\n{/* Diagram - interleaving */}\n\nWithin those client subtrees, you can still nest Server Components or call Server Actions, however there are some things to keep in mind:\n\n- During a request-response lifecycle, your code moves from the server to the client. If you need to access data or resources on the server while on the client, you'll be making a **new** request to the server - not switching back and forth.\n- When a new request is made to the server, all Server Components are rendered first, including those nested inside Client Components. The rendered result ([RSC Payload](/docs/app/building-your-application/rendering/server-components#what-is-the-react-server-component-payload-rsc)) will contain references to the locations of Client Components. Then, on the client, React uses the RSC Payload to reconcile Server and Client Components into a single tree.\n\n{/* Diagram */}\n\n- Since Client Components are rendered after Server Components, you cannot import a Server Component into a Client Component module (since it would require a new request back to the server). Instead, you can pass a Server Component as `props` to a Client Component. See the [unsupported pattern](#unsupported-pattern-importing-server-components-into-client-components) and [supported pattern](#supported-pattern-passing-server-components-to-client-components-as-props) sections below.\n\n### Unsupported Pattern: Importing Server Components into Client Components\n\nThe following pattern is not supported. You cannot import a Server Component into a Client Component:\n\n```tsx filename=\"app/client-component.tsx\" switcher highlight={4,17}\n'use client'\n\n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      <ServerComponent />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/client-component.js\" switcher highlight={3,13}\n'use client'\n\n// You cannot import a Server Component into a Client Component.\nimport ServerComponent from './Server-Component'\n\nexport default function ClientComponent({ children }) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      <ServerComponent />\n    </>\n  )\n}\n```\n\n### Supported Pattern: Passing Server Components to Client Components as Props\n\nThe following pattern is supported. You can pass Server Components as a prop to a Client Component.\n\nA common pattern is to use the React `children` prop to create a _\"slot\"_ in your Client Component.\n\nIn the example below, `<ClientComponent>` accepts a `children` prop:\n\n```tsx filename=\"app/client-component.tsx\" switcher highlight={6,15}\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n      {children}\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/client-component.js\" switcher highlight={5,12}\n'use client'\n\nimport { useState } from 'react'\n\nexport default function ClientComponent({ children }) {\n  const [count, setCount] = useState(0)\n\n  return (\n    <>\n      <button onClick={() => setCount(count + 1)}>{count}</button>\n\n      {children}\n    </>\n  )\n}\n```\n\n`<ClientComponent>` doesn't know that `children` will eventually be filled in by the result of a Server Component. The only responsibility `<ClientComponent>` has is to decide **where** `children` will eventually be placed.\n\nIn a parent Server Component, you can import both the `<ClientComponent>` and `<ServerComponent>` and pass `<ServerComponent>` as a child of `<ClientComponent>`:\n\n```tsx filename=\"app/page.tsx\"  highlight={11} switcher\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n\n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" highlight={11} switcher\n// This pattern works:\n// You can pass a Server Component as a child or prop of a\n// Client Component.\nimport ClientComponent from './client-component'\nimport ServerComponent from './server-component'\n\n// Pages in Next.js are Server Components by default\nexport default function Page() {\n  return (\n    <ClientComponent>\n      <ServerComponent />\n    </ClientComponent>\n  )\n}\n```\n\nWith this approach, `<ClientComponent>` and `<ServerComponent>` are decoupled and can be rendered independently. In this case, the child `<ServerComponent>` can be rendered on the server, well before `<ClientComponent>` is rendered on the client.\n\n> **Good to know:**\n>\n> - The pattern of \"lifting content up\" has been used to avoid re-rendering a nested child component when a parent component re-renders.\n> - You're not limited to the `children` prop. You can use any prop to pass JSX.\n", "01-building-your-application/09-authentication/index.mdx": "---\ntitle: Authentication\ndescription: Learn how to implement authentication in your Next.js application.\n---\n\nUnderstanding authentication is crucial for protecting your application's data. This page will guide you through what React and Next.js features to use to implement auth.\n\nBefore starting, it helps to break down the process into three concepts:\n\n1. **[Authentication](#authentication)**: Verifies if the user is who they say they are. It requires the user to prove their identity with something they have, such as a username and password.\n2. **[Session Management](#session-management)**: Tracks the user's auth state across requests.\n3. **[Authorization](#authorization)**: Decides what routes and data the user can access.\n\nThis diagram shows the authentication flow using React and Next.js features:\n\n<Image\n  alt=\"Diagram showing the authentication flow with React and Next.js features\"\n  srcLight=\"/docs/light/authentication-overview.png\"\n  srcDark=\"/docs/dark/authentication-overview.png\"\n  width=\"1600\"\n  height=\"1383\"\n/>\n\nThe examples on this page walk through basic username and password auth for educational purposes. While you can implement a custom auth solution, for increased security and simplicity, we recommend using an authentication library. These offer built-in solutions for authentication, session management, and authorization, as well as additional features such as social logins, multi-factor authentication, and role-based access control. You can find a list in the [Auth Libraries](#auth-libraries) section.\n\n## Authentication\n\n<AppOnly>\n\n### Sign-up and login functionality\n\nYou can use the [`<form>`](https://react.dev/reference/react-dom/components/form) element with React's [Server Actions](/docs/app/building-your-application/rendering/server-components), [`useFormStatus()`](https://react.dev/reference/react-dom/hooks/useFormStatus), and [`useFormState()`](https://react.dev/reference/react-dom/hooks/useFormState) to capture user credentials, validate form fields, and call your Authentication Provider's API or database.\n\nSince Server Actions always execute on the server, they provide a secure environment for handling authentication logic.\n\nHere are the steps to implement signup/login functionality:\n\n#### 1. Capture user credentials\n\nTo capture user credentials, create a form that invokes a Server Action on submission. For example, a signup form that accepts the user's name, email, and password:\n\n```tsx filename=\"app/ui/signup-form.tsx\" switcher\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  return (\n    <form action={signup}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n```jsx filename=\"app/ui/signup-form.js\" switcher\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  return (\n    <form action={signup}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" type=\"email\" placeholder=\"Email\" />\n      </div>\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      <button type=\"submit\">Sign Up</button>\n    </form>\n  )\n}\n```\n\n```tsx filename=\"app/actions/auth.tsx\" switcher\nexport async function signup(formData: FormData) {}\n```\n\n```jsx filename=\"app/actions/auth.js\" switcher\nexport async function signup(formData) {}\n```\n\n#### 2. Validate form fields on the server\n\nUse the Server Action to validate the form fields on the server. If your authentication provider doesn't provide form validation, you can use a schema validation library like [Zod](https://zod.dev/) or [Yup](https://github.com/jquense/yup).\n\nUsing Zod as an example, you can define a form schema with appropriate error messages:\n\n```ts filename=\"app/lib/definitions.ts\" switcher\nimport { z } from 'zod'\n\nexport const SignupFormSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name must be at least 2 characters long.' })\n    .trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  password: z\n    .string()\n    .min(8, { message: 'Be at least 8 characters long' })\n    .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n    .regex(/[0-9]/, { message: 'Contain at least one number.' })\n    .regex(/[^a-zA-Z0-9]/, {\n      message: 'Contain at least one special character.',\n    })\n    .trim(),\n})\n\nexport type FormState =\n  | {\n      errors?: {\n        name?: string[]\n        email?: string[]\n        password?: string[]\n      }\n      message?: string\n    }\n  | undefined\n```\n\n```js filename=\"app/lib/definitions.js\" switcher\nimport { z } from 'zod'\n\nexport const SignupFormSchema = z.object({\n  name: z\n    .string()\n    .min(2, { message: 'Name must be at least 2 characters long.' })\n    .trim(),\n  email: z.string().email({ message: 'Please enter a valid email.' }).trim(),\n  password: z\n    .string()\n    .min(8, { message: 'Be at least 8 characters long' })\n    .regex(/[a-zA-Z]/, { message: 'Contain at least one letter.' })\n    .regex(/[0-9]/, { message: 'Contain at least one number.' })\n    .regex(/[^a-zA-Z0-9]/, {\n      message: 'Contain at least one special character.',\n    })\n    .trim(),\n})\n```\n\nTo prevent unnecessary calls to your authentication provider's API or database, you can `return` early in the Server Action if any form fields do not match the defined schema.\n\n```ts filename=\"app/actions/auth.ts\" switcher\nimport { SignupFormSchema, FormState } from '@/app/lib/definitions'\n\nexport async function signup(state: FormState, formData) {\n  // Validate form fields\n  const validatedFields = SignupFormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n\n  // If any form fields are invalid, return early\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Call the provider or db to create a user...\n}\n```\n\n```js filename=\"app/actions/auth.js\" switcher\nimport { SignupFormSchema } from '@/app/lib/definitions'\n\nexport async function signup(state, formData) {\n  // Validate form fields\n  const validatedFields = SignupFormSchema.safeParse({\n    name: formData.get('name'),\n    email: formData.get('email'),\n    password: formData.get('password'),\n  })\n\n  // If any form fields are invalid, return early\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Call the provider or db to create a user...\n}\n```\n\nBack in your `<SignupForm />`, you can use React's `useFormState()` hook to display validation errors to the user:\n\n```tsx filename=\"app/ui/signup-form.tsx\" switcher highlight={7,15,21,27-36}\n'use client'\n\nimport { useFormState } from 'react-dom'\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  const [state, action] = useFormState(signup, undefined)\n\n  return (\n    <form action={action}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"Name\" />\n      </div>\n      {state?.errors?.name && <p>{state.errors.name}</p>}\n\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" placeholder=\"Email\" />\n      </div>\n      {state?.errors?.email && <p>{state.errors.email}</p>}\n\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      {state?.errors?.password && (\n        <div>\n          <p>Password must:</p>\n          <ul>\n            {state.errors.password.map((error) => (\n              <li key={error}>- {error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <SignupButton />\n    </form>\n  )\n}\n```\n\n```jsx filename=\"app/ui/signup-form.js\" switcher highlight={7,15,21,27-36}\n'use client'\n\nimport { useFormState } from 'react-dom'\nimport { signup } from '@/app/actions/auth'\n\nexport function SignupForm() {\n  const [state, action] = useFormState(signup, undefined)\n\n  return (\n    <form action={action}>\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <input id=\"name\" name=\"name\" placeholder=\"John Doe\" />\n      </div>\n      {state.errors.name && <p>{state.errors.name}</p>}\n\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" name=\"email\" placeholder=\"john@example.com\" />\n      </div>\n      {state.errors.email && <p>{state.errors.email}</p>}\n\n      <div>\n        <label htmlFor=\"password\">Password</label>\n        <input id=\"password\" name=\"password\" type=\"password\" />\n      </div>\n      {state.errors.password && (\n        <div>\n          <p>Password must:</p>\n          <ul>\n            {state.errors.password.map((error) => (\n              <li key={error}>- {error}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n      <SignupButton />\n    </form>\n  )\n}\n```\n\nYou can also use the `useFormStatus()` hook to handle the pending state on form submission:\n\n```tsx filename=\"app/ui/signup-form.tsx\" highlight={7} switcher\n'use client'\n\nimport { useFormStatus, useFormState } from 'react-dom'\n\nexport function SignupButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button aria-disabled={pending} type=\"submit\">\n      {pending ? 'Submitting...' : 'Sign up'}\n    </button>\n  )\n}\n```\n\n```jsx filename=\"app/ui/signup-form.js\"  highlight={7} switcher\n'use client'\n\nimport { useFormStatus, useFormState } from 'react-dom'\n\nexport function SignupButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button aria-disabled={pending} type=\"submit\">\n      {pending ? 'Submitting...' : 'Sign up'}\n    </button>\n  )\n}\n```\n\n> **Good to know:** `useFormStatus()` must be called from a component that is rendered inside a `<form>`. See the [React Docs](https://react.dev/reference/react-dom/hooks/useFormStatus#usage) for more information.\n\n#### 3. Create a user or check user credentials\n\nAfter validating form fields, you can create a new user account or check if the user exists by calling your authentication provider's API or database.\n\nContinuing from the previous example:\n\n```tsx filename=\"app/actions/auth.tsx\" switcher\nexport async function signup(state: FormState, formData: FormData) {\n  // 1. Validate form fields\n  // ...\n\n  // 2. Prepare data for insertion into database\n  const { name, email, password } = validatedFields.data\n  // e.g. Hash the user's password before storing it\n  const hashedPassword = await bcrypt.hash(password, 10)\n\n  // 3. Insert the user into the database or call an Auth Library's API\n  const data = await db\n    .insert(users)\n    .values({\n      name,\n      email,\n      password: hashedPassword,\n    })\n    .returning({ id: users.id })\n\n  const user = data[0]\n\n  if (!user) {\n    return {\n      message: 'An error occurred while creating your account.',\n    }\n  }\n\n  // TODO:\n  // 4. Create user session\n  // 5. Redirect user\n}\n```\n\n```jsx filename=\"app/actions/auth.js\" switcher\nexport async function signup(state, formData) {\n  // 1. Validate form fields\n  // ...\n\n  // 2. Prepare data for insertion into database\n  const { name, email, password } = validatedFields.data\n  // e.g. Hash the user's password before storing it\n  const hashedPassword = await bcrypt.hash(password, 10)\n\n  // 3. Insert the user into the database or call an Library API\n  const data = await db\n    .insert(users)\n    .values({\n      name,\n      email,\n      password: hashedPassword,\n    })\n    .returning({ id: users.id })\n\n  const user = data[0]\n\n  if (!user) {\n    return {\n      message: 'An error occurred while creating your account.',\n    }\n  }\n\n  // TODO:\n  // 4. Create user session\n  // 5. Redirect user\n}\n```\n\nAfter successfully creating the user account or verifying the user credentials, you can create a session to manage the user's auth state. Depending on your session management strategy, the session can be stored in a cookie or database, or both. Continue to the [Session Management](#session-management) section to learn more.\n\n> **Tips:**\n>\n> - The example above is verbose since it breaks down the authentication steps for the purpose of education. This highlights that implementing your own secure solution can quickly become complex. Consider using an [Auth Library](#auth-libraries) to simplify the process.\n> - To improve the user experience, you may want to check for duplicate emails or usernames earlier in the registration flow. For example, as the user types in a username or the input field loses focus. This can help prevent unnecessary form submissions and provide immediate feedback to the user. You can debounce requests with libraries such as [use-debounce](https://www.npmjs.com/package/use-debounce) to manage the frequency of these checks.\n\n</AppOnly>\n\n<PagesOnly>\n\nHere are the steps to implement a sign-up and/or login form:\n\n1. The user submits their credentials through a form.\n2. The form sends a request that is handled by an API route.\n3. Upon successful verification, the process is completed, indicating the user's successful authentication.\n4. If verification is unsuccessful, an error message is shown.\n\nConsider a login form where users can input their credentials:\n\n```tsx filename=\"pages/login.tsx\" switcher\nimport { FormEvent } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function LoginPage() {\n  const router = useRouter()\n\n  async function handleSubmit(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email')\n    const password = formData.get('password')\n\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (response.ok) {\n      router.push('/profile')\n    } else {\n      // Handle errors\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\n```jsx filename=\"pages/login.jsx\" switcher\nimport { FormEvent } from 'react'\nimport { useRouter } from 'next/router'\n\nexport default function LoginPage() {\n  const router = useRouter()\n\n  async function handleSubmit(event) {\n    event.preventDefault()\n\n    const formData = new FormData(event.currentTarget)\n    const email = formData.get('email')\n    const password = formData.get('password')\n\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    })\n\n    if (response.ok) {\n      router.push('/profile')\n    } else {\n      // Handle errors\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n      <input type=\"password\" name=\"password\" placeholder=\"Password\" required />\n      <button type=\"submit\">Login</button>\n    </form>\n  )\n}\n```\n\nThe form above has two input fields for capturing the user's email and password. On submission, it triggers a function that sends a POST request to an API route (`/api/auth/login`).\n\nYou can then call your Authentication Provider's API in the API route to handle authentication:\n\n```ts filename=\"pages/api/auth/login.ts\" switcher\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport { signIn } from '@/auth'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const { email, password } = req.body\n    await signIn('credentials', { email, password })\n\n    res.status(200).json({ success: true })\n  } catch (error) {\n    if (error.type === 'CredentialsSignin') {\n      res.status(401).json({ error: 'Invalid credentials.' })\n    } else {\n      res.status(500).json({ error: 'Something went wrong.' })\n    }\n  }\n}\n```\n\n```js filename=\"pages/api/auth/login.js\" switcher\nimport { signIn } from '@/auth'\n\nexport default async function handler(req, res) {\n  try {\n    const { email, password } = req.body\n    await signIn('credentials', { email, password })\n\n    res.status(200).json({ success: true })\n  } catch (error) {\n    if (error.type === 'CredentialsSignin') {\n      res.status(401).json({ error: 'Invalid credentials.' })\n    } else {\n      res.status(500).json({ error: 'Something went wrong.' })\n    }\n  }\n}\n```\n\n</PagesOnly>\n\n## Session Management\n\nSession management ensures that the user's authenticated state is preserved across requests. It involves creating, storing, refreshing, and deleting sessions or tokens.\n\nThere are two types of sessions:\n\n1. [**Stateless**](#stateless-sessions): Session data (or a token) is stored in the browser's cookies. The cookie is sent with each request, allowing the session to be verified on the server. This method is simpler, but can be less secure if not implemented correctly.\n2. [**Database**](#database-sessions): Session data is stored in a database, with the user's browser only receiving the encrypted session ID. This method is more secure, but can be complex and use more server resources.\n\n> **Good to know:** While you can use either method, or both, we recommend using session management library such as [iron-session](https://github.com/vvo/iron-session) or [Jose](https://github.com/panva/jose).\n\n### Stateless Sessions\n\n<AppOnly>\n\nTo create and manage stateless sessions, there are a few steps you need to follow:\n\n1. Generate a secret key, which will be used to sign your session, and store it as an [environment variable](/docs/app/building-your-application/configuring/environment-variables).\n2. Write logic to encrypt/decrypt session data using a session management library.\n3. Manage cookies using the Next.js [`cookies()`](/docs/app/api-reference/functions/cookies) API.\n\nIn addition to the above, consider adding functionality to [update (or refresh)](#updating-or-refreshing-sessions) the session when the user returns to the application, and [delete](#deleting-the-session) the session when the user logs out.\n\n> **Good to know:** Check if your [auth library](#auth-libraries) includes session management.\n\n#### 1. Generating a secret key\n\nThere are a few ways you can generate secret key to sign your session. For example, you may choose to use the `openssl` command in your terminal:\n\n```bash filename=\"terminal\"\nopenssl rand -base64 32\n```\n\nThis command generates a 32-character random string that you can use as your secret key and store in your [environment variables file](/docs/app/building-your-application/configuring/environment-variables):\n\n```bash filename=\".env\"\nSESSION_SECRET=your_secret_key\n```\n\nYou can then reference this key in your session management logic:\n\n```js filename=\"app/lib/session.js\"\nconst secretKey = process.env.SESSION_SECRET\n```\n\n#### 2. Encrypting and decrypting sessions\n\nNext, you can use your preferred [session management library](#session-management-libraries) to encrypt and decrypt sessions. Continuing from the previous example, we'll use [Jose](https://www.npmjs.com/package/jose) (compatible with the [Edge Runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes)) and React's [`server-only`](https://www.npmjs.com/package/server-only) package to ensure that your session management logic is only executed on the server.\n\n```tsx filename=\"app/lib/session.ts\" switcher\nimport 'server-only'\nimport { SignJWT, jwtVerify } from 'jose'\nimport { SessionPayload } from '@/app/lib/definitions'\n\nconst secretKey = process.env.SESSION_SECRET\nconst encodedKey = new TextEncoder().encode(secretKey)\n\nexport async function encrypt(payload: SessionPayload) {\n  return new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey)\n}\n\nexport async function decrypt(session: string | undefined = '') {\n  try {\n    const { payload } = await jwtVerify(session, encodedKey, {\n      algorithms: ['HS256'],\n    })\n    return payload\n  } catch (error) {\n    console.log('Failed to verify session')\n  }\n}\n```\n\n```jsx filename=\"app/lib/session.js\" switcher\nimport 'server-only'\nimport { SignJWT, jwtVerify } from 'jose'\n\nconst secretKey = process.env.SESSION_SECRET\nconst encodedKey = new TextEncoder().encode(secretKey)\n\nexport async function encrypt(payload) {\n  return new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey)\n}\n\nexport async function decrypt(session) {\n  try {\n    const { payload } = await jwtVerify(session, encodedKey, {\n      algorithms: ['HS256'],\n    })\n    return payload\n  } catch (error) {\n    console.log('Failed to verify session')\n  }\n}\n```\n\n> **Tips**:\n>\n> - The payload should contain the **minimum**, unique user data that'll be used in subsequent requests, such as the user's ID, role, etc. It should not contain personally identifiable information like phone number, email address, credit card information, etc, or sensitive data like passwords.\n\n#### 3. Setting cookies (recommended options)\n\nTo store the session in a cookie, use the Next.js [`cookies()`](/docs/app/api-reference/functions/cookies) API. The cookie should be set on the server, and include the recommended options:\n\n- **HttpOnly**: Prevents client-side JavaScript from accessing the cookie.\n- **Secure**: Use https to send the cookie.\n- **SameSite**: Specify whether the cookie can be sent with cross-site requests.\n- **Max-Age or Expires**: Delete the cookie after a certain period.\n- **Path**: Define the URL path for the cookie.\n\nPlease refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies) for more information on each of these options.\n\n```ts filename=\"app/lib/session.ts\" switcher\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport async function createSession(userId: string) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  const session = await encrypt({ userId, expiresAt })\n\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n```js filename=\"app/lib/session.js\" switcher\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport async function createSession(userId) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  const session = await encrypt({ userId, expiresAt })\n\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\nBack in your Server Action, you can invoke the `createSession()` function, and use the [`redirect()`](/docs/app/building-your-application/routing/redirecting) API to redirect the user to the appropriate page:\n\n```ts filename=\"app/actions/auth.ts\" switcher\nimport { createSession } from '@/app/lib/session'\n\nexport async function signup(state: FormState, formData: FormData) {\n  // Previous steps:\n  // 1. Validate form fields\n  // 2. Prepare data for insertion into database\n  // 3. Insert the user into the database or call an Library API\n\n  // Current steps:\n  // 4. Create user session\n  await createSession(user.id)\n  // 5. Redirect user\n  redirect('/profile')\n}\n```\n\n```js filename=\"app/actions/auth.js\" switcher\nimport { createSession } from '@/app/lib/session'\n\nexport async function signup(state, formData) {\n  // Previous steps:\n  // 1. Validate form fields\n  // 2. Prepare data for insertion into database\n  // 3. Insert the user into the database or call an Library API\n\n  // Current steps:\n  // 4. Create user session\n  await createSession(user.id)\n  // 5. Redirect user\n  redirect('/profile')\n}\n```\n\n> **Tips**:\n>\n> - **Cookies should be set on the server** to prevent client-side tampering.\n> - \ud83c\udfa5 Watch: Learn more about stateless sessions and authentication with Next.js \u2192 [YouTube (11 minutes)](https://www.youtube.com/watch?v=DJvM2lSPn6w).\n\n#### Updating (or refreshing) sessions\n\nYou can also extend the session's expiration time. This is useful for keeping the user logged in after they access the application again. For example:\n\n```ts filename=\"app/lib/session.ts\" switcher\nimport 'server-only'\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport async function updateSession() {\n  const session = cookies().get('session')?.value\n  const payload = await decrypt(session)\n\n  if (!session || !payload) {\n    return null\n  }\n\n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expires,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n```js filename=\"app/lib/session.js\" switcher\nimport 'server-only'\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport async function updateSession() {\n  const session = cookies().get('session').value\n  const payload = await decrypt(session)\n\n  if (!session || !payload) {\n    return null\n  }\n\n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expires,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n> **Tip:** Check if your auth library supports refresh tokens, which can be used to extend the user's session.\n\n#### Deleting the session\n\nTo delete the session, you can delete the cookie:\n\n```ts filename=\"app/lib/session.ts\" switcher\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport function deleteSession() {\n  cookies().delete('session')\n}\n```\n\n```js filename=\"app/lib/session.js\" switcher\nimport 'server-only'\nimport { cookies } from 'next/headers'\n\nexport function deleteSession() {\n  cookies().delete('session')\n}\n```\n\nThen you can reuse the `deleteSession()` function in your application, for example, on logout:\n\n```ts filename=\"app/actions/auth.ts\" switcher\nimport { cookies } from 'next/headers'\nimport { deleteSession } from '@/app/lib/session'\n\nexport async function logout() {\n  deleteSession()\n  redirect('/login')\n}\n```\n\n```js filename=\"app/actions/auth.js\" switcher\nimport { cookies } from 'next/headers'\nimport { deleteSession } from '@/app/lib/session'\n\nexport async function logout() {\n  deleteSession()\n  redirect('/login')\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n#### Setting and deleting cookies\n\nYou can use [API Routes](/docs/pages/building-your-application/routing/api-routes) to set the session as a cookie on the server:\n\n```ts filename=\"pages/api/login.ts\" switcher\nimport { serialize } from 'cookie'\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport { encrypt } from '@/app/lib/session'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n\n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\n```\n\n```js filename=\"pages/api/login.js\" switcher\nimport { serialize } from 'cookie'\nimport { encrypt } from '@/app/lib/session'\n\nexport default function handler(req, res) {\n  const sessionData = req.body\n  const encryptedSessionData = encrypt(sessionData)\n\n  const cookie = serialize('session', encryptedSessionData, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 60 * 60 * 24 * 7, // One week\n    path: '/',\n  })\n  res.setHeader('Set-Cookie', cookie)\n  res.status(200).json({ message: 'Successfully set cookie!' })\n}\n```\n\n</PagesOnly>\n\n### Database Sessions\n\nTo create and manage database sessions, you'll need to follow these steps:\n\n1. Create a table in your database to store session and data (or check if your Auth Library handles this).\n2. Implement functionality to insert, update, and delete sessions\n3. Encrypt the session ID before storing it in the user's browser, and ensure the database and cookie stay in sync (this is optional, but recommended for optimistic auth checks in [Middleware](#optimistic-checks-with-middleware-optional)).\n\n<AppOnly>\n\nFor example:\n\n```ts filename=\"app/lib/session.ts\" switcher\nimport cookies from 'next/headers'\nimport { db } from '@/app/lib/db'\nimport { encrypt } from '@/app/lib/session'\n\nexport async function createSession(id: number) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n\n  // 1. Create a session in the database\n  const data = await db\n    .insert(sessions)\n    .values({\n      userId: id,\n      expiresAt,\n    })\n    // Return the session ID\n    .returning({ id: sessions.id })\n\n  const sessionId = data[0].id\n\n  // 2. Encrypt the session ID\n  const session = await encrypt({ sessionId, expiresAt })\n\n  // 3. Store the session in cookies for optimistic auth checks\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n```js filename=\"app/lib/session.js\" switcher\nimport cookies from 'next/headers'\nimport { db } from '@/app/lib/db'\nimport { encrypt } from '@/app/lib/session'\n\nexport async function createSession(id) {\n  const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)\n\n  // 1. Create a session in the database\n  const data = await db\n    .insert(sessions)\n    .values({\n      userId: id,\n      expiresAt,\n    })\n    // Return the session ID\n    .returning({ id: sessions.id })\n\n  const sessionId = data[0].id\n\n  // 2. Encrypt the session ID\n  const session = await encrypt({ sessionId, expiresAt })\n\n  // 3. Store the session in cookies for optimistic auth checks\n  cookies().set('session', session, {\n    httpOnly: true,\n    secure: true,\n    expires: expiresAt,\n    sameSite: 'lax',\n    path: '/',\n  })\n}\n```\n\n> **Tips**:\n>\n> - For faster data retrieval, consider using a database like [Vercel Redis](https://vercel.com/docs/storage/vercel-kv). However, you can also keep the session data in your primary database, and combine data requests to reduce the number of queries.\n> - You may opt to use database sessions for more advanced use cases, such as keeping track of the last time a user logged in, or number of active devices, or give users the ability to log out of all devices.\n\nAfter implementing session management, you'll need to add authorization logic to control what users can access and do within your application. Continue to the [Authorization](#authorization) section to learn more.\n\n</AppOnly>\n\n<PagesOnly>\n\n**Creating a Session on the Server**:\n\n```ts filename=\"pages/api/create-session.ts\" switcher\nimport db from '../../lib/db'\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n\n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\n```\n\n```js filename=\"pages/api/create-session.js\" switcher\nimport db from '../../lib/db'\n\nexport default async function handler(req, res) {\n  try {\n    const user = req.body\n    const sessionId = generateSessionId()\n    await db.insertSession({\n      sessionId,\n      userId: user.id,\n      createdAt: new Date(),\n    })\n\n    res.status(200).json({ sessionId })\n  } catch (error) {\n    res.status(500).json({ error: 'Internal Server Error' })\n  }\n}\n```\n\n</PagesOnly>\n\n## Authorization\n\nOnce a user is authenticated and a session is created, you can implement authorization to control what the user can access and do within your application.\n\nThere are two main types of authorization checks:\n\n1. **Optimistic**: Checks if the user is authorized to access a route or perform an action using the session data stored in the cookie. These checks are useful for quick operations, such as showing/hiding UI elements or redirecting users based on permissions or roles.\n2. **Secure**: Checks if the user is authorized to access a route or perform an action using the session data stored in the database. These checks are more secure and are used for operations that require access to sensitive data or actions.\n\nFor both cases, we recommend:\n\n- Creating a [Data Access Layer](#creating-a-data-access-layer-dal) to centralize your authorization logic\n- Using [Data Transfer Objects (DTO)](#using-data-transfer-objects-dto) to only return the necessary data\n- Optionally use [Middleware](#optimistic-checks-with-middleware-optional) to perform optimistic checks.\n\n### Optimistic checks with Middleware (Optional)\n\nThere are some cases where you may want to use [Middleware](/docs/app/building-your-application/routing/middleware) and redirect users based on permissions:\n\n- To perform optimistic checks. Since Middleware runs on every route, it's a good way to centralize redirect logic and pre-filter unauthorized users.\n- To protect static routes that share data between users (e.g. content behind a paywall).\n\nHowever, since Middleware runs on every route, including [prefetched](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) routes, it's important to only read the session from the cookie (optimistic checks), and avoid database checks to prevent performance issues.\n\nFor example:\n\n```tsx filename=\"middleware.ts\" switcher\nimport { NextRequest, NextResponse } from 'next/server'\nimport { decrypt } from '@/app/lib/session'\nimport { cookies } from 'next/headers'\n\n// 1. Specify protected and public routes\nconst protectedRoutes = ['/dashboard']\nconst publicRoutes = ['/login', '/signup', '/']\n\nexport default async function middleware(req: NextRequest) {\n  // 2. Check if the current route is protected or public\n  const path = req.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.includes(path)\n  const isPublicRoute = publicRoutes.includes(path)\n\n  // 3. Decrypt the session from the cookie\n  const cookie = cookies().get('session')?.value\n  const session = await decrypt(cookie)\n\n  // 5. Redirect to /login if the user is not authenticated\n  if (isProtectedRoute && !session?.userId) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl))\n  }\n\n  // 6. Redirect to /dashboard if the user is authenticated\n  if (\n    isPublicRoute &&\n    session?.userId &&\n    !req.nextUrl.pathname.startsWith('/dashboard')\n  ) {\n    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))\n  }\n\n  return NextResponse.next()\n}\n\n// Routes Middleware should not run on\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\nimport { decrypt } from '@/app/lib/session'\nimport { cookies } from 'next/headers'\n\n// 1. Specify protected and public routes\nconst protectedRoutes = ['/dashboard']\nconst publicRoutes = ['/login', '/signup', '/']\n\nexport default async function middleware(req) {\n  // 2. Check if the current route is protected or public\n  const path = req.nextUrl.pathname\n  const isProtectedRoute = protectedRoutes.includes(path)\n  const isPublicRoute = publicRoutes.includes(path)\n\n  // 3. Decrypt the session from the cookie\n  const cookie = cookies().get('session')?.value\n  const session = await decrypt(cookie)\n\n  // 5. Redirect to /login if the user is not authenticated\n  if (isProtectedRoute && !session?.userId) {\n    return NextResponse.redirect(new URL('/login', req.nextUrl))\n  }\n\n  // 6. Redirect to /dashboard if the user is authenticated\n  if (\n    isPublicRoute &&\n    session?.userId &&\n    !req.nextUrl.pathname.startsWith('/dashboard')\n  ) {\n    return NextResponse.redirect(new URL('/dashboard', req.nextUrl))\n  }\n\n  return NextResponse.next()\n}\n\n// Routes Middleware should not run on\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|.*\\\\.png$).*)'],\n}\n```\n\nWhile Middleware can be useful for initial checks, it should not be your only line of defense in protecting your data. The majority of security checks should be performed as close as possible to your data source, see [Data Access Layer](#creating-a-data-access-layer-dal) for more information.\n\n> **Tips**:\n>\n> - In Middleware, you can also read cookies using `req.cookies.get('session).value`.\n> - Middleware uses the [Edge Runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes), check if your Auth library and session management library are compatible.\n> - You can use the `matcher` property in the Middleware to specify which routes Middleware should run on. Although, for auth, it's recommended Middleware runs on all routes.\n\n<AppOnly>\n\n### Creating a Data Access Layer (DAL)\n\nWe recommend creating a DAL to centralize your data requests and authorization logic.\n\nThe DAL should include a function that verifies the user's session as they interact with your application. At the very least, the function should check if the session is valid, then redirect or return the user information needed to make further requests.\n\nFor example, create a separate file for your DAL that includes a `verifySession()` function. Then use React's [cache](https://react.dev/reference/react/cache) API to memoize the return value of the function during a React render pass:\n\n```tsx filename=\"app/lib/dal.ts\" switcher\nimport 'server-only'\n\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport const verifySession = cache(async () => {\n  const cookie = cookies().get('session')?.value\n  const session = await decrypt(cookie)\n\n  if (!session?.userId) {\n    redirect('/login')\n  }\n\n  return { isAuth: true, userId: session.userId }\n})\n```\n\n```js filename=\"app/lib/dal.js\" switcher\nimport 'server-only'\n\nimport { cookies } from 'next/headers'\nimport { decrypt } from '@/app/lib/session'\n\nexport const verifySession = cache(async () => {\n  const cookie = cookies().get('session').value\n  const session = await decrypt(cookie)\n\n  if (!session.userId) {\n    redirect('/login')\n  }\n\n  return { isAuth: true, userId: session.userId }\n})\n```\n\nYou can then invoke the `verifySession()` function in your data requests, Server Actions, Route Handlers:\n\n```tsx filename=\"app/lib/dal.ts\" switcher\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  try {\n    const data = await db.query.users.findMany({\n      where: eq(users.id, session.userId),\n      // Explicitly return the columns you need rather than the whole user object\n      columns: {\n        id: true,\n        name: true,\n        email: true,\n      },\n    })\n\n    const user = data[0]\n\n    return user\n  } catch (error) {\n    console.log('Failed to fetch user')\n    return null\n  }\n})\n```\n\n```jsx filename=\"app/lib/dal.js\" switcher\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  try {\n    const data = await db.query.users.findMany({\n      where: eq(users.id, session.userId),\n      // Explicitly return the columns you need rather than the whole user object\n      columns: {\n        id: true,\n        name: true,\n        email: true,\n      },\n    })\n\n    const user = data[0]\n\n    return user\n  } catch (error) {\n    console.log('Failed to fetch user')\n    return null\n  }\n})\n```\n\n> **Tip**:\n>\n> - A DAL can be used to protect data fetched at request time. However, for static routes that share data between users, data will be fetched at build time and not at request time. Use [Middleware](#optimistic-checks-with-middleware-optional) to protect static routes.\n> - For secure checks, you can check if the session is valid by comparing the session ID with your database. Use React's [cache](https://react.dev/reference/react/cache) function to avoid unnecessary duplicate requests to the database during a render pass.\n> - You may wish to consolidate related data requests in a JavaScript class that runs `verifySession()` before any methods.\n\n### Using Data Transfer Objects (DTO)\n\nWhen retrieving data, it's recommended you return only the necessary data that will be used in your application, and not entire objects. For example, if you're fetching user data, you might only return the user's ID and name, rather than the entire user object which could contain passwords, phone numbers, etc.\n\nHowever, if you have no control over the returned data structure, or are working in a team where you want to avoid whole objects being passed to the client, you can use strategies such as specifying what fields are safe to be exposed to the client.\n\n```tsx filename=\"app/lib/dto.ts\" switcher\nimport 'server-only'\nimport { getUser } from '@/app/lib/dal'\n\nfunction canSeeUsername(viewer: User) {\n  return true\n}\n\nfunction canSeePhoneNumber(viewer: User, team: string) {\n  return viewer.isAdmin || team === viewer.team\n}\n\nexport async function getProfileDTO(slug: string) {\n  const data = await db.query.users.findMany({\n    where: eq(users.slug, slug),\n    // Return specific columns here\n  })\n  const user = data[0]\n\n  const currentUser = await getUser(user.id)\n\n  // Or return only what's specific to the query here\n  return {\n    username: canSeeUsername(currentUser) ? user.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, user.team)\n      ? user.phonenumber\n      : null,\n  }\n}\n```\n\n```js filename=\"app/lib/dto.js\" switcher\nimport 'server-only'\nimport { getUser } from '@/app/lib/dal'\n\nfunction canSeeUsername(viewer) {\n  return true\n}\n\nfunction canSeePhoneNumber(viewer, team) {\n  return viewer.isAdmin || team === viewer.team\n}\n\nexport async function getProfileDTO(slug) {\n  const data = await db.query.users.findMany({\n    where: eq(users.slug, slug),\n    // Return specific columns here\n  })\n  const user = data[0]\n\n  const currentUser = await getUser(user.id)\n\n  // Or return only what's specific to the query here\n  return {\n    username: canSeeUsername(currentUser) ? user.username : null,\n    phonenumber: canSeePhoneNumber(currentUser, user.team)\n      ? user.phonenumber\n      : null,\n  }\n}\n```\n\nBy centralizing your data requests and authorization logic in a DAL and using DTOs, you can ensure that all data requests are secure and consistent, making it easier to maintain, audit, and debug as your application scales.\n\n> **Good to know**:\n>\n> - There are a couple of different ways you can define a DTO, from using `toJSON()`, to individual functions like the example above, or JS classes. Since these are JavaScript patterns and not a React or Next.js feature, we recommend doing some research to find the best pattern for your application.\n> - Learn more about security best practices in our [Security in Next.js article](/blog/security-nextjs-server-components-actions).\n\n### Server Components\n\nAuth check in [Server Components](/docs/app/building-your-application/rendering/server-components) are useful for role-based access. For example, to conditionally render components based on the user's role:\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\nimport { verifySession } from '@/app/lib/dal'\n\nexport default function Dashboard() {\n  const session = await verifySession()\n  const userRole = session?.user?.role // Assuming 'role' is part of the session object\n\n  if (userRole === 'admin') {\n    return <AdminDashboard />\n  } else if (userRole === 'user') {\n    return <UserDashboard />\n  } else {\n    redirect('/login')\n  }\n}\n```\n\n```jsx filename=\"app/dashboard/page.jsx\" switcher\nimport { verifySession } from '@/app/lib/dal'\n\nexport default function Dashboard() {\n  const session = await verifySession()\n  const userRole = session.role // Assuming 'role' is part of the session object\n\n  if (userRole === 'admin') {\n    return <AdminDashboard />\n  } else if (userRole === 'user') {\n    return <UserDashboard />\n  } else {\n    redirect('/login')\n  }\n}\n```\n\nIn the example, we use the `verifySession()` function from our DAL to check for 'admin', 'user', and unauthorized roles. This pattern ensures that each user interacts only with components appropriate to their role.\n\n### Layouts and auth checks\n\nDue to [Partial Rendering](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering), be cautious when doing checks in [Layouts](/docs/app/building-your-application/routing/layouts-and-templates) as these don't re-render on navigation, meaning the user session won't be checked on every route change.\n\nInstead, you should do the checks close to your data source or the component that'll be conditionally rendered.\n\nFor example, consider a shared layout that fetches the user data and displays the user image in a nav. Instead of doing the auth check in the layout, you should fetch the user data (`getUser()`) in the layout and do the auth check in your DAL.\n\nThis guarantees that wherever `getUser()` is called within your application, the auth check is performed, and prevents developers forgetting to check the user is authorized to access the data.\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default async function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const user = await getUser();\n\n  return (\n    // ...\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default async function Layout({ children }) {\n  const user = await getUser();\n\n  return (\n    // ...\n  )\n}\n```\n\n```ts filename=\"app/lib/dal.ts\" switcher\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  // Get user ID from session and fetch data\n})\n```\n\n```js filename=\"app/lib/dal.js\" switcher\nexport const getUser = cache(async () => {\n  const session = await verifySession()\n  if (!session) return null\n\n  // Get user ID from session and fetch data\n})\n```\n\n> **Good to know:**\n>\n> - A common pattern in SPAs is to `return null` in a layout or a top-level component if a user is not authorized. This pattern is not **not recommended** since Next.js applications have multiple entry points, which will not prevent nested route segments and Server Actions from being accessed.\n\n### Server Actions\n\nTreat [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) with the same security considerations as public-facing API endpoints, and verify if the user is allowed to perform a mutation.\n\nIn the example below, we check the user's role before allowing the action to proceed:\n\n```ts filename=\"app/lib/actions.ts\" switcher\n'use server'\nimport { verifySession } from '@/app/lib/dal'\n\nexport async function serverAction(formData: FormData) {\n  const session = await verifySession()\n  const userRole = session?.user?.role\n\n  // Return early if user is not authorized to perform the action\n  if (userRole !== 'admin') {\n    return null\n  }\n\n  // Proceed with the action for authorized users\n}\n```\n\n```js filename=\"app/lib/actions.js\" switcher\n'use server'\nimport { verifySession } from '@/app/lib/dal'\n\nexport async function serverAction() {\n  const session = await verifySession()\n  const userRole = session.user.role\n\n  // Return early if user is not authorized to perform the action\n  if (userRole !== 'admin') {\n    return null\n  }\n\n  // Proceed with the action for authorized users\n}\n```\n\n### Route Handlers\n\nTreat [Route Handlers](/docs/app/building-your-application/routing/route-handlers) with the same security considerations as public-facing API endpoints, and verify if the user is allowed to access the Route Handler.\n\nFor example:\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { verifySession } from '@/app/lib/dal'\n\nexport async function GET() {\n  // User authentication and role verification\n  const session = await verifySession()\n\n  // Check if the user is authenticated\n  if (!session) {\n    // User is not authenticated\n    return new Response(null, { status: 401 })\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    // User is authenticated but does not have the right permissions\n    return new Response(null, { status: 403 })\n  }\n\n  // Continue for authorized users\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nimport { verifySession } from '@/app/lib/dal'\n\nexport async function GET() {\n  // User authentication and role verification\n  const session = await verifySession()\n\n  // Check if the user is authenticated\n  if (!session) {\n    // User is not authenticated\n    return new Response(null, { status: 401 })\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    // User is authenticated but does not have the right permissions\n    return new Response(null, { status: 403 })\n  }\n\n  // Continue for authorized users\n}\n```\n\nThe example above demonstrates a Route Handler with a two-tier security check. It first checks for an active session, and then verifies if the logged-in user is an 'admin'.\n\n## Context Providers\n\nUsing context providers for auth work due to [interleaving](/docs/app/building-your-application/rendering/composition-patterns#interleaving-server-and-client-components). However, React `context` is not supported in Server Components, making them only applicable to Client Components.\n\nThis works, but any child Server Components will be rendered on the server first, and will not have access to the context provider\u2019s session data:\n\n```tsx filename=\"app/layout.ts\" switcher\nimport { ContextProvider } from 'auth-lib'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <ContextProvider>{children}</ContextProvider>\n      </body>\n    </html>\n  )\n}\n```\n\n```tsx filename=\"app/ui/profile.ts switcher\n\"use client\";\n\nimport { useSession } from \"auth-lib\";\n\nexport default function Profile() {\n  const { userId } = useSession();\n  const { data } = useSWR(`/api/user/${userId}`, fetcher)\n\n  return (\n    // ...\n  );\n}\n```\n\n```jsx filename=\"app/ui/profile.js switcher\n\"use client\";\n\nimport { useSession } from \"auth-lib\";\n\nexport default function Profile() {\n  const { userId } = useSession();\n  const { data } = useSWR(`/api/user/${userId}`, fetcher)\n\n  return (\n    // ...\n  );\n}\n```\n\nIf session data is needed in Client Components (e.g. for client-side data fetching),use React\u2019s [`taintUniqueValue`](https://react.dev/reference/react/experimental_taintUniqueValue) API to prevent sensitive session data from being exposed to the client.\n\n</AppOnly>\n\n<PagesOnly>\n\n### Creating a Data Access Layer (DAL)\n\n#### Protecting API Routes\n\nAPI Routes in Next.js are essential for handling server-side logic and data management. It's crucial to secure these routes to ensure that only authorized users can access specific functionalities. This typically involves verifying the user's authentication status and their role-based permissions.\n\nHere's an example of securing an API Route:\n\n```ts filename=\"pages/api/route.ts\" switcher\nimport { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const session = await getSession(req)\n\n  // Check if the user is authenticated\n  if (!session) {\n    res.status(401).json({\n      error: 'User is not authenticated',\n    })\n    return\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    res.status(401).json({\n      error: 'Unauthorized access: User does not have admin privileges.',\n    })\n    return\n  }\n\n  // Proceed with the route for authorized users\n  // ... implementation of the API Route\n}\n```\n\n```js filename=\"pages/api/route.js\" switcher\nexport default async function handler(req, res) {\n  const session = await getSession(req)\n\n  // Check if the user is authenticated\n  if (!session) {\n    res.status(401).json({\n      error: 'User is not authenticated',\n    })\n    return\n  }\n\n  // Check if the user has the 'admin' role\n  if (session.user.role !== 'admin') {\n    res.status(401).json({\n      error: 'Unauthorized access: User does not have admin privileges.',\n    })\n    return\n  }\n\n  // Proceed with the route for authorized users\n  // ... implementation of the API Route\n}\n```\n\nThis example demonstrates an API Route with a two-tier security check for authentication and authorization. It first checks for an active session, and then verifies if the logged-in user is an 'admin'. This approach ensures secure access, limited to authenticated and authorized users, maintaining robust security for request processing.\n\n</PagesOnly>\n\n## Resources\n\nNow that you've learned about authentication in Next.js, here are Next.js-compatible libraries and resources to help you implement secure authentication and session management:\n\n### Auth Libraries\n\n- [Auth0](https://auth0.com/docs/quickstart/webapp/nextjs/01-login)\n- [Clerk](https://clerk.com/docs/quickstarts/nextjs)\n- [Kinde](https://kinde.com/docs/developer-tools/nextjs-sdk)\n- [Lucia](https://lucia-auth.com/getting-started/nextjs-app)\n- [NextAuth.js](https://authjs.dev/getting-started/installation?framework=next.js)\n- [Supabase](https://supabase.com/docs/guides/getting-started/quickstarts/nextjs)\n- [Stytch](https://stytch.com/docs/guides/quickstarts/nextjs)\n- [WorkOS](https://workos.com/docs/user-management)\n\n### Session Management Libraries\n\n- [Iron Session](https://github.com/vvo/iron-session)\n- [Jose](https://github.com/panva/jose)\n\n## Further Reading\n\nTo continue learning about authentication and security, check out the following resources:\n\n- [How to think about security in Next.js](/blog/security-nextjs-server-components-actions)\n- [Understanding XSS Attacks](https://vercel.com/guides/understanding-xss-attacks)\n- [Understanding CSRF Attacks](https://vercel.com/guides/understanding-csrf-attacks)\n- [The Copenhagen Book](https://thecopenhagenbook.com/)\n", "01-building-your-application/04-caching/index.mdx": "---\ntitle: Caching in Next.js\nnav_title: Caching\ndescription: An overview of caching mechanisms in Next.js.\n---\n\nNext.js improves your application's performance and reduces costs by caching rendering work and data requests. This page provides an in-depth look at Next.js caching mechanisms, the APIs you can use to configure them, and how they interact with each other.\n\n> **Good to know**: This page helps you understand how Next.js works under the hood but is **not** essential knowledge to be productive with Next.js. Most of Next.js' caching heuristics are determined by your API usage and have defaults for the best performance with zero or minimal configuration.\n\n## Overview\n\nHere's a high-level overview of the different caching mechanisms and their purpose:\n\n| Mechanism                                   | What                       | Where  | Purpose                                         | Duration                        |\n| ------------------------------------------- | -------------------------- | ------ | ----------------------------------------------- | ------------------------------- |\n| [Request Memoization](#request-memoization) | Return values of functions | Server | Re-use data in a React Component tree           | Per-request lifecycle           |\n| [Data Cache](#data-cache)                   | Data                       | Server | Store data across user requests and deployments | Persistent (can be revalidated) |\n| [Full Route Cache](#full-route-cache)       | HTML and RSC payload       | Server | Reduce rendering cost and improve performance   | Persistent (can be revalidated) |\n| [Router Cache](#router-cache)               | RSC Payload                | Client | Reduce server requests on navigation            | User session or time-based      |\n\nBy default, Next.js will cache as much as possible to improve performance and reduce cost. This means routes are **statically rendered** and data requests are **cached** unless you opt out. The diagram below shows the default caching behavior: when a route is statically rendered at build time and when a static route is first visited.\n\n<Image\n  alt=\"Diagram showing the default caching behavior in Next.js for the four mechanisms, with HIT, MISS and SET at build time and when a route is first visited.\"\n  srcLight=\"/docs/light/caching-overview.png\"\n  srcDark=\"/docs/dark/caching-overview.png\"\n  width=\"1600\"\n  height=\"1179\"\n/>\n\nCaching behavior changes depending on whether the route is statically or dynamically rendered, data is cached or uncached, and whether a request is part of an initial visit or a subsequent navigation. Depending on your use case, you can configure the caching behavior for individual routes and data requests.\n\n## Request Memoization\n\nReact extends the [`fetch` API](#fetch) to automatically **memoize** requests that have the same URL and options. This means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once.\n\n<Image\n  alt=\"Deduplicated Fetch Requests\"\n  srcLight=\"/docs/light/deduplicated-fetch-requests.png\"\n  srcDark=\"/docs/dark/deduplicated-fetch-requests.png\"\n  width=\"1600\"\n  height=\"857\"\n/>\n\nFor example, if you need to use the same data across a route (e.g. in a Layout, Page, and multiple components), you do not have to fetch data at the top of the tree, and forward props between components. Instead, you can fetch data in the components that need it without worrying about the performance implications of making multiple requests across the network for the same data.\n\n```tsx filename=\"app/example.tsx\" switcher\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n\n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n\n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n```\n\n```jsx filename=\"app/example.js\" switcher\nasync function getItem() {\n  // The `fetch` function is automatically memoized and the result\n  // is cached\n  const res = await fetch('https://.../item/1')\n  return res.json()\n}\n\n// This function is called twice, but only executed the first time\nconst item = await getItem() // cache MISS\n\n// The second call could be anywhere in your route\nconst item = await getItem() // cache HIT\n```\n\n**How Request Memoization Works**\n\n<Image\n  alt=\"Diagram showing how fetch memoization works during React rendering.\"\n  srcLight=\"/docs/light/request-memoization.png\"\n  srcDark=\"/docs/dark/request-memoization.png\"\n  width=\"1600\"\n  height=\"742\"\n/>\n\n- While rendering a route, the first time a particular request is called, its result will not be in memory and it'll be a cache `MISS`.\n- Therefore, the function will be executed, and the data will be fetched from the external source, and the result will be stored in memory.\n- Subsequent function calls of the request in the same render pass will be a cache `HIT`, and the data will be returned from memory without executing the function.\n- Once the route has been rendered and the rendering pass is complete, memory is \"reset\" and all request memoization entries are cleared.\n\n> **Good to know**:\n>\n> - Request memoization is a React feature, not a Next.js feature. It's included here to show how it interacts with the other caching mechanisms.\n> - Memoization only applies to the `GET` method in `fetch` requests.\n> - Memoization only applies to the React Component tree, this means:\n>   - It applies to `fetch` requests in `generateMetadata`, `generateStaticParams`, Layouts, Pages, and other Server Components.\n>   - It doesn't apply to `fetch` requests in Route Handlers as they are not a part of the React component tree.\n> - For cases where `fetch` is not suitable (e.g. some database clients, CMS clients, or GraphQL clients), you can use the [React `cache` function](#react-cache-function) to memoize functions.\n\n### Duration\n\nThe cache lasts the lifetime of a server request until the React component tree has finished rendering.\n\n### Revalidating\n\nSince the memoization is not shared across server requests and only applies during rendering, there is no need to revalidate it.\n\n### Opting out\n\nMemoization only applies to the `GET` method in `fetch` requests, other methods, such as `POST` and `DELETE`, are not memoized. This default behavior is a React optimization and we do not recommend opting out of it.\n\nTo manage individual requests, you can use the [`signal`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal) property from [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController). However, this will not opt requests out of memoization, rather, abort in-flight requests.\n\n```js filename=\"app/example.js\"\nconst { signal } = new AbortController()\nfetch(url, { signal })\n```\n\n## Data Cache\n\nNext.js has a built-in Data Cache that **persists** the result of data fetches across incoming **server requests** and **deployments**. This is possible because Next.js extends the native `fetch` API to allow each request on the server to set its own persistent caching semantics.\n\n> **Good to know**: In the browser, the `cache` option of `fetch` indicates how a request will interact with the browser's HTTP cache, in Next.js, the `cache` option indicates how a server-side request will interact with the server's Data Cache.\n\nBy default, data requests that use `fetch` are **cached**. You can use the [`cache`](#fetch-optionscache) and [`next.revalidate`](#fetch-optionsnextrevalidate) options of `fetch` to configure the caching behavior.\n\n**How the Data Cache Works**\n\n<Image\n  alt=\"Diagram showing how cached and uncached fetch requests interact with the Data Cache. Cached requests are stored in the Data Cache, and memoized, uncached requests are fetched from the data source, not stored in the Data Cache, and memoized.\"\n  srcLight=\"/docs/light/data-cache.png\"\n  srcDark=\"/docs/dark/data-cache.png\"\n  width=\"1600\"\n  height=\"661\"\n/>\n\n- The first time a `fetch` request is called during rendering, Next.js checks the Data Cache for a cached response.\n- If a cached response is found, it's returned immediately and [memoized](#request-memoization).\n- If a cached response is not found, the request is made to the data source, the result is stored in the Data Cache, and memoized.\n- For uncached data (e.g. `{ cache: 'no-store' }`), the result is always fetched from the data source, and memoized.\n- Whether the data is cached or uncached, the requests are always memoized to avoid making duplicate requests for the same data during a React render pass.\n\n> **Differences between the Data Cache and Request Memoization**\n>\n> While both caching mechanisms help improve performance by re-using cached data, the Data Cache is persistent across incoming requests and deployments, whereas memoization only lasts the lifetime of a request.\n>\n> With memoization, we reduce the number of **duplicate** requests in the same render pass that have to cross the network boundary from the rendering server to the Data Cache server (e.g. a CDN or Edge Network) or data source (e.g. a database or CMS). With the Data Cache, we reduce the number of requests made to our origin data source.\n\n### Duration\n\nThe Data Cache is persistent across incoming requests and deployments unless you revalidate or opt-out.\n\n### Revalidating\n\nCached data can be revalidated in two ways, with:\n\n- **Time-based Revalidation**: Revalidate data after a certain amount of time has passed and a new request is made. This is useful for data that changes infrequently and freshness is not as critical.\n- **On-demand Revalidation:** Revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated).\n\n#### Time-based Revalidation\n\nTo revalidate data at a timed interval, you can use the `next.revalidate` option of `fetch` to set the cache lifetime of a resource (in seconds).\n\n```js\n// Revalidate at most every hour\nfetch('https://...', { next: { revalidate: 3600 } })\n```\n\nAlternatively, you can use [Route Segment Config options](#segment-config-options) to configure all `fetch` requests in a segment or for cases where you're not able to use `fetch`.\n\n**How Time-based Revalidation Works**\n\n<Image\n  alt=\"Diagram showing how time-based revalidation works, after the revalidation period, stale data is returned for the first request, then data is revalidated.\"\n  srcLight=\"/docs/light/time-based-revalidation.png\"\n  srcDark=\"/docs/dark/time-based-revalidation.png\"\n  width=\"1600\"\n  height=\"1252\"\n/>\n\n- The first time a fetch request with `revalidate` is called, the data will be fetched from the external data source and stored in the Data Cache.\n- Any requests that are called within the specified timeframe (e.g. 60-seconds) will return the cached data.\n- After the timeframe, the next request will still return the cached (now stale) data.\n  - Next.js will trigger a revalidation of the data in the background.\n  - Once the data is fetched successfully, Next.js will update the Data Cache with the fresh data.\n  - If the background revalidation fails, the previous data will be kept unaltered.\n\nThis is similar to [**stale-while-revalidate**](https://web.dev/stale-while-revalidate/) behavior.\n\n#### On-demand Revalidation\n\nData can be revalidated on-demand by path ([`revalidatePath`](#revalidatepath)) or by cache tag ([`revalidateTag`](#fetch-optionsnexttags-and-revalidatetag)).\n\n**How On-Demand Revalidation Works**\n\n<Image\n  alt=\"Diagram showing how on-demand revalidation works, the Data Cache is updated with fresh data after a revalidation request.\"\n  srcLight=\"/docs/light/on-demand-revalidation.png\"\n  srcDark=\"/docs/dark/on-demand-revalidation.png\"\n  width=\"1600\"\n  height=\"1082\"\n/>\n\n- The first time a `fetch` request is called, the data will be fetched from the external data source and stored in the Data Cache.\n- When an on-demand revalidation is triggered, the appropriate cache entries will be purged from the cache.\n  - This is different from time-based revalidation, which keeps the stale data in the cache until the fresh data is fetched.\n- The next time a request is made, it will be a cache `MISS` again, and the data will be fetched from the external data source and stored in the Data Cache.\n\n### Opting out\n\nFor individual data fetches, you can opt out of caching by setting the [`cache`](#fetch-optionscache) option to `no-store`. This means data will be fetched whenever `fetch` is called.\n\n```jsx\n// Opt out of caching for an individual `fetch` request\nfetch(`https://...`, { cache: 'no-store' })\n```\n\nAlternatively, you can also use the [Route Segment Config options](#segment-config-options) to opt out of caching for a specific route segment. This will affect all data requests in the route segment, including third-party libraries.\n\n```jsx\n// Opt out of caching for all data requests in the route segment\nexport const dynamic = 'force-dynamic'\n```\n\n> **Note**: Data Cache is currently only available in pages/routes, not middleware. Any fetches done inside of your middleware will be uncached by default.\n\n> **Vercel Data Cache**\n>\n> If your Next.js application is deployed to Vercel, we recommend reading the [Vercel Data Cache](https://vercel.com/docs/infrastructure/data-cache) documentation for a better understanding of Vercel specific features.\n\n## Full Route Cache\n\n> **Related terms**:\n>\n> You may see the terms **Automatic Static Optimization**, **Static Site Generation**, or **Static Rendering** being used interchangeably to refer to the process of rendering and caching routes of your application at build time.\n\nNext.js automatically renders and caches routes at build time. This is an optimization that allows you to serve the cached route instead of rendering on the server for every request, resulting in faster page loads.\n\nTo understand how the Full Route Cache works, it's helpful to look at how React handles rendering, and how Next.js caches the result:\n\n### 1. React Rendering on the Server\n\nOn the server, Next.js uses React's APIs to orchestrate rendering. The rendering work is split into chunks: by individual routes segments and Suspense boundaries.\n\nEach chunk is rendered in two steps:\n\n1. React renders Server Components into a special data format, optimized for streaming, called the **React Server Component Payload**.\n2. Next.js uses the React Server Component Payload and Client Component JavaScript instructions to render **HTML** on the server.\n\nThis means we don't have to wait for everything to render before caching the work or sending a response. Instead, we can stream a response as work is completed.\n\n> **What is the React Server Component Payload?**\n>\n> The React Server Component Payload is a compact binary representation of the rendered React Server Components tree. It's used by React on the client to update the browser's DOM. The React Server Component Payload contains:\n>\n> - The rendered result of Server Components\n> - Placeholders for where Client Components should be rendered and references to their JavaScript files\n> - Any props passed from a Server Component to a Client Component\n>\n> To learn more, see the [Server Components](/docs/app/building-your-application/rendering/server-components) documentation.\n\n### 2. Next.js Caching on the Server (Full Route Cache)\n\n<Image\n  alt=\"Default behavior of the Full Route Cache, showing how the React Server Component Payload and HTML are cached on the server for statically rendered routes.\"\n  srcLight=\"/docs/light/full-route-cache.png\"\n  srcDark=\"/docs/dark/full-route-cache.png\"\n  width=\"1600\"\n  height=\"888\"\n/>\n\nThe default behavior of Next.js is to cache the rendered result (React Server Component Payload and HTML) of a route on the server. This applies to statically rendered routes at build time, or during revalidation.\n\n### 3. React Hydration and Reconciliation on the Client\n\nAt request time, on the client:\n\n1. The HTML is used to immediately show a fast non-interactive initial preview of the Client and Server Components.\n2. The React Server Components Payload is used to reconcile the Client and rendered Server Component trees, and update the DOM.\n3. The JavaScript instructions are used to [hydrate](https://react.dev/reference/react-dom/client/hydrateRoot) Client Components and make the application interactive.\n\n### 4. Next.js Caching on the Client (Router Cache)\n\nThe React Server Component Payload is stored in the client-side [Router Cache](#router-cache) - a separate in-memory cache, split by individual route segment. This Router Cache is used to improve the navigation experience by storing previously visited routes and prefetching future routes.\n\n### 5. Subsequent Navigations\n\nOn subsequent navigations or during prefetching, Next.js will check if the React Server Components Payload is stored in the Router Cache. If so, it will skip sending a new request to the server.\n\nIf the route segments are not in the cache, Next.js will fetch the React Server Components Payload from the server, and populate the Router Cache on the client.\n\n### Static and Dynamic Rendering\n\nWhether a route is cached or not at build time depends on whether it's statically or dynamically rendered. Static routes are cached by default, whereas dynamic routes are rendered at request time, and not cached.\n\nThis diagram shows the difference between statically and dynamically rendered routes, with cached and uncached data:\n\n<Image\n  alt=\"How static and dynamic rendering affects the Full Route Cache. Static routes are cached at build time or after data revalidation, whereas dynamic routes are never cached\"\n  srcLight=\"/docs/light/static-and-dynamic-routes.png\"\n  srcDark=\"/docs/dark/static-and-dynamic-routes.png\"\n  width=\"1600\"\n  height=\"1314\"\n/>\n\nLearn more about [static and dynamic rendering](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies).\n\n### Duration\n\nBy default, the Full Route Cache is persistent. This means that the render output is cached across user requests.\n\n### Invalidation\n\nThere are two ways you can invalidate the Full Route Cache:\n\n- **[Revalidating Data](/docs/app/building-your-application/caching#revalidating)**: Revalidating the [Data Cache](#data-cache), will in turn invalidate the Router Cache by re-rendering components on the server and caching the new render output.\n- **Redeploying**: Unlike the Data Cache, which persists across deployments, the Full Route Cache is cleared on new deployments.\n\n### Opting out\n\nYou can opt out of the Full Route Cache, or in other words, dynamically render components for every incoming request, by:\n\n- **Using a [Dynamic Function](#dynamic-functions)**: This will opt the route out from the Full Route Cache and dynamically render it at request time. The Data Cache can still be used.\n- **Using the `dynamic = 'force-dynamic'` or `revalidate = 0` route segment config options**: This will skip the Full Route Cache and the Data Cache. Meaning components will be rendered and data fetched on every incoming request to the server. The Router Cache will still apply as it's a client-side cache.\n- **Opting out of the [Data Cache](#data-cache)**: If a route has a `fetch` request that is not cached, this will opt the route out of the Full Route Cache. The data for the specific `fetch` request will be fetched for every incoming request. Other `fetch` requests that do not opt out of caching will still be cached in the Data Cache. This allows for a hybrid of cached and uncached data.\n\n## Router Cache\n\n> **Related Terms:**\n>\n> You may see the Router Cache being referred to as **Client-side Cache** or **Prefetch Cache**. While **Prefetch Cache** refers to the prefetched route segments, **Client-side Cache** refers to the whole Router cache, which includes both visited and prefetched segments.\n> This cache specifically applies to Next.js and Server Components, and is different to the browser's [bfcache](https://web.dev/bfcache/), though it has a similar result.\n\nNext.js has an in-memory client-side cache that stores the React Server Component Payload, split by individual route segments, for the duration of a user session. This is called the Router Cache.\n\n**How the Router Cache Works**\n\n<Image\n  alt=\"How the Router cache works for static and dynamic routes, showing MISS and HIT for initial and subsequent navigations.\"\n  srcLight=\"/docs/light/router-cache.png\"\n  srcDark=\"/docs/dark/router-cache.png\"\n  width=\"1600\"\n  height=\"1375\"\n/>\n\nAs a user navigates between routes, Next.js caches visited route segments and [prefetches](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching) the routes the user is likely to navigate to (based on `<Link>` components in their viewport).\n\nThis results in an improved navigation experience for the user:\n\n- Instant backward/forward navigation because visited routes are cached and fast navigation to new routes because of prefetching and [partial rendering](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering).\n- No full-page reload between navigations, and React state and browser state are preserved.\n\n> **Difference between the Router Cache and Full Route Cache**:\n>\n> The Router Cache temporarily stores the React Server Component Payload in the browser for the duration of a user session, whereas the Full Route Cache persistently stores the React Server Component Payload and HTML on the server across multiple user requests.\n>\n> While the Full Route Cache only caches statically rendered routes, the Router Cache applies to both statically and dynamically rendered routes.\n\n### Duration\n\nThe cache is stored in the browser's temporary memory. Two factors determine how long the router cache lasts:\n\n- **Session**: The cache persists across navigation. However, it's cleared on page refresh.\n- **Automatic Invalidation Period**: The cache of an individual segment is automatically invalidated after a specific time. The duration depends on how the resource was [prefetched](/docs/app/api-reference/components/link#prefetch):\n  - **Default Prefetching** (`prefetch={null}` or unspecified): 30 seconds\n  - **Full Prefetching**: (`prefetch={true}` or `router.prefetch`): 5 minutes\n\nWhile a page refresh will clear **all** cached segments, the automatic invalidation period only affects the individual segment from the time it was prefetched.\n\n> **Note**: There is [experimental support](/docs/app/api-reference/next-config-js/staleTimes) for configuring these values as of This configuration option is available as of [v14.2.0](https://github.com/vercel/next.js/releases/tag/v14.2.0).\n\n### Invalidation\n\nThere are two ways you can invalidate the Router Cache:\n\n- In a **Server Action**:\n  - Revalidating data on-demand by path with ([`revalidatePath`](/docs/app/api-reference/functions/revalidatePath)) or by cache tag with ([`revalidateTag`](/docs/app/api-reference/functions/revalidateTag))\n  - Using [`cookies.set`](/docs/app/api-reference/functions/cookies#cookiessetname-value-options) or [`cookies.delete`](/docs/app/api-reference/functions/cookies#deleting-cookies) invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. authentication).\n- Calling [`router.refresh`](/docs/app/api-reference/functions/use-router) will invalidate the Router Cache and make a new request to the server for the current route.\n\n### Opting out\n\nIt's not possible to opt out of the Router Cache. However, you can invalidate it by calling [`router.refresh`](/docs/app/api-reference/functions/use-router), [`revalidatePath`](/docs/app/api-reference/functions/revalidatePath), or [`revalidateTag`](/docs/app/api-reference/functions/revalidateTag) (see above). This will clear the cache and make a new request to the server, ensuring the latest data is shown.\n\nYou can also opt out of **prefetching** by setting the `prefetch` prop of the `<Link>` component to `false`. However, this will still temporarily store the route segments for 30s to allow instant navigation between nested segments, such as tab bars, or back and forward navigation. Visited routes will still be cached.\n\n## Cache Interactions\n\nWhen configuring the different caching mechanisms, it's important to understand how they interact with each other:\n\n### Data Cache and Full Route Cache\n\n- Revalidating or opting out of the Data Cache **will** invalidate the Full Route Cache, as the render output depends on data.\n- Invalidating or opting out of the Full Route Cache **does not** affect the Data Cache. You can dynamically render a route that has both cached and uncached data. This is useful when most of your page uses cached data, but you have a few components that rely on data that needs to be fetched at request time. You can dynamically render without worrying about the performance impact of re-fetching all the data.\n\n### Data Cache and Client-side Router cache\n\n- Revalidating the Data Cache in a [Route Handler](/docs/app/building-your-application/routing/route-handlers) **will not** immediately invalidate the Router Cache as the Route Handler isn't tied to a specific route. This means Router Cache will continue to serve the previous payload until a hard refresh, or the automatic invalidation period has elapsed.\n- To immediately invalidate the Data Cache and Router cache, you can use [`revalidatePath`](#revalidatepath) or [`revalidateTag`](#fetch-optionsnexttags-and-revalidatetag) in a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\n## APIs\n\nThe following table provides an overview of how different Next.js APIs affect caching:\n\n| API                                                                     | Router Cache               | Full Route Cache      | Data Cache            | React Cache |\n| ----------------------------------------------------------------------- | -------------------------- | --------------------- | --------------------- | ----------- |\n| [`<Link prefetch>`](#link)                                              | Cache                      |                       |                       |             |\n| [`router.prefetch`](#routerprefetch)                                    | Cache                      |                       |                       |             |\n| [`router.refresh`](#routerrefresh)                                      | Revalidate                 |                       |                       |             |\n| [`fetch`](#fetch)                                                       |                            |                       | Cache                 | Cache       |\n| [`fetch` `options.cache`](#fetch-optionscache)                          |                            |                       | Cache or Opt out      |             |\n| [`fetch` `options.next.revalidate`](#fetch-optionsnextrevalidate)       |                            | Revalidate            | Revalidate            |             |\n| [`fetch` `options.next.tags`](#fetch-optionsnexttags-and-revalidatetag) |                            | Cache                 | Cache                 |             |\n| [`revalidateTag`](#fetch-optionsnexttags-and-revalidatetag)             | Revalidate (Server Action) | Revalidate            | Revalidate            |             |\n| [`revalidatePath`](#revalidatepath)                                     | Revalidate (Server Action) | Revalidate            | Revalidate            |             |\n| [`const revalidate`](#segment-config-options)                           |                            | Revalidate or Opt out | Revalidate or Opt out |             |\n| [`const dynamic`](#segment-config-options)                              |                            | Cache or Opt out      | Cache or Opt out      |             |\n| [`cookies`](#cookies)                                                   | Revalidate (Server Action) | Opt out               |                       |             |\n| [`headers`, `searchParams`](#dynamic-functions)                         |                            | Opt out               |                       |             |\n| [`generateStaticParams`](#generatestaticparams)                         |                            | Cache                 |                       |             |\n| [`React.cache`](#react-cache-function)                                  |                            |                       |                       | Cache       |\n| [`unstable_cache`](/docs/app/api-reference/functions/unstable_cache)    |                            |                       | Cache                 |             |\n\n### `<Link>`\n\nBy default, the `<Link>` component automatically prefetches routes from the Full Route Cache and adds the React Server Component Payload to the Router Cache.\n\nTo disable prefetching, you can set the `prefetch` prop to `false`. But this will not skip the cache permanently, the route segment will still be cached client-side when the user visits the route.\n\nLearn more about the [`<Link>` component](/docs/app/api-reference/components/link).\n\n### `router.prefetch`\n\nThe `prefetch` option of the `useRouter` hook can be used to manually prefetch a route. This adds the React Server Component Payload to the Router Cache.\n\nSee the [`useRouter` hook](/docs/app/api-reference/functions/use-router) API reference.\n\n### `router.refresh`\n\nThe `refresh` option of the `useRouter` hook can be used to manually refresh a route. This completely clears the Router Cache, and makes a new request to the server for the current route. `refresh` does not affect the Data or Full Route Cache.\n\nThe rendered result will be reconciled on the client while preserving React state and browser state.\n\nSee the [`useRouter` hook](/docs/app/api-reference/functions/use-router) API reference.\n\n### `fetch`\n\nData returned from `fetch` is automatically cached in the Data Cache.\n\n```jsx\n// Cached by default. `force-cache` is the default option and can be omitted.\nfetch(`https://...`, { cache: 'force-cache' })\n```\n\nSee the [`fetch` API Reference](/docs/app/api-reference/functions/fetch) for more options.\n\n### `fetch options.cache`\n\nYou can opt out individual `fetch` requests of data caching by setting the `cache` option to `no-store`:\n\n```jsx\n// Opt out of caching\nfetch(`https://...`, { cache: 'no-store' })\n```\n\nSince the render output depends on data, using `cache: 'no-store'` will also skip the Full Route Cache for the route where the `fetch` request is used. That is, the route will be dynamically rendered every request, but you can still have other cached data requests in the same route.\n\nSee the [`fetch` API Reference](/docs/app/api-reference/functions/fetch) for more options.\n\n### `fetch options.next.revalidate`\n\nYou can use the `next.revalidate` option of `fetch` to set the revalidation period (in seconds) of an individual `fetch` request. This will revalidate the Data Cache, which in turn will revalidate the Full Route Cache. Fresh data will be fetched, and components will be re-rendered on the server.\n\n```jsx\n// Revalidate at most after 1 hour\nfetch(`https://...`, { next: { revalidate: 3600 } })\n```\n\nSee the [`fetch` API reference](/docs/app/api-reference/functions/fetch) for more options.\n\n### `fetch options.next.tags` and `revalidateTag`\n\nNext.js has a cache tagging system for fine-grained data caching and revalidation.\n\n1. When using `fetch` or [`unstable_cache`](/docs/app/api-reference/functions/unstable_cache), you have the option to tag cache entries with one or more tags.\n2. Then, you can call `revalidateTag` to purge the cache entries associated with that tag.\n\nFor example, you can set a tag when fetching data:\n\n```jsx\n// Cache data with a tag\nfetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } })\n```\n\nThen, call `revalidateTag` with a tag to purge the cache entry:\n\n```jsx\n// Revalidate entries with a specific tag\nrevalidateTag('a')\n```\n\nThere are two places you can use `revalidateTag`, depending on what you're trying to achieve:\n\n1. [Route Handlers](/docs/app/building-your-application/routing/route-handlers) - to revalidate data in response of a third party event (e.g. webhook). This will not invalidate the Router Cache immediately as the Router Handler isn't tied to a specific route.\n2. [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) - to revalidate data after a user action (e.g. form submission). This will invalidate the Router Cache for the associated route.\n\n### `revalidatePath`\n\n`revalidatePath` allows you manually revalidate data **and** re-render the route segments below a specific path in a single operation. Calling the `revalidatePath` method revalidates the Data Cache, which in turn invalidates the Full Route Cache.\n\n```jsx\nrevalidatePath('/')\n```\n\nThere are two places you can use `revalidatePath`, depending on what you're trying to achieve:\n\n1. [Route Handlers](/docs/app/building-your-application/routing/route-handlers) - to revalidate data in response to a third party event (e.g. webhook).\n2. [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) - to revalidate data after a user interaction (e.g. form submission, clicking a button).\n\nSee the [`revalidatePath` API reference](/docs/app/api-reference/functions/revalidatePath) for more information.\n\n> **`revalidatePath`** vs. **`router.refresh`**:\n>\n> Calling `router.refresh` will clear the Router cache, and re-render route segments on the server without invalidating the Data Cache or the Full Route Cache.\n>\n> The difference is that `revalidatePath` purges the Data Cache and Full Route Cache, whereas `router.refresh()` does not change the Data Cache and Full Route Cache, as it is a client-side API.\n\n### Dynamic Functions\n\nDynamic functions like `cookies` and `headers`, and the `searchParams` prop in Pages depend on runtime incoming request information. Using them will opt a route out of the Full Route Cache, in other words, the route will be dynamically rendered.\n\n#### `cookies`\n\nUsing `cookies.set` or `cookies.delete` in a Server Action invalidates the Router Cache to prevent routes that use cookies from becoming stale (e.g. to reflect authentication changes).\n\nSee the [`cookies`](/docs/app/api-reference/functions/cookies) API reference.\n\n### Segment Config Options\n\nThe Route Segment Config options can be used to override the route segment defaults or when you're not able to use the `fetch` API (e.g. database client or 3rd party libraries).\n\nThe following Route Segment Config options will opt out of the Data Cache and Full Route Cache:\n\n- `const dynamic = 'force-dynamic'`\n- `const revalidate = 0`\n\nSee the [Route Segment Config](/docs/app/api-reference/file-conventions/route-segment-config) documentation for more options.\n\n### `generateStaticParams`\n\nFor [dynamic segments](/docs/app/building-your-application/routing/dynamic-routes) (e.g. `app/blog/[slug]/page.js`), paths provided by `generateStaticParams` are cached in the Full Route Cache at build time. At request time, Next.js will also cache paths that weren't known at build time the first time they're visited.\n\nYou can disable caching at request time by using `export const dynamicParams = false` option in a route segment. When this config option is used, only paths provided by `generateStaticParams` will be served, and other routes will 404 or match (in the case of [catch-all routes](/docs/app/building-your-application/routing/dynamic-routes#catch-all-segments)).\n\nSee the [`generateStaticParams` API reference](/docs/app/api-reference/functions/generate-static-params).\n\n### React `cache` function\n\nThe React `cache` function allows you to memoize the return value of a function, allowing you to call the same function multiple times while only executing it once.\n\nSince `fetch` requests are automatically memoized, you do not need to wrap it in React `cache`. However, you can use `cache` to manually memoize data requests for use cases when the `fetch` API is not suitable. For example, some database clients, CMS clients, or GraphQL clients.\n\n```tsx filename=\"utils/get-item.ts\" switcher\nimport { cache } from 'react'\nimport db from '@/lib/db'\n\nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n```jsx filename=\"utils/get-item.js\" switcher\nimport { cache } from 'react'\nimport db from '@/lib/db'\n\nexport const getItem = cache(async (id) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n", "01-building-your-application/06-optimizing/12-third-party-libraries.mdx": "---\ntitle: Third Party Libraries\ndescription: Optimize the performance of third-party libraries in your application with the `@next/third-parties` package.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n**`@next/third-parties`** is a library that provides a collection of components and utilities that\nimprove the performance and developer experience of loading popular third-party libraries in your\nNext.js application.\n\nAll third-party integrations provided by `@next/third-parties` have been optimized for performance\nand ease of use.\n\n## Getting Started\n\nTo get started, install the `@next/third-parties` library:\n\n```bash filename=\"Terminal\"\nnpm install @next/third-parties@latest next@latest\n```\n\n{/* To do: Remove this paragraph once package becomes stable */}\n\n`@next/third-parties` is currently an **experimental** library under active development. We recommend installing it with the **latest** or **canary** flags while we work on adding more third-party integrations.\n\n## Google Third-Parties\n\nAll supported third-party libraries from Google can be imported from `@next/third-parties/google`.\n\n### Google Tag Manager\n\nThe `GoogleTagManager` component can be used to instantiate a [Google Tag\nManager](https://developers.google.com/tag-platform/tag-manager) container to your\npage. By default, it fetches the original inline script after hydration occurs on the page.\n\n<AppOnly>\n\nTo load Google Tag Manager for all routes, include the component directly in your root layout and\npass in your GTM container ID:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo load Google Tag Manager for all routes, include the component directly in your custom `_app` and\npass in your GTM container ID:\n\n```jsx filename=\"pages/_app.js\"\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleTagManager gtmId=\"GTM-XYZ\" />\n    </>\n  )\n}\n```\n\n</PagesOnly>\n\nTo load Google Tag Manager for a single route, include the component in your page file:\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport { GoogleTagManager } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleTagManager gtmId=\"GTM-XYZ\" />\n}\n```\n\n</PagesOnly>\n\n#### Sending Events\n\nThe `sendGTMEvent` function can be used to track user interactions on your page by sending events\nusing the `dataLayer` object. For this function to work, the `<GoogleTagManager />` component must be\nincluded in either a parent layout, page, or component, or directly in the same file.\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\n'use client'\n\nimport { sendGTMEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport { sendGTMEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGTMEvent({ event: 'buttonClicked', value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n\nRefer to the Tag Manager [developer\ndocumentation](https://developers.google.com/tag-platform/tag-manager/datalayer) to learn about the\ndifferent variables and events that can be passed into the function.\n\n#### Options\n\nOptions to pass to the Google Tag Manager. For a full list of options, read the [Google Tag Manager\ndocs](https://developers.google.com/tag-platform/tag-manager/datalayer).\n\n| Name            | Type     | Description                                                                     |\n| --------------- | -------- | ------------------------------------------------------------------------------- |\n| `gtmId`         | Required | Your GTM container ID. Usually starts with `GTM-`.                              |\n| `dataLayer`     | Optional | Data layer array to instantiate the container with. Defaults to an empty array. |\n| `dataLayerName` | Optional | Name of the data layer. Defaults to `dataLayer`.                                |\n| `auth`          | Optional | Value of authentication parameter (`gtm_auth`) for environment snippets.        |\n| `preview`       | Optional | Value of preview parameter (`gtm_preview`) for environment snippets.            |\n\n### Google Analytics\n\nThe `GoogleAnalytics` component can be used to include [Google Analytics\n4](https://developers.google.com/analytics/devguides/collection/ga4) to your page via the Google tag\n(`gtag.js`). By default, it fetches the original scripts after hydration occurs on the page.\n\n> **Recommendation**: If Google Tag Manager is already included in your application, you can\n> configure Google Analytics directly using it, rather than including Google Analytics as a separate\n> component. Refer to the\n> [documentation](https://developers.google.com/analytics/devguides/collection/ga4/tag-options#what-is-gtm)\n> to learn more about the differences between Tag Manager and `gtag.js`.\n\n<AppOnly>\n\nTo load Google Analytics for all routes, include the component directly in your root layout and pass\nin your measurement ID:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo load Google Analytics for all routes, include the component directly in your custom `_app` and\npass in your measurement ID:\n\n```jsx filename=\"pages/_app.js\"\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <GoogleAnalytics gaId=\"G-XYZ\" />\n    </>\n  )\n}\n```\n\n</PagesOnly>\n\nTo load Google Analytics for a single route, include the component in your page file:\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport { GoogleAnalytics } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <GoogleAnalytics gaId=\"G-XYZ\" />\n}\n```\n\n</PagesOnly>\n\n#### Sending Events\n\nThe `sendGAEvent` function can be used to measure user interactions on your page by sending events\nusing the `dataLayer` object. For this function to work, the `<GoogleAnalytics />` component must be\nincluded in either a parent layout, page, or component, or directly in the same file.\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\n'use client'\n\nimport { sendGAEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent({ event: 'buttonClicked', value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport { sendGAEvent } from '@next/third-parties/google'\n\nexport function EventButton() {\n  return (\n    <div>\n      <button\n        onClick={() => sendGAEvent({ event: 'buttonClicked', value: 'xyz' })}\n      >\n        Send Event\n      </button>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n\nRefer to the Google Analytics [developer\ndocumentation](https://developers.google.com/analytics/devguides/collection/ga4/event-parameters) to learn\nmore about event parameters.\n\n#### Tracking Pageviews\n\nGoogle Analytics automatically tracks pageviews when the browser history state changes. This means\nthat client-side navigations between Next.js routes will send pageview data without any configuration.\n\nTo ensure that client-side navigations are being measured correctly, verify that the [_\u201cEnhanced\nMeasurement\u201d_](https://support.google.com/analytics/answer/9216061#enable_disable) property is\nenabled in your Admin panel and the _\u201cPage changes based on browser history events\u201d_ checkbox is\nselected.\n\n> **Note**: If you decide to manually send pageview events, make sure to disable the default\n> pageview measurement to avoid having duplicate data. Refer to the Google Analytics [developer\n> documentation](https://developers.google.com/analytics/devguides/collection/ga4/views?client_type=gtag#manual_pageviews)\n> to learn more.\n\n#### Options\n\nOptions to pass to the `<GoogleAnalytics>` component.\n\n| Name            | Type     | Description                                                                                            |\n| --------------- | -------- | ------------------------------------------------------------------------------------------------------ |\n| `gaId`          | Required | Your [measurement ID](https://support.google.com/analytics/answer/12270356). Usually starts with `G-`. |\n| `dataLayerName` | Optional | Name of the data layer. Defaults to `dataLayer`.                                                       |\n\n### Google Maps Embed\n\nThe `GoogleMapsEmbed` component can be used to add a [Google Maps\nEmbed](https://developers.google.com/maps/documentation/embed/embedding-map) to your page. By\ndefault, it uses the `loading` attribute to lazy-load the embed below the fold.\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport { GoogleMapsEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return (\n    <GoogleMapsEmbed\n      apiKey=\"XYZ\"\n      height={200}\n      width=\"100%\"\n      mode=\"place\"\n      q=\"Brooklyn+Bridge,New+York,NY\"\n    />\n  )\n}\n```\n\n</PagesOnly>\n\n#### Options\n\nOptions to pass to the Google Maps Embed. For a full list of options, read the [Google Map Embed\ndocs](https://developers.google.com/maps/documentation/embed/embedding-map).\n\n| Name              | Type     | Description                                                                                         |\n| ----------------- | -------- | --------------------------------------------------------------------------------------------------- |\n| `apiKey`          | Required | Your api key.                                                                                       |\n| `mode`            | Required | [Map mode](https://developers.google.com/maps/documentation/embed/embedding-map#choosing_map_modes) |\n| `height`          | Optional | Height of the embed. Defaults to `auto`.                                                            |\n| `width`           | Optional | Width of the embed. Defaults to `auto`.                                                             |\n| `style`           | Optional | Pass styles to the iframe.                                                                          |\n| `allowfullscreen` | Optional | Property to allow certain map parts to go full screen.                                              |\n| `loading`         | Optional | Defaults to lazy. Consider changing if you know your embed will be above the fold.                  |\n| `q`               | Optional | Defines map marker location. _This may be required depending on the map mode_.                      |\n| `center`          | Optional | Defines the center of the map view.                                                                 |\n| `zoom`            | Optional | Sets initial zoom level of the map.                                                                 |\n| `maptype`         | Optional | Defines type of map tiles to load.                                                                  |\n| `language`        | Optional | Defines the language to use for UI elements and for the display of labels on map tiles.             |\n| `region`          | Optional | Defines the appropriate borders and labels to display, based on geo-political sensitivities.        |\n\n### YouTube Embed\n\nThe `YouTubeEmbed` component can be used to load and display a YouTube embed. This component loads\nfaster by using [`lite-youtube-embed`](https://github.com/paulirish/lite-youtube-embed) under the\nhood.\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport { YouTubeEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport { YouTubeEmbed } from '@next/third-parties/google'\n\nexport default function Page() {\n  return <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />\n}\n```\n\n</PagesOnly>\n\n#### Options\n\n| Name        | Type     | Description                                                                                                                                                                                                  |\n| ----------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `videoid`   | Required | YouTube video id.                                                                                                                                                                                            |\n| `width`     | Optional | Width of the video container. Defaults to `auto`                                                                                                                                                             |\n| `height`    | Optional | Height of the video container. Defaults to `auto`                                                                                                                                                            |\n| `playlabel` | Optional | A visually hidden label for the play button for accessibility.                                                                                                                                               |\n| `params`    | Optional | The video player params defined [here](https://developers.google.com/youtube/player_parameters#Parameters). <br/> Params are passed as a query param string. <br/> Eg: `params=\"controls=0&start=10&end=30\"` |\n| `style`     | Optional | Used to apply styles to the video container.                                                                                                                                                                 |\n", "01-building-your-application/06-optimizing/03-fonts.mdx": "---\ntitle: Font Optimization\nnav_title: Fonts\ndescription: Optimize your application's web fonts with the built-in `next/font` loaders.\nrelated:\n  title: API Reference\n  description: Learn more about the next/font API.\n  links:\n    - app/api-reference/components/font\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n[**`next/font`**](/docs/app/api-reference/components/font) will automatically optimize your fonts (including custom fonts) and remove external network requests for improved privacy and performance.\n\n> **\ud83c\udfa5 Watch:** Learn more about using `next/font` \u2192 [YouTube (6 minutes)](https://www.youtube.com/watch?v=L8_98i_bMMA).\n\n`next/font` includes **built-in automatic self-hosting** for _any_ font file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSS `size-adjust` property used.\n\nThis new font system also allows you to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of your static assets. **No requests are sent to Google by the browser.**\n\n## Google Fonts\n\nAutomatically self-host any Google Font. Fonts are included in the deployment and served from the same domain as your deployment. **No requests are sent to Google by the browser.**\n\nGet started by importing the font you would like to use from `next/font/google` as a function. We recommend using [variable fonts](https://fonts.google.com/variablefonts) for the best performance and flexibility.\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nIf you can't use a variable font, you will **need to specify a weight**:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={roboto.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo use the font in all your pages, add it to [`_app.js` file](/docs/pages/building-your-application/routing/custom-app) under `/pages` as shown below:\n\n```jsx filename=\"pages/_app.js\"\nimport { Inter } from 'next/font/google'\n\n// If loading a variable font, you don't need to specify the font weight\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={inter.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\nIf you can't use a variable font, you will **need to specify a weight**:\n\n```jsx filename=\"pages/_app.js\"\nimport { Roboto } from 'next/font/google'\n\nconst roboto = Roboto({\n  weight: '400',\n  subsets: ['latin'],\n})\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={roboto.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n</PagesOnly>\n\nYou can specify multiple weights and/or styles by using an array:\n\n```jsx filename=\"app/layout.js\"\nconst roboto = Roboto({\n  weight: ['400', '700'],\n  style: ['normal', 'italic'],\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n> **Good to know**: Use an underscore (\\_) for font names with multiple words. E.g. `Roboto Mono` should be imported as `Roboto_Mono`.\n\n<PagesOnly>\n\n### Apply the font in `<head>`\n\nYou can also use the font without a wrapper and `className` by injecting it inside the `<head>` as follows:\n\n```jsx filename=\"pages/_app.js\"\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <style jsx global>{`\n        html {\n          font-family: ${inter.style.fontFamily};\n        }\n      `}</style>\n      <Component {...pageProps} />\n    </>\n  )\n}\n```\n\n### Single page usage\n\nTo use the font on a single page, add it to the specific page as shown below:\n\n```jsx filename=\"pages/index.js\"\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({ subsets: ['latin'] })\n\nexport default function Home() {\n  return (\n    <div className={inter.className}>\n      <p>Hello World</p>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n\n### Specifying a subset\n\nGoogle Fonts are automatically [subset](https://fonts.google.com/knowledge/glossary/subsetting). This reduces the size of the font file and improves performance. You'll need to define which of these subsets you want to preload. Failing to specify any subsets while [`preload`](/docs/app/api-reference/components/font#preload) is `true` will result in a warning.\n\nThis can be done by adding it to the function call:\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n```jsx filename=\"app/layout.js\" switcher\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nconst inter = Inter({ subsets: ['latin'] })\n```\n\n</PagesOnly>\n\nView the [Font API Reference](/docs/app/api-reference/components/font) for more information.\n\n### Using Multiple Fonts\n\nYou can import and use multiple fonts in your application. There are two approaches you can take.\n\nThe first approach is to create a utility function that exports a font, imports it, and applies its `className` where needed. This ensures the font is preloaded only when it's rendered:\n\n```ts filename=\"app/fonts.ts\" switcher\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n```js filename=\"app/fonts.js\" switcher\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nexport const inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n})\n\nexport const roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n})\n```\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { inter } from './fonts'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { inter } from './fonts'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\" className={inter.className}>\n      <body>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { roboto_mono } from './fonts'\n\nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { roboto_mono } from './fonts'\n\nexport default function Page() {\n  return (\n    <>\n      <h1 className={roboto_mono.className}>My page</h1>\n    </>\n  )\n}\n```\n\n</AppOnly>\n\nIn the example above, `Inter` will be applied globally, and `Roboto Mono` can be imported and applied as needed.\n\nAlternatively, you can create a [CSS variable](/docs/app/api-reference/components/font#variable) and use it with your preferred CSS solution:\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Inter, Roboto_Mono } from 'next/font/google'\nimport styles from './global.css'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n  display: 'swap',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  variable: '--font-roboto-mono',\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>\n        <h1>My App</h1>\n        <div>{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n```css filename=\"app/global.css\"\nhtml {\n  font-family: var(--font-inter);\n}\n\nh1 {\n  font-family: var(--font-roboto-mono);\n}\n```\n\nIn the example above, `Inter` will be applied globally, and any `<h1>` tags will be styled with `Roboto Mono`.\n\n> **Recommendation**: Use multiple fonts conservatively since each new font is an additional resource the client has to download.\n\n## Local Fonts\n\nImport `next/font/local` and specify the `src` of your local font file. We recommend using [variable fonts](https://fonts.google.com/variablefonts) for the best performance and flexibility.\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `app`\nconst myFont = localFont({\n  src: './my-font.woff2',\n  display: 'swap',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={myFont.className}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport localFont from 'next/font/local'\n\n// Font files can be colocated inside of `pages`\nconst myFont = localFont({ src: './my-font.woff2' })\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={myFont.className}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n</PagesOnly>\n\nIf you want to use multiple files for a single font family, `src` can be an array:\n\n```js\nconst roboto = localFont({\n  src: [\n    {\n      path: './Roboto-Regular.woff2',\n      weight: '400',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-Italic.woff2',\n      weight: '400',\n      style: 'italic',\n    },\n    {\n      path: './Roboto-Bold.woff2',\n      weight: '700',\n      style: 'normal',\n    },\n    {\n      path: './Roboto-BoldItalic.woff2',\n      weight: '700',\n      style: 'italic',\n    },\n  ],\n})\n```\n\nView the [Font API Reference](/docs/app/api-reference/components/font) for more information.\n\n## With Tailwind CSS\n\n`next/font` can be used with [Tailwind CSS](https://tailwindcss.com/) through a [CSS variable](/docs/app/api-reference/components/font#css-variables).\n\nIn the example below, we use the font `Inter` from `next/font/google` (you can use any font from Google or Local Fonts). Load your font with the `variable` option to define your CSS variable name and assign it to `inter`. Then, use `inter.variable` to add the CSS variable to your HTML document.\n\n<AppOnly>\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { Inter, Roboto_Mono } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-inter',\n})\n\nconst roboto_mono = Roboto_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-roboto-mono',\n})\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\" className={`${inter.variable} ${roboto_mono.variable}`}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport { Inter } from 'next/font/google'\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n})\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <main className={`${inter.variable} font-sans`}>\n      <Component {...pageProps} />\n    </main>\n  )\n}\n```\n\n</PagesOnly>\n\nFinally, add the CSS variable to your [Tailwind CSS config](/docs/app/building-your-application/styling/tailwind-css#configuring-tailwind):\n\n```js filename=\"tailwind.config.js\"\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n    './app/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['var(--font-inter)'],\n        mono: ['var(--font-roboto-mono)'],\n      },\n    },\n  },\n  plugins: [],\n}\n```\n\nYou can now use the `font-sans` and `font-mono` utility classes to apply the font to your elements.\n\n## Preloading\n\n<AppOnly>\nWhen a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related routes based on the type of file where it is used:\n\n- If it's a [unique page](/docs/app/building-your-application/routing/pages), it is preloaded on the unique route for that page.\n- If it's a [layout](/docs/app/building-your-application/routing/layouts-and-templates#layouts), it is preloaded on all the routes wrapped by the layout.\n- If it's the [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required), it is preloaded on all routes.\n\n</AppOnly>\n\n<PagesOnly>\n\nWhen a font function is called on a page of your site, it is not globally available and preloaded on all routes. Rather, the font is only preloaded on the related route/s based on the type of file where it is used:\n\n- if it's a [unique page](/docs/pages/building-your-application/routing/pages-and-layouts), it is preloaded on the unique route for that page\n- if it's in the [custom App](/docs/pages/building-your-application/routing/custom-app), it is preloaded on all the routes of the site under `/pages`\n\n</PagesOnly>\n\n## Reusing fonts\n\nEvery time you call the `localFont` or Google font function, that font is hosted as one instance in your application. Therefore, if you load the same font function in multiple files, multiple instances of the same font are hosted. In this situation, it is recommended to do the following:\n\n- Call the font loader function in one shared file\n- Export it as a constant\n- Import the constant in each file where you would like to use this font\n", "01-building-your-application/06-optimizing/11-static-assets.mdx": "---\ntitle: Static Assets in `public`\nnav_title: Static Assets\ndescription: Next.js allows you to serve static files, like images, in the public directory. You can learn how it works here.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js can serve static files, like images, under a folder called `public` in the root directory. Files inside `public` can then be referenced by your code starting from the base URL (`/`).\n\nFor example, the file `public/avatars/me.png` can be viewed by visiting the `/avatars/me.png` path. The code to display that image might look like:\n\n```jsx filename=\"avatar.js\"\nimport Image from 'next/image'\n\nexport function Avatar({ id, alt }) {\n  return <Image src={`/avatars/${id}.png`} alt={alt} width=\"64\" height=\"64\" />\n}\n\nexport function AvatarOfMe() {\n  return <Avatar id=\"me\" alt=\"A portrait of me\" />\n}\n```\n\n## Caching\n\nNext.js cannot safely cache assets in the `public` folder because they may change. The default caching headers applied are:\n\n```jsx\nCache-Control: public, max-age=0\n```\n\n## Robots, Favicons, and others\n\n<PagesOnly>\n\nThe folder is also useful for `robots.txt`, `favicon.ico`, Google Site Verification, and any other static files (including `.html`). But make sure to not have a static file with the same name as a file in the `pages/` directory, as this will result in an error. [Read more](/docs/messages/conflicting-public-file-page).\n\n</PagesOnly>\n\n<AppOnly>\n\nFor static metadata files, such as `robots.txt`, `favicon.ico`, etc, you should use [special metadata files](/docs/app/api-reference/file-conventions/metadata) inside the `app` folder.\n\n</AppOnly>\n\n> Good to know:\n>\n> - The directory must be named `public`. The name cannot be changed and it's the only directory used to serve static assets.\n> - Only assets that are in the `public` directory at [build time](/docs/app/api-reference/next-cli#build) will be served by Next.js. Files added at request time won't be available. We recommend using a third-party service like [Vercel Blob](https://vercel.com/docs/storage/vercel-blob?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) for persistent file storage.\n", "01-building-your-application/06-optimizing/09-instrumentation.mdx": "---\ntitle: Instrumentation\ndescription: Learn how to use instrumentation to run code at server startup in your Next.js app\nrelated:\n  title: Learn more about Instrumentation\n  links:\n    - app/api-reference/file-conventions/instrumentation\n    - app/api-reference/next-config-js/instrumentationHook\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nInstrumentation is the process of using code to integrate monitoring and logging tools into your application. This allows you to track the performance and behavior of your application, and to debug issues in production.\n\n## Convention\n\nTo set up instrumentation, create `instrumentation.ts|js` file in the **root directory** of your project (or inside the [`src`](/docs/app/building-your-application/configuring/src-directory) folder if using one).\n\nThen, export a `register` function in the file. This function will be called **once** when a new Next.js server instance is initiated.\n\nFor example, to use Next.js with [OpenTelemetry](https://opentelemetry.io/) and [@vercel/otel](https://vercel.com/docs/observability/otel-overview):\n\n```ts filename=\"instrumentation.ts\" switcher\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\n```js filename=\"instrumentation.js\" switcher\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel('next-app')\n}\n```\n\nSee the [Next.js with OpenTelemetry example](https://github.com/vercel/next.js/tree/canary/examples/with-opentelemetry) for a complete implementation.\n\n> **Good to know**\n>\n> - This feature is **experimental**. To use it, you must explicitly opt in by defining [`experimental.instrumentationHook = true;`](/docs/app/api-reference/next-config-js/instrumentationHook) in your `next.config.js`.\n> - The `instrumentation` file should be in the root of your project and not inside the `app` or `pages` directory. If you're using the `src` folder, then place the file inside `src` alongside `pages` and `app`.\n> - If you use the [`pageExtensions` config option](/docs/app/api-reference/next-config-js/pageExtensions) to add a suffix, you will also need to update the `instrumentation` filename to match.\n\n## Examples\n\n### Importing files with side effects\n\nSometimes, it may be useful to import a file in your code because of the side effects it will cause. For example, you might import a file that defines a set of global variables, but never explicitly use the imported file in your code. You would still have access to the global variables the package has declared.\n\nWe recommend importing files using JavaScript `import` syntax within your `register` function. The following example demonstrates a basic usage of `import` in a `register` function:\n\n```ts filename=\"instrumentation.ts\" switcher\nexport async function register() {\n  await import('package-with-side-effect')\n}\n```\n\n```js filename=\"instrumentation.js\" switcher\nexport async function register() {\n  await import('package-with-side-effect')\n}\n```\n\n> **Good to know:**\n>\n> We recommend importing the file from within the `register` function, rather than at the top of the file. By doing this, you can colocate all of your side effects in one place in your code, and avoid any unintended consequences from importing globally at the top of the file.\n\n### Importing runtime-specific code\n\nNext.js calls `register` in all environments, so it's important to conditionally import any code that doesn't support specific runtimes (e.g. [Edge or Node.js](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes)). You can use the `NEXT_RUNTIME` environment variable to get the current environment:\n\n```ts filename=\"instrumentation.ts\" switcher\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}\n```\n\n```js filename=\"instrumentation.js\" switcher\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation-node')\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    await import('./instrumentation-edge')\n  }\n}\n```\n", "01-building-your-application/06-optimizing/index.mdx": "---\ntitle: Optimizations\nnav_title: Optimizing\ndescription: Optimize your Next.js application for best performance and user experience.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js comes with a variety of built-in optimizations designed to improve your application's speed and [Core Web Vitals](https://web.dev/vitals/). This guide will cover the optimizations you can leverage to enhance your user experience.\n\n## Built-in Components\n\nBuilt-in components abstract away the complexity of implementing common UI optimizations. These components are:\n\n- **Images**: Built on the native `<img>` element. The Image Component optimizes images for performance by lazy loading and automatically resizing images based on device size.\n- **Link**: Built on the native `<a>` tags. The Link Component prefetches pages in the background, for faster and smoother page transitions.\n- **Scripts**: Built on the native `<script>` tags. The Script Component gives you control over loading and execution of third-party scripts.\n\n## Metadata\n\nMetadata helps search engines understand your content better (which can result in better SEO), and allows you to customize how your content is presented on social media, helping you create a more engaging and consistent user experience across various platforms.\n\n<AppOnly>\n\nThe Metadata API in Next.js allows you to modify the `<head>` element of a page. You can configure metadata in two ways:\n\n- **Config-based Metadata**: Export a [static `metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object) or a dynamic [`generateMetadata` function](/docs/app/api-reference/functions/generate-metadata#generatemetadata-function) in a `layout.js` or `page.js` file.\n- **File-based Metadata**: Add static or dynamically generated special files to route segments.\n\nAdditionally, you can create dynamic Open Graph Images using JSX and CSS with [imageResponse](/docs/app/api-reference/functions/image-response) constructor.\n\n</AppOnly>\n\n<PagesOnly>\n\nThe Head Component in Next.js allows you to modify the `<head>` of a page. Learn more in the [Head Component](/docs/pages/api-reference/components/head) documentation.\n\n</PagesOnly>\n\n## Static Assets\n\nNext.js `/public` folder can be used to serve static assets like images, fonts, and other files. Files inside `/public` can also be cached by CDN providers so that they are delivered efficiently.\n\n## Analytics and Monitoring\n\nFor large applications, Next.js integrates with popular analytics and monitoring tools to help you understand how your application is performing. Learn more in the <PagesOnly>[Analytics](/docs/app/building-your-application/optimizing/analytics), </PagesOnly> [OpenTelemetry](/docs/pages/building-your-application/optimizing/open-telemetry)<PagesOnly>,</PagesOnly> and [Instrumentation](/docs/pages/building-your-application/optimizing/instrumentation) guides.\n", "01-building-your-application/06-optimizing/05-scripts.mdx": "---\ntitle: Script Optimization\nnav_title: Scripts\ndescription: Optimize 3rd party scripts with the built-in Script component.\nrelated:\n  title: API Reference\n  description: Learn more about the next/script API.\n  links:\n    - app/api-reference/components/script\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<AppOnly>\n\n### Layout Scripts\n\nTo load a third-party script for multiple routes, import `next/script` and include the script directly in your layout component:\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nimport Script from 'next/script'\n\nexport default function DashboardLayout({ children }) {\n  return (\n    <>\n      <section>{children}</section>\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\nThe third-party script is fetched when the folder route (e.g. `dashboard/page.js`) or any nested route (e.g. `dashboard/settings/page.js`) is accessed by the user. Next.js will ensure the script will **only load once**, even if a user navigates between multiple routes in the same layout.\n\n</AppOnly>\n\n### Application Scripts\n\n<AppOnly>\n\nTo load a third-party script for all routes, import `next/script` and include the script directly in your root layout:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport Script from 'next/script'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n      <Script src=\"https://example.com/script.js\" />\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo load a third-party script for all routes, import `next/script` and include the script directly in your custom `_app`:\n\n```jsx filename=\"pages/_app.js\"\nimport Script from 'next/script'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <>\n      <Component {...pageProps} />\n      <Script src=\"https://example.com/script.js\" />\n    </>\n  )\n}\n```\n\n</PagesOnly>\n\nThis script will load and execute when _any_ route in your application is accessed. Next.js will ensure the script will **only load once**, even if a user navigates between multiple pages.\n\n> **Recommendation**: We recommend only including third-party scripts in specific pages or layouts in order to minimize any unnecessary impact to performance.\n\n### Strategy\n\nAlthough the default behavior of `next/script` allows you to load third-party scripts in any page or layout, you can fine-tune its loading behavior by using the `strategy` property:\n\n- `beforeInteractive`: Load the script before any Next.js code and before any page hydration occurs.\n- `afterInteractive`: (**default**) Load the script early but after some hydration on the page occurs.\n- `lazyOnload`: Load the script later during browser idle time.\n- `worker`: (experimental) Load the script in a web worker.\n\nRefer to the [`next/script`](/docs/app/api-reference/components/script#strategy) API reference documentation to learn more about each strategy and their use cases.\n\n### Offloading Scripts To A Web Worker (Experimental)\n\n> **Warning:** The `worker` strategy is not yet stable and does not yet work with the [`app`](/docs/app/building-your-application/routing/defining-routes) directory. Use with caution.\n\nScripts that use the `worker` strategy are offloaded and executed in a web worker with [Partytown](https://partytown.builder.io/). This can improve the performance of your site by dedicating the main thread to the rest of your application code.\n\nThis strategy is still experimental and can only be used if the `nextScriptWorkers` flag is enabled in `next.config.js`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    nextScriptWorkers: true,\n  },\n}\n```\n\nThen, run `next` (normally `npm run dev` or `yarn dev`) and Next.js will guide you through the installation of the required packages to finish the setup:\n\n```bash filename=\"Terminal\"\nnpm run dev\n```\n\nYou'll see instructions like these: Please install Partytown by running `npm install @builder.io/partytown`\n\nOnce setup is complete, defining `strategy=\"worker\"` will automatically instantiate Partytown in your application and offload the script to a web worker.\n\n```tsx filename=\"pages/home.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\n```jsx filename=\"pages/home.js\" switcher\nimport Script from 'next/script'\n\nexport default function Home() {\n  return (\n    <>\n      <Script src=\"https://example.com/script.js\" strategy=\"worker\" />\n    </>\n  )\n}\n```\n\nThere are a number of trade-offs that need to be considered when loading a third-party script in a web worker. Please see Partytown's [tradeoffs](https://partytown.builder.io/trade-offs) documentation for more information.\n\n### Inline Scripts\n\nInline scripts, or scripts not loaded from an external file, are also supported by the Script component. They can be written by placing the JavaScript within curly braces:\n\n```jsx\n<Script id=\"show-banner\">\n  {`document.getElementById('banner').classList.remove('hidden')`}\n</Script>\n```\n\nOr by using the `dangerouslySetInnerHTML` property:\n\n```jsx\n<Script\n  id=\"show-banner\"\n  dangerouslySetInnerHTML={{\n    __html: `document.getElementById('banner').classList.remove('hidden')`,\n  }}\n/>\n```\n\n> **Warning**: An `id` property must be assigned for inline scripts in order for Next.js to track and optimize the script.\n\n### Executing Additional Code\n\nEvent handlers can be used with the Script component to execute additional code after a certain event occurs:\n\n- `onLoad`: Execute code after the script has finished loading.\n- `onReady`: Execute code after the script has finished loading and every time the component is mounted.\n- `onError`: Execute code if the script fails to load.\n\n<AppOnly>\n\nThese handlers will only work when `next/script` is imported and used inside of a [Client Component](/docs/app/building-your-application/rendering/client-components) where `\"use client\"` is defined as the first line of code:\n\n```tsx filename=\"app/page.tsx\" switcher\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n'use client'\n\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\nRefer to the [`next/script`](/docs/app/api-reference/components/script#onload) API reference to learn more about each event handler and view examples.\n\n</AppOnly>\n\n<PagesOnly>\n\nThese handlers will only work when `next/script` is imported and used inside of a [Client Component](/docs/app/building-your-application/rendering/client-components) where `\"use client\"` is defined as the first line of code:\n\n```tsx filename=\"pages/index.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"pages/index.js\" switcher\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        onLoad={() => {\n          console.log('Script has loaded')\n        }}\n      />\n    </>\n  )\n}\n```\n\nRefer to the [`next/script`](/docs/pages/api-reference/components/script#onload) API reference to learn more about each event handler and view examples.\n\n</PagesOnly>\n\n### Additional Attributes\n\nThere are many DOM attributes that can be assigned to a `<script>` element that are not used by the Script component, like [`nonce`](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/nonce) or [custom data attributes](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/data-*). Including any additional attributes will automatically forward it to the final, optimized `<script>` element that is included in the HTML.\n\n<AppOnly>\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/index.tsx\" switcher\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n```jsx filename=\"pages/index.js\" switcher\nimport Script from 'next/script'\n\nexport default function Page() {\n  return (\n    <>\n      <Script\n        src=\"https://example.com/script.js\"\n        id=\"example-script\"\n        nonce=\"XUENAJFW\"\n        data-test=\"script\"\n      />\n    </>\n  )\n}\n```\n\n</PagesOnly>\n", "01-building-your-application/06-optimizing/01-images.mdx": "---\ntitle: Image Optimization\nnav_title: Images\ndescription: Optimize your images with the built-in `next/image` component.\nrelated:\n  title: API Reference\n  description: Learn more about the next/image API.\n  links:\n    - app/api-reference/components/image\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<details>\n  <summary>Examples</summary>\n\n- [Image Component](https://github.com/vercel/next.js/tree/canary/examples/image-component)\n\n</details>\n\nAccording to [Web Almanac](https://almanac.httparchive.org), images account for a huge portion of the typical website\u2019s [page weight](https://almanac.httparchive.org/en/2022/page-weight#content-type-and-file-formats) and can have a sizable impact on your website's [LCP performance](https://almanac.httparchive.org/en/2022/performance#lcp-image-optimization).\n\nThe Next.js Image component extends the HTML `<img>` element with features for automatic image optimization:\n\n- **Size Optimization:** Automatically serve correctly sized images for each device, using modern image formats like WebP and AVIF.\n- **Visual Stability:** Prevent [layout shift](/learn/seo/web-performance/cls) automatically when images are loading.\n- **Faster Page Loads:** Images are only loaded when they enter the viewport using native browser lazy loading, with optional blur-up placeholders.\n- **Asset Flexibility:** On-demand image resizing, even for images stored on remote servers\n\n> **\ud83c\udfa5 Watch:** Learn more about how to use `next/image` \u2192 [YouTube (9 minutes)](https://youtu.be/IU_qq_c_lKA).\n\n## Usage\n\n```js\nimport Image from 'next/image'\n```\n\nYou can then define the `src` for your image (either local or remote).\n\n### Local Images\n\nTo use a local image, `import` your `.jpg`, `.png`, or `.webp` image files.\n\nNext.js will [automatically determine](#image-sizing) the `width` and `height` of your image based on the imported file. These values are used to prevent [Cumulative Layout Shift](https://nextjs.org/learn/seo/web-performance/cls) while your image is loading.\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\nimport profilePic from './me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n\nexport default function Page() {\n  return (\n    <Image\n      src={profilePic}\n      alt=\"Picture of the author\"\n      // width={500} automatically provided\n      // height={500} automatically provided\n      // blurDataURL=\"data:...\" automatically provided\n      // placeholder=\"blur\" // Optional blur-up while loading\n    />\n  )\n}\n```\n\n</PagesOnly>\n\n> **Warning:** Dynamic `await import()` or `require()` are _not_ supported. The `import` must be static so it can be analyzed at build time.\n\n### Remote Images\n\nTo use a remote image, the `src` property should be a URL string.\n\nSince Next.js does not have access to remote files during the build process, you'll need to provide the [`width`](/docs/app/api-reference/components/image#width), [`height`](/docs/app/api-reference/components/image#height) and optional [`blurDataURL`](/docs/app/api-reference/components/image#blurdataurl) props manually.\n\nThe `width` and `height` attributes are used to infer the correct aspect ratio of image and avoid layout shift from the image loading in. The `width` and `height` do _not_ determine the rendered size of the image file. Learn more about [Image Sizing](#image-sizing).\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\n\nexport default function Page() {\n  return (\n    <Image\n      src=\"https://s3.amazonaws.com/my-bucket/profile.png\"\n      alt=\"Picture of the author\"\n      width={500}\n      height={500}\n    />\n  )\n}\n```\n\nTo safely allow optimizing images, define a list of supported URL patterns in `next.config.js`. Be as specific as possible to prevent malicious usage. For example, the following configuration will only allow images from a specific AWS S3 bucket:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 's3.amazonaws.com',\n        port: '',\n        pathname: '/my-bucket/**',\n      },\n    ],\n  },\n}\n```\n\nLearn more about [`remotePatterns`](/docs/app/api-reference/components/image#remotepatterns) configuration. If you want to use relative URLs for the image `src`, use a [`loader`](/docs/app/api-reference/components/image#loader).\n\n### Domains\n\nSometimes you may want to optimize a remote image, but still use the built-in Next.js Image Optimization API. To do this, leave the `loader` at its default setting and enter an absolute URL for the Image `src` prop.\n\nTo protect your application from malicious users, you must define a list of remote hostnames you intend to use with the `next/image` component.\n\n> Learn more about [`remotePatterns`](/docs/app/api-reference/components/image#remotepatterns) configuration.\n\n### Loaders\n\nNote that in the [example earlier](#local-images), a partial URL (`\"/me.png\"`) is provided for a local image. This is possible because of the loader architecture.\n\nA loader is a function that generates the URLs for your image. It modifies the provided `src`, and generates multiple URLs to request the image at different sizes. These multiple URLs are used in the automatic [srcset](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset) generation, so that visitors to your site will be served an image that is the right size for their viewport.\n\nThe default loader for Next.js applications uses the built-in Image Optimization API, which optimizes images from anywhere on the web, and then serves them directly from the Next.js web server. If you would like to serve your images directly from a CDN or image server, you can write your own loader function with a few lines of JavaScript.\n\nYou can define a loader per-image with the [`loader` prop](/docs/app/api-reference/components/image#loader), or at the application level with the [`loaderFile` configuration](/docs/app/api-reference/components/image#loaderfile).\n\n## Priority\n\nYou should add the `priority` property to the image that will be the [Largest Contentful Paint (LCP) element](https://web.dev/lcp/#what-elements-are-considered) for each page. Doing so allows Next.js to specially prioritize the image for loading (e.g. through preload tags or priority hints), leading to a meaningful boost in LCP.\n\nThe LCP element is typically the largest image or text block visible within the viewport of the page. When you run `next dev`, you'll see a console warning if the LCP element is an `<Image>` without the `priority` property.\n\nOnce you've identified the LCP image, you can add the property like this:\n\n<PagesOnly>\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\n\nexport default function Home() {\n  return (\n    <>\n      <h1>My Homepage</h1>\n      <Image\n        src=\"/me.png\"\n        alt=\"Picture of the author\"\n        width={500}\n        height={500}\n        priority\n      />\n      <p>Welcome to my homepage!</p>\n    </>\n  )\n}\n```\n\n</PagesOnly>\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport Image from 'next/image'\nimport profilePic from '../public/me.png'\n\nexport default function Page() {\n  return <Image src={profilePic} alt=\"Picture of the author\" priority />\n}\n```\n\n</AppOnly>\n\nSee more about priority in the [`next/image` component documentation](/docs/app/api-reference/components/image#priority).\n\n## Image Sizing\n\nOne of the ways that images most commonly hurt performance is through _layout shift_, where the image pushes other elements around on the page as it loads in. This performance problem is so annoying to users that it has its own Core Web Vital, called [Cumulative Layout Shift](https://web.dev/cls/). The way to avoid image-based layout shifts is to [always size your images](https://web.dev/optimize-cls/#images-without-dimensions). This allows the browser to reserve precisely enough space for the image before it loads.\n\nBecause `next/image` is designed to guarantee good performance results, it cannot be used in a way that will contribute to layout shift, and **must** be sized in one of three ways:\n\n1. Automatically, using a [static import](#local-images)\n2. Explicitly, by including a [`width`](/docs/app/api-reference/components/image#width) and [`height`](/docs/app/api-reference/components/image#height) property\n3. Implicitly, by using [fill](/docs/app/api-reference/components/image#fill) which causes the image to expand to fill its parent element.\n\n> **What if I don't know the size of my images?**\n>\n> If you are accessing images from a source without knowledge of the images' sizes, there are several things you can do:\n>\n> **Use `fill`**\n>\n> The [`fill`](/docs/app/api-reference/components/image#fill) prop allows your image to be sized by its parent element. Consider using CSS to give the image's parent element space on the page along [`sizes`](/docs/app/api-reference/components/image#sizes) prop to match any media query break points. You can also use [`object-fit`](https://developer.mozilla.org/docs/Web/CSS/object-fit) with `fill`, `contain`, or `cover`, and [`object-position`](https://developer.mozilla.org/docs/Web/CSS/object-position) to define how the image should occupy that space.\n>\n> **Normalize your images**\n>\n> If you're serving images from a source that you control, consider modifying your image pipeline to normalize the images to a specific size.\n>\n> **Modify your API calls**\n>\n> If your application is retrieving image URLs using an API call (such as to a CMS), you may be able to modify the API call to return the image dimensions along with the URL.\n\nIf none of the suggested methods works for sizing your images, the `next/image` component is designed to work well on a page alongside standard `<img>` elements.\n\n## Styling\n\nStyling the Image component is similar to styling a normal `<img>` element, but there are a few guidelines to keep in mind:\n\n- Use `className` or `style`, not `styled-jsx`.\n  - In most cases, we recommend using the `className` prop. This can be an imported [CSS Module](/docs/app/building-your-application/styling/css-modules), a [global stylesheet](/docs/app/building-your-application/styling/css-modules#global-styles), etc.\n  - You can also use the `style` prop to assign inline styles.\n  - You cannot use [styled-jsx](/docs/app/building-your-application/styling/css-in-js) because it's scoped to the current component (unless you mark the style as `global`).\n- When using `fill`, the parent element must have `position: relative`\n  - This is necessary for the proper rendering of the image element in that layout mode.\n- When using `fill`, the parent element must have `display: block`\n  - This is the default for `<div>` elements but should be specified otherwise.\n\n## Examples\n\n### Responsive\n\n<Image\n  alt=\"Responsive image filling the width and height of its parent container\"\n  srcLight=\"/docs/light/responsive-image.png\"\n  srcDark=\"/docs/dark/responsive-image.png\"\n  width=\"1600\"\n  height=\"629\"\n/>\n\n```jsx\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Responsive() {\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column' }}>\n      <Image\n        alt=\"Mountains\"\n        // Importing an image will\n        // automatically set the width and height\n        src={mountains}\n        sizes=\"100vw\"\n        // Make the image display full width\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      />\n    </div>\n  )\n}\n```\n\n### Fill Container\n\n<Image\n  alt=\"Grid of images filling parent container width\"\n  srcLight=\"/docs/light/fill-container.png\"\n  srcDark=\"/docs/dark/fill-container.png\"\n  width=\"1600\"\n  height=\"529\"\n/>\n\n```jsx\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Fill() {\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridGap: '8px',\n        gridTemplateColumns: 'repeat(auto-fit, minmax(400px, auto))',\n      }}\n    >\n      <div style={{ position: 'relative', height: '400px' }}>\n        <Image\n          alt=\"Mountains\"\n          src={mountains}\n          fill\n          sizes=\"(min-width: 808px) 50vw, 100vw\"\n          style={{\n            objectFit: 'cover', // cover, contain, none\n          }}\n        />\n      </div>\n      {/* And more images in the grid... */}\n    </div>\n  )\n}\n```\n\n### Background Image\n\n<Image\n  alt=\"Background image taking full width and height of page\"\n  srcLight=\"/docs/light/background-image.png\"\n  srcDark=\"/docs/dark/background-image.png\"\n  width=\"1600\"\n  height=\"427\"\n/>\n\n```jsx\nimport Image from 'next/image'\nimport mountains from '../public/mountains.jpg'\n\nexport default function Background() {\n  return (\n    <Image\n      alt=\"Mountains\"\n      src={mountains}\n      placeholder=\"blur\"\n      quality={100}\n      fill\n      sizes=\"100vw\"\n      style={{\n        objectFit: 'cover',\n      }}\n    />\n  )\n}\n```\n\nFor examples of the Image component used with the various styles, see the [Image Component Demo](https://image-component.nextjs.gallery).\n\n## Other Properties\n\n[**View all properties available to the `next/image` component.**](/docs/app/api-reference/components/image)\n\n## Configuration\n\nThe `next/image` component and Next.js Image Optimization API can be configured in the [`next.config.js` file](/docs/app/api-reference/next-config-js). These configurations allow you to [enable remote images](/docs/app/api-reference/components/image#remotepatterns), [define custom image breakpoints](/docs/app/api-reference/components/image#devicesizes), [change caching behavior](/docs/app/api-reference/components/image#caching-behavior) and more.\n\n[**Read the full image configuration documentation for more information.**](/docs/app/api-reference/components/image#configuration-options)\n", "01-building-your-application/06-optimizing/06-bundle-analyzer.mdx": "---\ntitle: Bundle Analyzer\ndescription: Analyze the size of your JavaScript bundles using the @next/bundle-analyzer plugin.\nrelated:\n  description: Learn more about optimizing your application for production.\n  links:\n    - app/building-your-application/deploying/production-checklist\n---\n\n[`@next/bundle-analyzer`](https://www.npmjs.com/package/@next/bundle-analyzer) is a plugin for Next.js that helps you manage the size of your JavaScript modules. It generates a visual report of the size of each module and their dependencies. You can use the information to remove large dependencies, split your code, or only load some parts when needed, reducing the amount of data transferred to the client.\n\n## Installation\n\nInstall the plugin by running the following command:\n\n```bash\nnpm i @next/bundle-analyzer\n# or\nyarn add @next/bundle-analyzer\n# or\npnpm add @next/bundle-analyzer\n```\n\nThen, add the bundle analyzer's settings to your `next.config.js`.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {}\n\nconst withBundleAnalyzer = require('@next/bundle-analyzer')()\n\nmodule.exports =\n  process.env.ANALYZE === 'true' ? withBundleAnalyzer(nextConfig) : nextConfig\n```\n\n## Analyzing your bundles\n\nRun the following command to analyze your bundles:\n\n```bash\nANALYZE=true npm run build\n# or\nANALYZE=true yarn build\n# or\nANALYZE=true pnpm build\n```\n\nThe report will open three new tabs in your browser, which you can inspect. Doing this regularly while you develop and before deploying your site can help you identify large bundles earlier, and architect your application to be more performant.\n", "01-building-your-application/06-optimizing/07-lazy-loading.mdx": "---\ntitle: Lazy Loading\ndescription: Lazy load imported libraries and React Components to improve your application's loading performance.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n[Lazy loading](https://developer.mozilla.org/docs/Web/Performance/Lazy_loading) in Next.js helps improve the initial loading performance of an application by decreasing the amount of JavaScript needed to render a route.\n\nIt allows you to defer loading of **Client Components** and imported libraries, and only include them in the client bundle when they're needed. For example, you might want to defer loading a modal until a user clicks to open it.\n\nThere are two ways you can implement lazy loading in Next.js:\n\n1. Using [Dynamic Imports](#nextdynamic) with `next/dynamic`\n2. Using [`React.lazy()`](https://react.dev/reference/react/lazy) with [Suspense](https://react.dev/reference/react/Suspense)\n\nBy default, Server Components are automatically [code split](https://developer.mozilla.org/docs/Glossary/Code_splitting), and you can use [streaming](/docs/app/building-your-application/routing/loading-ui-and-streaming) to progressively send pieces of UI from the server to the client. Lazy loading applies to Client Components.\n\n## `next/dynamic`\n\n`next/dynamic` is a composite of [`React.lazy()`](https://react.dev/reference/react/lazy) and [Suspense](https://react.dev/reference/react/Suspense). It behaves the same way in the `app` and `pages` directories to allow for incremental migration.\n\n## Examples\n\n<AppOnly>\n### Importing Client Components\n\n```jsx filename=\"app/page.js\"\n'use client'\n\nimport { useState } from 'react'\nimport dynamic from 'next/dynamic'\n\n// Client Components:\nconst ComponentA = dynamic(() => import('../components/A'))\nconst ComponentB = dynamic(() => import('../components/B'))\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\n\nexport default function ClientComponentExample() {\n  const [showMore, setShowMore] = useState(false)\n\n  return (\n    <div>\n      {/* Load immediately, but in a separate client bundle */}\n      <ComponentA />\n\n      {/* Load on demand, only when/if the condition is met */}\n      {showMore && <ComponentB />}\n      <button onClick={() => setShowMore(!showMore)}>Toggle</button>\n\n      {/* Load only on the client side */}\n      <ComponentC />\n    </div>\n  )\n}\n```\n\n### Skipping SSR\n\nWhen using `React.lazy()` and Suspense, Client Components will be pre-rendered (SSR) by default.\n\nIf you want to disable pre-rendering for a Client Component, you can use the `ssr` option set to `false`:\n\n```jsx\nconst ComponentC = dynamic(() => import('../components/C'), { ssr: false })\n```\n\n### Importing Server Components\n\nIf you dynamically import a Server Component, only the Client Components that are children of the Server Component will be lazy-loaded - not the Server Component itself.\n\n```jsx filename=\"app/page.js\"\nimport dynamic from 'next/dynamic'\n\n// Server Component:\nconst ServerComponent = dynamic(() => import('../components/ServerComponent'))\n\nexport default function ServerComponentExample() {\n  return (\n    <div>\n      <ServerComponent />\n    </div>\n  )\n}\n```\n\n### Loading External Libraries\n\nExternal libraries can be loaded on demand using the [`import()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/import) function. This example uses the external library `fuse.js` for fuzzy search. The module is only loaded on the client after the user types in the search input.\n\n```jsx filename=\"app/page.js\"\n'use client'\n\nimport { useState } from 'react'\n\nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n\nexport default function Page() {\n  const [results, setResults] = useState()\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n\n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n### Adding a custom loading component\n\n```jsx filename=\"app/page.js\"\nimport dynamic from 'next/dynamic'\n\nconst WithCustomLoading = dynamic(\n  () => import('../components/WithCustomLoading'),\n  {\n    loading: () => <p>Loading...</p>,\n  }\n)\n\nexport default function Page() {\n  return (\n    <div>\n      {/* The loading component will be rendered while  <WithCustomLoading/> is loading */}\n      <WithCustomLoading />\n    </div>\n  )\n}\n```\n\n### Importing Named Exports\n\nTo dynamically import a named export, you can return it from the Promise returned by [`import()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/import) function:\n\n```jsx filename=\"components/hello.js\"\n'use client'\n\nexport function Hello() {\n  return <p>Hello!</p>\n}\n```\n\n```jsx filename=\"app/page.js\"\nimport dynamic from 'next/dynamic'\n\nconst ClientComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nBy using `next/dynamic`, the header component will not be included in the page's initial JavaScript bundle. The page will render the Suspense `fallback` first, followed by the `Header` component when the `Suspense` boundary is resolved.\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicHeader = dynamic(() => import('../components/header'), {\n  loading: () => <p>Loading...</p>,\n})\n\nexport default function Home() {\n  return <DynamicHeader />\n}\n```\n\n> **Good to know**: In `import('path/to/component')`, the path must be explicitly written. It can't be a template string nor a variable. Furthermore the `import()` has to be inside the `dynamic()` call for Next.js to be able to match webpack bundles / module ids to the specific `dynamic()` call and preload them before rendering. `dynamic()` can't be used inside of React rendering as it needs to be marked in the top level of the module for preloading to work, similar to `React.lazy`.\n\n## With named exports\n\nTo dynamically import a named export, you can return it from the [Promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise) returned by [`import()`](https://github.com/tc39/proposal-dynamic-import#example):\n\n```jsx filename=\"components/hello.js\"\nexport function Hello() {\n  return <p>Hello!</p>\n}\n\n// pages/index.js\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponent = dynamic(() =>\n  import('../components/hello').then((mod) => mod.Hello)\n)\n```\n\n## With no SSR\n\nTo dynamically load a component on the client side, you can use the `ssr` option to disable server-rendering. This is useful if an external dependency or component relies on browser APIs like `window`.\n\n```jsx\nimport dynamic from 'next/dynamic'\n\nconst DynamicHeader = dynamic(() => import('../components/header'), {\n  ssr: false,\n})\n```\n\n## With external libraries\n\nThis example uses the external library `fuse.js` for fuzzy search. The module is only loaded in the browser after the user types in the search input.\n\n```jsx\nimport { useState } from 'react'\n\nconst names = ['Tim', 'Joe', 'Bel', 'Lee']\n\nexport default function Page() {\n  const [results, setResults] = useState()\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={async (e) => {\n          const { value } = e.currentTarget\n          // Dynamically load fuse.js\n          const Fuse = (await import('fuse.js')).default\n          const fuse = new Fuse(names)\n\n          setResults(fuse.search(value))\n        }}\n      />\n      <pre>Results: {JSON.stringify(results, null, 2)}</pre>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n", "01-building-your-application/06-optimizing/04-metadata.mdx": "---\ntitle: Metadata\ndescription: Use the Metadata API to define metadata in any layout or page.\nrelated:\n  description: View all the Metadata API options.\n  links:\n    - app/api-reference/functions/generate-metadata\n    - app/api-reference/file-conventions/metadata\n    - app/api-reference/functions/generate-viewport\n---\n\nNext.js has a Metadata API that can be used to define your application metadata (e.g. `meta` and `link` tags inside your HTML `head` element) for improved SEO and web shareability.\n\nThere are two ways you can add metadata to your application:\n\n- **Config-based Metadata**: Export a [static `metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object) or a dynamic [`generateMetadata` function](/docs/app/api-reference/functions/generate-metadata#generatemetadata-function) in a `layout.js` or `page.js` file.\n- **File-based Metadata**: Add static or dynamically generated special files to route segments.\n\nWith both these options, Next.js will automatically generate the relevant `<head>` elements for your pages. You can also create dynamic OG images using the [`ImageResponse`](/docs/app/api-reference/functions/image-response) constructor.\n\n## Static Metadata\n\nTo define static metadata, export a [`Metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object) from a `layout.js` or static `page.js` file.\n\n```tsx filename=\"layout.tsx | page.tsx\" switcher\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\n```jsx filename=\"layout.js | page.js\" switcher\nexport const metadata = {\n  title: '...',\n  description: '...',\n}\n\nexport default function Page() {}\n```\n\nFor all the available options, see the [API Reference](/docs/app/api-reference/functions/generate-metadata).\n\n## Dynamic Metadata\n\nYou can use `generateMetadata` function to `fetch` metadata that requires dynamic values.\n\n```tsx filename=\"app/products/[id]/page.tsx\" switcher\nimport type { Metadata, ResolvingMetadata } from 'next'\n\ntype Props = {\n  params: { id: string }\n  searchParams: { [key: string]: string | string[] | undefined }\n}\n\nexport async function generateMetadata(\n  { params, searchParams }: Props,\n  parent: ResolvingMetadata\n): Promise<Metadata> {\n  // read route params\n  const id = params.id\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }: Props) {}\n```\n\n```jsx filename=\"app/products/[id]/page.js\" switcher\nexport async function generateMetadata({ params, searchParams }, parent) {\n  // read route params\n  const id = params.id\n\n  // fetch data\n  const product = await fetch(`https://.../${id}`).then((res) => res.json())\n\n  // optionally access and extend (rather than replace) parent metadata\n  const previousImages = (await parent).openGraph?.images || []\n\n  return {\n    title: product.title,\n    openGraph: {\n      images: ['/some-specific-page-image.jpg', ...previousImages],\n    },\n  }\n}\n\nexport default function Page({ params, searchParams }) {}\n```\n\nFor all the available params, see the [API Reference](/docs/app/api-reference/functions/generate-metadata).\n\n> **Good to know**:\n>\n> - Both static and dynamic metadata through `generateMetadata` are **only supported in Server Components**.\n> - `fetch` requests are automatically [memoized](/docs/app/building-your-application/caching#request-memoization) for the same data across `generateMetadata`, `generateStaticParams`, Layouts, Pages, and Server Components. React [`cache` can be used](/docs/app/building-your-application/caching#request-memoization) if `fetch` is unavailable.\n> - Next.js will wait for data fetching inside `generateMetadata` to complete before streaming UI to the client. This guarantees the first part of a [streamed response](/docs/app/building-your-application/routing/loading-ui-and-streaming) includes `<head>` tags.\n\n## File-based metadata\n\nThese special files are available for metadata:\n\n- [favicon.ico, apple-icon.jpg, and icon.jpg](/docs/app/api-reference/file-conventions/metadata/app-icons)\n- [opengraph-image.jpg and twitter-image.jpg](/docs/app/api-reference/file-conventions/metadata/opengraph-image)\n- [robots.txt](/docs/app/api-reference/file-conventions/metadata/robots)\n- [sitemap.xml](/docs/app/api-reference/file-conventions/metadata/sitemap)\n\nYou can use these for static metadata, or you can programmatically generate these files with code.\n\nFor implementation and examples, see the [Metadata Files](/docs/app/api-reference/file-conventions/metadata) API Reference and [Dynamic Image Generation](#dynamic-image-generation).\n\n## Behavior\n\nFile-based metadata has the higher priority and will override any config-based metadata.\n\n### Default Fields\n\nThere are two default `meta` tags that are always added even if a route doesn't define metadata:\n\n- The [meta charset tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta#attr-charset) sets the character encoding for the website.\n- The [meta viewport tag](https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag) sets the viewport width and scale for the website to adjust for different devices.\n\n```html\n<meta charset=\"utf-8\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n```\n\n> **Good to know**: You can overwrite the default [`viewport`](/docs/app/api-reference/functions/generate-metadata#viewport) meta tag.\n\n### Ordering\n\nMetadata is evaluated in order, starting from the root segment down to the segment closest to the final `page.js` segment. For example:\n\n1. `app/layout.tsx` (Root Layout)\n2. `app/blog/layout.tsx` (Nested Blog Layout)\n3. `app/blog/[slug]/page.tsx` (Blog Page)\n\n### Merging\n\nFollowing the [evaluation order](#ordering), Metadata objects exported from multiple segments in the same route are **shallowly** merged together to form the final metadata output of a route. Duplicate keys are **replaced** based on their ordering.\n\nThis means metadata with nested fields such as [`openGraph`](/docs/app/api-reference/functions/generate-metadata#opengraph) and [`robots`](/docs/app/api-reference/functions/generate-metadata#robots) that are defined in an earlier segment are **overwritten** by the last segment to define them.\n\n#### Overwriting fields\n\n```jsx filename=\"app/layout.js\"\nexport const metadata = {\n  title: 'Acme',\n  openGraph: {\n    title: 'Acme',\n    description: 'Acme is a...',\n  },\n}\n```\n\n```jsx filename=\"app/blog/page.js\"\nexport const metadata = {\n  title: 'Blog',\n  openGraph: {\n    title: 'Blog',\n  },\n}\n\n// Output:\n// <title>Blog</title>\n// <meta property=\"og:title\" content=\"Blog\" />\n```\n\nIn the example above:\n\n- `title` from `app/layout.js` is **replaced** by `title` in `app/blog/page.js`.\n- All `openGraph` fields from `app/layout.js` are **replaced** in `app/blog/page.js` because `app/blog/page.js` sets `openGraph` metadata. Note the absence of `openGraph.description`.\n\nIf you'd like to share some nested fields between segments while overwriting others, you can pull them out into a separate variable:\n\n```jsx filename=\"app/shared-metadata.js\"\nexport const openGraphImage = { images: ['http://...'] }\n```\n\n```jsx filename=\"app/page.js\"\nimport { openGraphImage } from './shared-metadata'\n\nexport const metadata = {\n  openGraph: {\n    ...openGraphImage,\n    title: 'Home',\n  },\n}\n```\n\n```jsx filename=\"app/about/page.js\"\nimport { openGraphImage } from '../shared-metadata'\n\nexport const metadata = {\n  openGraph: {\n    ...openGraphImage,\n    title: 'About',\n  },\n}\n```\n\nIn the example above, the OG image is shared between `app/layout.js` and `app/about/page.js` while the titles are different.\n\n#### Inheriting fields\n\n```jsx filename=\"app/layout.js\"\nexport const metadata = {\n  title: 'Acme',\n  openGraph: {\n    title: 'Acme',\n    description: 'Acme is a...',\n  },\n}\n```\n\n```jsx filename=\"app/about/page.js\"\nexport const metadata = {\n  title: 'About',\n}\n\n// Output:\n// <title>About</title>\n// <meta property=\"og:title\" content=\"Acme\" />\n// <meta property=\"og:description\" content=\"Acme is a...\" />\n```\n\n**Notes**\n\n- `title` from `app/layout.js` is **replaced** by `title` in `app/about/page.js`.\n- All `openGraph` fields from `app/layout.js` are **inherited** in `app/about/page.js` because `app/about/page.js` doesn't set `openGraph` metadata.\n\n## Dynamic Image Generation\n\nThe `ImageResponse` constructor allows you to generate dynamic images using JSX and CSS. This is useful for creating social media images such as Open Graph images, Twitter cards, and more.\n\nTo use it, you can import `ImageResponse` from `next/og`:\n\n```jsx filename=\"app/about/route.js\"\nimport { ImageResponse } from 'next/og'\n\nexport async function GET() {\n  return new ImageResponse(\n    (\n      <div\n        style={{\n          fontSize: 128,\n          background: 'white',\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          textAlign: 'center',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Hello world!\n      </div>\n    ),\n    {\n      width: 1200,\n      height: 600,\n    }\n  )\n}\n```\n\n`ImageResponse` integrates well with other Next.js APIs, including [Route Handlers](/docs/app/building-your-application/routing/route-handlers) and file-based Metadata. For example, you can use `ImageResponse` in a `opengraph-image.tsx` file to generate Open Graph images at build time or dynamically at request time.\n\n`ImageResponse` supports common CSS properties including flexbox and absolute positioning, custom fonts, text wrapping, centering, and nested images. [See the full list of supported CSS properties](/docs/app/api-reference/functions/image-response).\n\n> **Good to know**:\n>\n> - Examples are available in the [Vercel OG Playground](https://og-playground.vercel.app/).\n> - `ImageResponse` uses [@vercel/og](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation), [Satori](https://github.com/vercel/satori), and Resvg to convert HTML and CSS into PNG.\n> - Only the Edge Runtime is supported. The default Node.js runtime will not work.\n> - Only flexbox and a subset of CSS properties are supported. Advanced layouts (e.g. `display: grid`) will not work.\n> - Maximum bundle size of `500KB`. The bundle size includes your JSX, CSS, fonts, images, and any other assets. If you exceed the limit, consider reducing the size of any assets or fetching at runtime.\n> - Only `ttf`, `otf`, and `woff` font formats are supported. To maximize the font parsing speed, `ttf` or `otf` are preferred over `woff`.\n\n## JSON-LD\n\n[JSON-LD](https://json-ld.org/) is a format for structured data that can be used by search engines to understand your content. For example, you can use it to describe a person, an event, an organization, a movie, a book, a recipe, and many other types of entities.\n\nOur current recommendation for JSON-LD is to render structured data as a `<script>` tag in your `layout.js` or `page.js` components. For example:\n\n```tsx filename=\"app/products/[id]/page.tsx\" switcher\nexport default async function Page({ params }) {\n  const product = await getProduct(params.id)\n\n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n\n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n```\n\n```jsx filename=\"app/products/[id]/page.js\" switcher\nexport default async function Page({ params }) {\n  const product = await getProduct(params.id)\n\n  const jsonLd = {\n    '@context': 'https://schema.org',\n    '@type': 'Product',\n    name: product.name,\n    image: product.image,\n    description: product.description,\n  }\n\n  return (\n    <section>\n      {/* Add JSON-LD to your page */}\n      <script\n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}\n      />\n      {/* ... */}\n    </section>\n  )\n}\n```\n\nYou can validate and test your structured data with the [Rich Results Test](https://search.google.com/test/rich-results) for Google or the generic [Schema Markup Validator](https://validator.schema.org/).\n\nYou can type your JSON-LD with TypeScript using community packages like [`schema-dts`](https://www.npmjs.com/package/schema-dts):\n\n```tsx\nimport { Product, WithContext } from 'schema-dts'\n\nconst jsonLd: WithContext<Product> = {\n  '@context': 'https://schema.org',\n  '@type': 'Product',\n  name: 'Next.js Sticker',\n  image: 'https://nextjs.org/imgs/sticker.png',\n  description: 'Dynamic at the speed of static.',\n}\n```\n", "01-building-your-application/06-optimizing/10-open-telemetry.mdx": "---\ntitle: OpenTelemetry\ndescription: Learn how to instrument your Next.js app with OpenTelemetry.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n> **Good to know**: This feature is **experimental**, you need to explicitly opt-in by providing `experimental.instrumentationHook = true;` in your `next.config.js`.\n\nObservability is crucial for understanding and optimizing the behavior and performance of your Next.js app.\n\nAs applications become more complex, it becomes increasingly difficult to identify and diagnose issues that may arise. By leveraging observability tools, such as logging and metrics, developers can gain insights into their application's behavior and identify areas for optimization. With observability, developers can proactively address issues before they become major problems and provide a better user experience. Therefore, it is highly recommended to use observability in your Next.js applications to improve performance, optimize resources, and enhance user experience.\n\nWe recommend using OpenTelemetry for instrumenting your apps.\nIt's a platform-agnostic way to instrument apps that allows you to change your observability provider without changing your code.\nRead [Official OpenTelemetry docs](https://opentelemetry.io/docs/) for more information about OpenTelemetry and how it works.\n\nThis documentation uses terms like _Span_, _Trace_ or _Exporter_ throughout this doc, all of which can be found in [the OpenTelemetry Observability Primer](https://opentelemetry.io/docs/concepts/observability-primer/).\n\nNext.js supports OpenTelemetry instrumentation out of the box, which means that we already instrumented Next.js itself.\nWhen you enable OpenTelemetry we will automatically wrap all your code like `getStaticProps` in _spans_ with helpful attributes.\n\n## Getting Started\n\nOpenTelemetry is extensible but setting it up properly can be quite verbose.\nThat's why we prepared a package `@vercel/otel` that helps you get started quickly.\n\n### Using `@vercel/otel`\n\nTo get started, you must install `@vercel/otel`:\n\n```bash filename=\"Terminal\"\nnpm install @vercel/otel\n```\n\n<AppOnly>\n\nNext, create a custom [`instrumentation.ts`](/docs/app/building-your-application/optimizing/instrumentation) (or `.js`) file in the **root directory** of the project (or inside `src` folder if using one):\n\n</AppOnly>\n\n<PagesOnly>\n\nNext, create a custom [`instrumentation.ts`](/docs/pages/building-your-application/optimizing/instrumentation) (or `.js`) file in the **root directory** of the project (or inside `src` folder if using one):\n\n</PagesOnly>\n\n```ts filename=\"your-project/instrumentation.ts\" switcher\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n```\n\n```js filename=\"your-project/instrumentation.js\" switcher\nimport { registerOTel } from '@vercel/otel'\n\nexport function register() {\n  registerOTel({ serviceName: 'next-app' })\n}\n```\n\nSee the [`@vercel/otel` documentation](https://www.npmjs.com/package/@vercel/otel) for additional configuration options.\n\n<AppOnly>\n\n> **Good to know**\n>\n> - The `instrumentation` file should be in the root of your project and not inside the `app` or `pages` directory. If you're using the `src` folder, then place the file inside `src` alongside `pages` and `app`.\n> - If you use the [`pageExtensions` config option](/docs/app/api-reference/next-config-js/pageExtensions) to add a suffix, you will also need to update the `instrumentation` filename to match.\n> - We have created a basic [with-opentelemetry](https://github.com/vercel/next.js/tree/canary/examples/with-opentelemetry) example that you can use.\n\n</AppOnly>\n\n<PagesOnly>\n\n> **Good to know**\n>\n> - The `instrumentation` file should be in the root of your project and not inside the `app` or `pages` directory. If you're using the `src` folder, then place the file inside `src` alongside `pages` and `app`.\n> - If you use the [`pageExtensions` config option](/docs/pages/api-reference/next-config-js/pageExtensions) to add a suffix, you will also need to update the `instrumentation` filename to match.\n> - We have created a basic [with-opentelemetry](https://github.com/vercel/next.js/tree/canary/examples/with-opentelemetry) example that you can use.\n\n</PagesOnly>\n\n### Manual OpenTelemetry configuration\n\nThe `@vercel/otel` package provides many configuration options and should serve most of common use cases. But if it doesn't suit your needs, you can configure OpenTelemetry manually.\n\nFirstly you need to install OpenTelemetry packages:\n\n```bash filename=\"Terminal\"\nnpm install @opentelemetry/sdk-node @opentelemetry/resources @opentelemetry/semantic-conventions @opentelemetry/sdk-trace-node @opentelemetry/exporter-trace-otlp-http\n```\n\nNow you can initialize `NodeSDK` in your `instrumentation.ts`.\nUnlike `@vercel/otel`, `NodeSDK` is not compatible with edge runtime, so you need to make sure that you are importing them only when `process.env.NEXT_RUNTIME === 'nodejs'`. We recommend creating a new file `instrumentation.node.ts` which you conditionally import only when using node:\n\n```ts filename=\"instrumentation.ts\" switcher\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.ts')\n  }\n}\n```\n\n```js filename=\"instrumentation.js\" switcher\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    await import('./instrumentation.node.js')\n  }\n}\n```\n\n```ts filename=\"instrumentation.node.ts\" switcher\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n```\n\n```js filename=\"instrumentation.node.js\" switcher\nimport { NodeSDK } from '@opentelemetry/sdk-node'\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http'\nimport { Resource } from '@opentelemetry/resources'\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions'\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-node'\n\nconst sdk = new NodeSDK({\n  resource: new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: 'next-app',\n  }),\n  spanProcessor: new SimpleSpanProcessor(new OTLPTraceExporter()),\n})\nsdk.start()\n```\n\nDoing this is equivalent to using `@vercel/otel`, but it's possible to modify and extend some features that are not exposed by the `@vercel/otel`. If edge runtime support is necessary, you will have to use `@vercel/otel`.\n\n## Testing your instrumentation\n\nYou need an OpenTelemetry collector with a compatible backend to test OpenTelemetry traces locally.\nWe recommend using our [OpenTelemetry dev environment](https://github.com/vercel/opentelemetry-collector-dev-setup).\n\nIf everything works well you should be able to see the root server span labeled as `GET /requested/pathname`.\nAll other spans from that particular trace will be nested under it.\n\nNext.js traces more spans than are emitted by default.\nTo see more spans, you must set `NEXT_OTEL_VERBOSE=1`.\n\n## Deployment\n\n### Using OpenTelemetry Collector\n\nWhen you are deploying with OpenTelemetry Collector, you can use `@vercel/otel`.\nIt will work both on Vercel and when self-hosted.\n\n#### Deploying on Vercel\n\nWe made sure that OpenTelemetry works out of the box on Vercel.\n\nFollow [Vercel documentation](https://vercel.com/docs/concepts/observability/otel-overview/quickstart) to connect your project to an observability provider.\n\n#### Self-hosting\n\nDeploying to other platforms is also straightforward. You will need to spin up your own OpenTelemetry Collector to receive and process the telemetry data from your Next.js app.\n\nTo do this, follow the [OpenTelemetry Collector Getting Started guide](https://opentelemetry.io/docs/collector/getting-started/), which will walk you through setting up the collector and configuring it to receive data from your Next.js app.\n\nOnce you have your collector up and running, you can deploy your Next.js app to your chosen platform following their respective deployment guides.\n\n### Custom Exporters\n\nOpenTelemetry Collector is not necessary. You can use a custom OpenTelemetry exporter with [`@vercel/otel`](#using-vercelotel) or [manual OpenTelemetry configuration](/docs/pages/building-your-application/optimizing/open-telemetry#manual-opentelemetry-configuration).\n\n## Custom Spans\n\nYou can add a custom span with [OpenTelemetry APIs](https://opentelemetry.io/docs/instrumentation/js/instrumentation).\n\n```bash filename=\"Terminal\"\nnpm install @opentelemetry/api\n```\n\nThe following example demonstrates a function that fetches GitHub stars and adds a custom `fetchGithubStars` span to track the fetch request's result:\n\n```ts\nimport { trace } from '@opentelemetry/api'\n\nexport async function fetchGithubStars() {\n  return await trace\n    .getTracer('nextjs-example')\n    .startActiveSpan('fetchGithubStars', async (span) => {\n      try {\n        return await getValue()\n      } finally {\n        span.end()\n      }\n    })\n}\n```\n\nThe `register` function will execute before your code runs in a new environment.\nYou can start creating new spans, and they should be correctly added to the exported trace.\n\n## Default Spans in Next.js\n\nNext.js automatically instruments several spans for you to provide useful insights into your application's performance.\n\nAttributes on spans follow [OpenTelemetry semantic conventions](https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/). We also add some custom attributes under the `next` namespace:\n\n- `next.span_name` - duplicates span name\n- `next.span_type` - each span type has a unique identifier\n- `next.route` - The route pattern of the request (e.g., `/[param]/user`).\n- `next.rsc` (true/false) - Whether the request is an RSC request, such as prefetch.\n- `next.page`\n  - This is an internal value used by an app router.\n  - You can think about it as a route to a special file (like `page.ts`, `layout.ts`, `loading.ts` and others)\n  - It can be used as a unique identifier only when paired with `next.route` because `/layout` can be used to identify both `/(groupA)/layout.ts` and `/(groupB)/layout.ts`\n\n### `[http.method] [next.route]`\n\n- `next.span_type`: `BaseServer.handleRequest`\n\nThis span represents the root span for each incoming request to your Next.js application. It tracks the HTTP method, route, target, and status code of the request.\n\nAttributes:\n\n- [Common HTTP attributes](https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/http/#common-attributes)\n  - `http.method`\n  - `http.status_code`\n- [Server HTTP attributes](https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/http/#http-server-semantic-conventions)\n  - `http.route`\n  - `http.target`\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `render route (app) [next.route]`\n\n- `next.span_type`: `AppRender.getBodyResult`.\n\nThis span represents the process of rendering a route in the app router.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `fetch [http.method] [http.url]`\n\n- `next.span_type`: `AppRender.fetch`\n\nThis span represents the fetch request executed in your code.\n\nAttributes:\n\n- [Common HTTP attributes](https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/http/#common-attributes)\n  - `http.method`\n- [Client HTTP attributes](https://opentelemetry.io/docs/reference/specification/trace/semantic_conventions/http/#http-client)\n  - `http.url`\n  - `net.peer.name`\n  - `net.peer.port` (only if specified)\n- `next.span_name`\n- `next.span_type`\n\nThis span can be turned off by setting `NEXT_OTEL_FETCH_DISABLED=1` in your environment. This is useful when you want to use a custom fetch instrumentation library.\n\n### `executing api route (app) [next.route]`\n\n- `next.span_type`: `AppRouteRouteHandlers.runHandler`.\n\nThis span represents the execution of an API route handler in the app router.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `getServerSideProps [next.route]`\n\n- `next.span_type`: `Render.getServerSideProps`.\n\nThis span represents the execution of `getServerSideProps` for a specific route.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `getStaticProps [next.route]`\n\n- `next.span_type`: `Render.getStaticProps`.\n\nThis span represents the execution of `getStaticProps` for a specific route.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `render route (pages) [next.route]`\n\n- `next.span_type`: `Render.renderDocument`.\n\nThis span represents the process of rendering the document for a specific route.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `generateMetadata [next.page]`\n\n- `next.span_type`: `ResolveMetadata.generateMetadata`.\n\nThis span represents the process of generating metadata for a specific page (a single route can have multiple of these spans).\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.page`\n\n### `resolve page components`\n\n- `next.span_type`: `NextNodeServer.findPageComponents`.\n\nThis span represents the process of resolving page components for a specific page.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.route`\n\n### `resolve segment modules`\n\n- `next.span_type`: `NextNodeServer.getLayoutOrPageModule`.\n\nThis span represents loading of code modules for a layout or a page.\n\nAttributes:\n\n- `next.span_name`\n- `next.span_type`\n- `next.segment`\n\n### `start response`\n\n- `next.span_type`: `NextNodeServer.startResponse`.\n\nThis zero-length span represents the time when the first byte has been sent in the response.\n", "01-building-your-application/06-optimizing/02-videos.mdx": "---\ntitle: Video Optimization\nnav_title: Videos\ndescription: Recommendations and best practices for optimizing videos in your Next.js application.\n---\n\nThis page outlines how to use videos with Next.js applications, showing how to store and display video files without affecting performance.\n\n## Using `<video>` and `<iframe>`\n\nVideos can be embedded on the page using the HTML **`<video>`** tag for direct video files and **`<iframe>`** for external platform-hosted videos.\n\n### `<video>`\n\nThe HTML [`<video>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video) tag can embed self-hosted or directly served video content, allowing full control over the playback and appearance.\n\n```jsx filename=\"app/ui/video.jsx\"\nexport function Video() {\n  return (\n    <video width=\"320\" height=\"240\" controls preload=\"none\">\n      <source src=\"/path/to/video.mp4\" type=\"video/mp4\" />\n      <track\n        src=\"/path/to/captions.vtt\"\n        kind=\"subtitles\"\n        srcLang=\"en\"\n        label=\"English\"\n      />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\n### Common `<video>` tag attributes\n\n| Attribute     | Description                                                                                               | Example Value                        |\n| ------------- | --------------------------------------------------------------------------------------------------------- | ------------------------------------ |\n| `src`         | Specifies the source of the video file.                                                                   | `<video src=\"/path/to/video.mp4\" />` |\n| `width`       | Sets the width of the video player.                                                                       | `<video width=\"320\" />`              |\n| `height`      | Sets the height of the video player.                                                                      | `<video height=\"240\" />`             |\n| `controls`    | If present, it displays the default set of playback controls.                                             | `<video controls />`                 |\n| `autoPlay`    | Automatically starts playing the video when the page loads. Note: Autoplay policies vary across browsers. | `<video autoPlay />`                 |\n| `loop`        | Loops the video playback.                                                                                 | `<video loop />`                     |\n| `muted`       | Mutes the audio by default. Often used with `autoPlay`.                                                   | `<video muted />`                    |\n| `preload`     | Specifies how the video is preloaded. Values: `none`, `metadata`, `auto`.                                 | `<video preload=\"none\" />`           |\n| `playsInline` | Enables inline playback on iOS devices, often necessary for autoplay to work on iOS Safari.               | `<video playsInline />`              |\n\n> **Good to know**: When using the `autoPlay` attribute, it is important to also include the `muted` attribute to ensure the video plays automatically in most browsers and the `playsInline` attribute for compatibility with iOS devices.\n\nFor a comprehensive list of video attributes, refer to the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attributes).\n\n### Video best practices\n\n- **Fallback Content:** When using the `<video>` tag, include fallback content inside the tag for browsers that do not support video playback.\n- **Subtitles or Captions:** Include subtitles or captions for users who are deaf or hard of hearing. Utilize the [`<track>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track) tag with your `<video>` elements to specify caption file sources.\n- **Accessible Controls:** Standard HTML5 video controls are recommended for keyboard navigation and screen reader compatibility. For advanced needs, consider third-party players like [react-player](https://github.com/cookpete/react-player) or [video.js](https://videojs.com/), which offer accessible controls and consistent browser experience.\n\n### `<iframe>`\n\nThe HTML `<iframe>` tag allows you to embed videos from external platforms like YouTube or Vimeo.\n\n```jsx filename=\"app/page.jsx\"\nexport default function Page() {\n  return (\n    <iframe\n      src=\"https://www.youtube.com/watch?v=gfU1iZnjRZM\"\n      frameborder=\"0\"\n      allowfullscreen\n    />\n  )\n}\n```\n\n### Common `<iframe>` tag attributes\n\n| Attribute         | Description                                                            | Example Value                          |\n| ----------------- | ---------------------------------------------------------------------- | -------------------------------------- |\n| `src`             | The URL of the page to embed.                                          | `<iframe src=\"https://example.com\" />` |\n| `width`           | Sets the width of the iframe.                                          | `<iframe width=\"500\" />`               |\n| `height`          | Sets the height of the iframe.                                         | `<iframe height=\"300\" />`              |\n| `frameborder`     | Specifies whether or not to display a border around the iframe.        | `<iframe frameborder=\"0\" />`           |\n| `allowfullscreen` | Allows the iframe content to be displayed in full-screen mode.         | `<iframe allowfullscreen />`           |\n| `sandbox`         | Enables an extra set of restrictions on the content within the iframe. | `<iframe sandbox />`                   |\n| `loading`         | Optimize loading behavior (e.g., lazy loading).                        | `<iframe loading=\"lazy\" />`            |\n| `title`           | Provides a title for the iframe to support accessibility.              | `<iframe title=\"Description\" />`       |\n\nFor a comprehensive list of iframe attributes, refer to the [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attributes).\n\n### Choosing a video embedding method\n\nThere are two ways you can embed videos in your Next.js application:\n\n- **Self-hosted or direct video files:** Embed self-hosted videos using the `<video>` tag for scenarios requiring detailed control over the player's functionality and appearance. This integration method within Next.js allows for customization and control of your video content.\n- **Using video hosting services (YouTube, Vimeo, etc.):** For video hosting services like YouTube or Vimeo, you'll embed their iframe-based players using the `<iframe>` tag. While this method limits some control over the player, it offers ease of use and features provided by these platforms.\n\nChoose the embedding method that aligns with your application's requirements and the user experience you aim to deliver.\n\n### Embedding externally hosted videos\n\nTo embed videos from external platforms, you can use Next.js to fetch the video information and React Suspense to handle the fallback state while loading.\n\n**1. Create a Server Component for video embedding**\n\nThe first step is to create a [Server Component](https://nextjs.org/docs/app/building-your-application/rendering/server-components) that generates the appropriate iframe for embedding the video. This component will fetch the source URL for the video and render the iframe.\n\n```jsx filename=\"app/ui/video-component.jsx\"\nexport default async function VideoComponent() {\n  const src = await getVideoSrc()\n\n  return <iframe src={src} frameborder=\"0\" allowfullscreen />\n}\n```\n\n**2. Stream the video component using React Suspense**\n\nAfter creating the Server Component to embed the video, the next step is to [stream](https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming) the component using [React Suspense](https://react.dev/reference/react/Suspense).\n\n```jsx filename=\"app/page.jsx\"\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\n\nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading video...</p>}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n```\n\n> **Good to know**: When embedding videos from external platforms, consider the following best practices:\n>\n> - Ensure the video embeds are responsive. Use CSS to make the iframe or video player adapt to different screen sizes.\n> - Implement [strategies for loading videos](https://yoast.com/site-speed-tips-for-faster-video/) based on network conditions, especially for users with limited data plans.\n\nThis approach results in a better user experience as it prevents the page from blocking, meaning the user can interact with the page while the video component streams in.\n\nFor a more engaging and informative loading experience, consider using a loading skeleton as the fallback UI. So instead of showing a simple loading message, you can show a skeleton that resembles the video player like this:\n\n```jsx filename=\"app/page.jsx\"\nimport { Suspense } from 'react'\nimport VideoComponent from '../ui/VideoComponent.jsx'\nimport VideoSkeleton from '../ui/VideoSkeleton.jsx'\n\nexport default function Page() {\n  return (\n    <section>\n      <Suspense fallback={<VideoSkeleton />}>\n        <VideoComponent />\n      </Suspense>\n      {/* Other content of the page */}\n    </section>\n  )\n}\n```\n\n## Self-hosted videos\n\nSelf-hosting videos may be preferable for several reasons:\n\n- **Complete control and independence**: Self-hosting gives you direct management over your video content, from playback to appearance, ensuring full ownership and control, free from external platform constraints.\n- **Customization for specific needs**: Ideal for unique requirements, like dynamic background videos, it allows for tailored customization to align with design and functional needs.\n- **Performance and scalability considerations**: Choose storage solutions that are both high-performing and scalable, to support increasing traffic and content size effectively.\n- **Cost and integration**: Balance the costs of storage and bandwidth with the need for easy integration into your Next.js framework and broader tech ecosystem.\n\n### Using Vercel Blob for video hosting\n\n[Vercel Blob](https://vercel.com/docs/storage/vercel-blob?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) offers an efficient way to host videos, providing a scalable cloud storage solution that works well with Next.js. Here's how you can host a video using Vercel Blob:\n\n**1. Uploading a video to Vercel Blob**\n\nIn your Vercel dashboard, navigate to the \"Storage\" tab and select your [Vercel Blob](https://vercel.com/docs/storage/vercel-blob?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) store. In the Blob table's upper-right corner, find and click the \"Upload\" button. Then, choose the video file you wish to upload. After the upload completes, the video file will appear in the Blob table.\n\nAlternatively, you can upload your video using a server action. For detailed instructions, refer to the Vercel documentation on [server-side uploads](https://vercel.com/docs/storage/vercel-blob/server-upload). Vercel also supports [client-side uploads](https://vercel.com/docs/storage/vercel-blob/client-upload). This method may be preferable for certain use cases.\n\n**2. Displaying the video in Next.js**\n\nOnce the video is uploaded and stored, you can display it in your Next.js application. Here's an example of how to do this using the `<video>` tag and React Suspense:\n\n```jsx filename=\"app/page.jsx\"\nimport { Suspense } from 'react'\nimport { list } from '@vercel/blob'\n\nexport default function Page() {\n  return (\n    <Suspense fallback={<p>Loading video...</p>}>\n      <VideoComponent fileName=\"my-video.mp4\" />\n    </Suspense>\n  )\n}\n\nasync function VideoComponent({ fileName }) {\n  const { blobs } = await list({\n    prefix: fileName,\n    limit: 1,\n  })\n  const { url } = blobs[0]\n\n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      Your browser does not support the video tag.\n    </video>\n  )\n}\n```\n\nIn this approach, the page uses the video's `@vercel/blob` URL to display the video using the `VideoComponent`. React Suspense is used to show a fallback until the video URL is fetched and the video is ready to be displayed.\n\n### Adding subtitles to your video\n\nIf you have subtitles for your video, you can easily add them using the `<track>` element inside your `<video>` tag. You can fetch the subtitle file from [Vercel Blob](https://vercel.com/docs/storage/vercel-blob?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) in a similar way as the video file. Here's how you can update the `<VideoComponent>` to include subtitles.\n\n```jsx filename=\"app/page.jsx\"\nasync function VideoComponent({ fileName }) {\n  const {blobs} = await list({\n    prefix: fileName,\n    limit: 2\n  });\n  const { url } = blobs[0];\n  const { url: captionsUrl } = blobs[1];\n\n  return (\n    <video controls preload=\"none\" aria-label=\"Video player\">\n      <source src={url} type=\"video/mp4\" />\n      <track\n        src={captionsUrl}\n        kind=\"subtitles\"\n        srcLang=\"en\"\n        label=\"English\">\n      Your browser does not support the video tag.\n    </video>\n  );\n};\n```\n\nBy following this approach, you can effectively self-host and integrate videos into your Next.js applications.\n\n## Resources\n\nTo continue learning more about video optimization and best practices, please refer to the following resources:\n\n- **Understanding video formats and codecs**: Choose the right format and codec, like MP4 for compatibility or WebM for web optimization, for your video needs. For more details, see [Mozilla's guide on video codecs](https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Video_codecs).\n- **Video compression**: Use tools like FFmpeg to effectively compress videos, balancing quality with file size. Learn about compression techniques at [FFmpeg's official website](https://www.ffmpeg.org/).\n- **Resolution and bitrate adjustment**: Adjust [resolution and bitrate](https://www.dacast.com/blog/bitrate-vs-resolution/#:~:text=The%20two%20measure%20different%20aspects,yield%20different%20qualities%20of%20video) based on the viewing platform, with lower settings for mobile devices.\n- **Content Delivery Networks (CDNs)**: Utilize a CDN to enhance video delivery speed and manage high traffic. When using some storage solutions, such as Vercel Blob, CDN functionality is automatically handled for you. [Learn more](https://vercel.com/docs/edge-network/overview?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) about CDNs and their benefits.\n\nExplore these video streaming platforms for integrating video into your Next.js projects:\n\n### Open source `next-video` component\n\n- Provides a `<Video>` component for Next.js, compatible with various hosting services including [Vercel Blob](https://vercel.com/docs/storage/vercel-blob?utm_source=next-site&utm_medium=docs&utm_campaign=next-website), S3, Backblaze, and Mux.\n- [Detailed documentation](https://next-video.dev/docs) for using `next-video.dev` with different hosting services.\n\n### Cloudinary Integration\n\n- Official [documentation and integration guide](https://next.cloudinary.dev/) for using Cloudinary with Next.js.\n- Includes a `<CldVideoPlayer>` component for [drop-in video support](https://next.cloudinary.dev/cldvideoplayer/basic-usage).\n- Find [examples](https://github.com/cloudinary-community/cloudinary-examples/?tab=readme-ov-file#nextjs) of integrating Cloudinary with Next.js including [Adaptive Bitrate Streaming](https://github.com/cloudinary-community/cloudinary-examples/tree/main/examples/nextjs-cldvideoplayer-abr).\n- Other [Cloudinary libraries](https://cloudinary.com/documentation) including a Node.js SDK are also available.\n\n### Mux Video API\n\n- Mux provides a [starter template](https://github.com/muxinc/video-course-starter-kit) for creating a video course with Mux and Next.js.\n- Learn about Mux's recommendations for embedding [high-performance video for your Next.js application](https://www.mux.com/for/nextjs).\n- Explore an [example project](https://with-mux-video.vercel.app/) demonstrating Mux with Next.js.\n\n### Fastly\n\n- Learn more about integrating Fastly's solutions for [video on demand](https://www.fastly.com/products/streaming-media/video-on-demand) and streaming media into Next.js.\n", "01-building-your-application/06-optimizing/13-memory-usage.mdx": "---\ntitle: Memory Usage\ndescription: Optimize memory used by your application in development and production.\n---\n\nAs applications grow and become more feature rich, they can demand more resources when developing locally or creating production builds.\n\nLet's explore some strategies and techniques to optimize memory and address common memory issues in Next.js.\n\n## Reduce number of dependencies\n\nApplications with a large amount of dependencies will use more memory.\n\nThe [Bundle Analyzer](/docs/app/building-your-application/optimizing/bundle-analyzer) can help you investigate large dependencies in your application that may be able to be removed to improve performance and memory usage.\n\n## Run `next build` with `--experimental-debug-memory-usage`\n\nStarting in `14.2.0`, you can run `next build --experimental-debug-memory-usage` to run the build in a mode where Next.js will print out information about memory usage continuously throughout the build, such as heap usage and garbage collection statistics. Heap snapshots will also be taken automatically when memory usage gets close to the configured limit.\n\n> **Good to know**: This feature is not compatible with the Webpack build worker option which is auto-enabled unless you have custom webpack config.\n\n## Record a heap profile\n\nTo look for memory issues, you can record a heap profile from Node.js and load it in Chrome DevTools to identify potential sources of memory leaks.\n\nIn your terminal, pass the `--heap-prof` flag to Node.js when starting your Next.js build:\n\n```sh\nnode --heap-prof node_modules/next/dist/bin/next build\n```\n\nAt the end of the build, a `.heapprofile` file will be created by Node.js.\n\nIn Chrome DevTools, you can open the Memory tab and click on the \"Load Profile\" button to visualize the file.\n\n## Analyze a snapshot of the heap\n\nYou can use an inspector tool to analyze the memory usage of the application.\n\nWhen running the `next build` or `next dev` command, add `NODE_OPTIONS=--inspect` to the beginning of the command. This will expose the inspector agent on the default port.\nIf you wish to break before any user code starts, you can pass `--inspect-brk` instead. While the process is running, you can use a tool such as Chrome DevTools to connect to the debugging port to record and analyze a snapshot of the heap to see what memory is being retained.\n\nStarting in `14.2.0`, you can also run `next build` with the `--experimental-debug-memory-usage` flag to make it easier to take heap snapshots.\n\nWhile running in this mode, you can send a `SIGUSR2` signal to the process at any point, and the process will take a heap snapshot.\n\nThe heap snapshot will be saved to the project root of the Next.js application and can be loaded in any heap analyzer, such as Chrome DevTools, to see what memory is retained. This mode is not yet compatible with Webpack build workers.\n\nSee [how to record and analyze heap snapshots](https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots) for more information.\n\n## Webpack build worker\n\nThe Webpack build worker allows you to run Webpack compilations inside a separate Node.js worker which will decrease memory usage of your application during builds.\n\nThis option is enabled by default if your application does not have a custom Webpack configuration starting in `v14.1.0`.\n\nIf you are using an older version of Next.js or you have a custom Webpack configuration, you can enable this option by setting `experimental.webpackBuildWorker: true` inside your `next.config.js`.\n\n> **Good to know**: This feature may not be compatible with all custom Webpack plugins.\n\n## Disable Webpack cache\n\nThe [Webpack cache](https://webpack.js.org/configuration/cache/) saves generated Webpack modules in memory and/or to disk to improve the speed of builds. This can\nhelp with performance, but it will also increase the memory usage of your application to store the cached data.\n\nYou can disable this behavior by adding a [custom Webpack configuration](/docs/app/api-reference/next-config-js/webpack) to your application:\n\n```js filename=\"next.config.mjs\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  webpack: (\n    config,\n    { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }\n  ) => {\n    if (config.cache && !dev) {\n      config.cache = Object.freeze({\n        type: 'memory',\n      })\n      config.cache.maxMemoryGenerations = 0\n    }\n    // Important: return the modified config\n    return config\n  },\n}\n\nexport default nextConfig\n```\n\n## Disable source maps\n\nGenerating source maps consumes extra memory during the build process.\n\nYou can disable source map generation by adding `productionBrowserSourceMaps: false` and `experimental.serverSourceMaps: false` to your Next.js configuration.\n\n> **Good to know**: Some plugins may turn on source maps and may require custom configuration to disable.\n\n## Edge memory issues\n\nNext.js `v14.1.3` fixed a memory issue when using the Edge runtime. Please update to this version (or later) to see if it addresses your issue.\n", "01-building-your-application/06-optimizing/08-analytics.mdx": "---\ntitle: Analytics\ndescription: Measure and track page performance using Next.js Speed Insights\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js has built-in support for measuring and reporting performance metrics. You can either use the `useReportWebVitals` hook to manage reporting yourself, or alternatively, Vercel provides a [managed service](https://vercel.com/analytics?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) to automatically collect and visualize metrics for you.\n\n## Build Your Own\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\nView the [API Reference](/docs/pages/api-reference/functions/use-report-web-vitals) for more information.\n\n</PagesOnly>\n\n<AppOnly>\n\n```jsx filename=\"app/_components/web-vitals.js\"\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    console.log(metric)\n  })\n}\n```\n\n```jsx filename=\"app/layout.js\"\nimport { WebVitals } from './_components/web-vitals'\n\nexport default function Layout({ children }) {\n  return (\n    <html>\n      <body>\n        <WebVitals />\n        {children}\n      </body>\n    </html>\n  )\n}\n```\n\n> Since the `useReportWebVitals` hook requires the `\"use client\"` directive, the most performant approach is to create a separate component that the root layout imports. This confines the client boundary exclusively to the `WebVitals` component.\n\nView the [API Reference](/docs/app/api-reference/functions/use-report-web-vitals) for more information.\n\n</AppOnly>\n\n## Web Vitals\n\n[Web Vitals](https://web.dev/vitals/) are a set of useful metrics that aim to capture the user\nexperience of a web page. The following web vitals are all included:\n\n- [Time to First Byte](https://developer.mozilla.org/docs/Glossary/Time_to_first_byte) (TTFB)\n- [First Contentful Paint](https://developer.mozilla.org/docs/Glossary/First_contentful_paint) (FCP)\n- [Largest Contentful Paint](https://web.dev/lcp/) (LCP)\n- [First Input Delay](https://web.dev/fid/) (FID)\n- [Cumulative Layout Shift](https://web.dev/cls/) (CLS)\n- [Interaction to Next Paint](https://web.dev/inp/) (INP)\n\nYou can handle all the results of these metrics using the `name` property.\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport { useReportWebVitals } from 'next/web-vitals'\n\nfunction MyApp({ Component, pageProps }) {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n\n  return <Component {...pageProps} />\n}\n```\n\n</PagesOnly>\n\n<AppOnly>\n\n```tsx filename=\"app/_components/web-vitals.tsx\" switcher\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n```jsx filename=\"app/_components/web-vitals.js\" switcher\n'use client'\n\nimport { useReportWebVitals } from 'next/web-vitals'\n\nexport function WebVitals() {\n  useReportWebVitals((metric) => {\n    switch (metric.name) {\n      case 'FCP': {\n        // handle FCP results\n      }\n      case 'LCP': {\n        // handle LCP results\n      }\n      // ...\n    }\n  })\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n## Custom Metrics\n\nIn addition to the core metrics listed above, there are some additional custom metrics that\nmeasure the time it takes for the page to hydrate and render:\n\n- `Next.js-hydration`: Length of time it takes for the page to start and finish hydrating (in ms)\n- `Next.js-route-change-to-render`: Length of time it takes for a page to start rendering after a\n  route change (in ms)\n- `Next.js-render`: Length of time it takes for a page to finish render after a route change (in ms)\n\nYou can handle all the results of these metrics separately:\n\n```js\nexport function reportWebVitals(metric) {\n  switch (metric.name) {\n    case 'Next.js-hydration':\n      // handle hydration results\n      break\n    case 'Next.js-route-change-to-render':\n      // handle route-change to render results\n      break\n    case 'Next.js-render':\n      // handle render results\n      break\n    default:\n      break\n  }\n}\n```\n\nThese metrics work in all browsers that support the [User Timing API](https://caniuse.com/#feat=user-timing).\n\n</PagesOnly>\n\n## Sending results to external systems\n\nYou can send results to any endpoint to measure and track\nreal user performance on your site. For example:\n\n```js\nuseReportWebVitals((metric) => {\n  const body = JSON.stringify(metric)\n  const url = 'https://example.com/analytics'\n\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  if (navigator.sendBeacon) {\n    navigator.sendBeacon(url, body)\n  } else {\n    fetch(url, { body, method: 'POST', keepalive: true })\n  }\n})\n```\n\n> **Good to know**: If you use [Google Analytics](https://analytics.google.com/analytics/web/), using the\n> `id` value can allow you to construct metric distributions manually (to calculate percentiles,\n> etc.)\n\n> ```js\n> useReportWebVitals((metric) => {\n>   // Use `window.gtag` if you initialized Google Analytics as this example:\n>   // https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/pages/_app.js\n>   window.gtag('event', metric.name, {\n>     value: Math.round(\n>       metric.name === 'CLS' ? metric.value * 1000 : metric.value\n>     ), // values must be integers\n>     event_label: metric.id, // id unique to current page load\n>     non_interaction: true, // avoids affecting bounce rate.\n>   })\n> })\n> ```\n>\n> Read more about [sending results to Google Analytics](https://github.com/GoogleChrome/web-vitals#send-the-results-to-google-analytics).\n", "01-building-your-application/11-upgrading/01-codemods.mdx": "---\ntitle: Codemods\ndescription: Use codemods to upgrade your Next.js codebase when new features are released.\n---\n\nCodemods are transformations that run on your codebase programmatically. This allows a large number of changes to be programmatically applied without having to manually go through every file.\n\nNext.js provides Codemod transformations to help upgrade your Next.js codebase when an API is updated or deprecated.\n\n## Usage\n\nIn your terminal, navigate (`cd`) into your project's folder, then run:\n\n```bash filename=\"Terminal\"\nnpx @next/codemod <transform> <path>\n```\n\nReplacing `<transform>` and `<path>` with appropriate values.\n\n- `transform` - name of transform\n- `path` - files or directory to transform\n- `--dry` Do a dry-run, no code will be edited\n- `--print` Prints the changed output for comparison\n\n## Next.js Codemods\n\n### 14.0\n\n#### Migrate `ImageResponse` imports\n\n##### `next-og-import`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod@latest next-og-import .\n```\n\nThis codemod moves transforms imports from `next/server` to `next/og` for usage of [Dynamic OG Image Generation](/docs/app/building-your-application/optimizing/metadata#dynamic-image-generation).\n\nFor example:\n\n```js\nimport { ImageResponse } from 'next/server'\n```\n\nTransforms into:\n\n```js\nimport { ImageResponse } from 'next/og'\n```\n\n#### Use `viewport` export\n\n##### `metadata-to-viewport-export`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod@latest metadata-to-viewport-export .\n```\n\nThis codemod migrates certain viewport metadata to `viewport` export.\n\nFor example:\n\n```js\nexport const metadata = {\n  title: 'My App',\n  themeColor: 'dark',\n  viewport: {\n    width: 1,\n  },\n}\n```\n\nTransforms into:\n\n```js\nexport const metadata = {\n  title: 'My App',\n}\n\nexport const viewport = {\n  width: 1,\n  themeColor: 'dark',\n}\n```\n\n### 13.2\n\n#### Use Built-in Font\n\n##### `built-in-next-font`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod@latest built-in-next-font .\n```\n\nThis codemod uninstalls the `@next/font` package and transforms `@next/font` imports into the built-in `next/font`.\n\nFor example:\n\n```js\nimport { Inter } from '@next/font/google'\n```\n\nTransforms into:\n\n```js\nimport { Inter } from 'next/font/google'\n```\n\n### 13.0\n\n#### Rename Next Image Imports\n\n##### `next-image-to-legacy-image`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod@latest next-image-to-legacy-image .\n```\n\nSafely renames `next/image` imports in existing Next.js 10, 11, or 12 applications to `next/legacy/image` in Next.js 13. Also renames `next/future/image` to `next/image`.\n\nFor example:\n\n```jsx filename=\"pages/index.js\"\nimport Image1 from 'next/image'\nimport Image2 from 'next/future/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n```\n\nTransforms into:\n\n```jsx filename=\"pages/index.js\"\n// 'next/image' becomes 'next/legacy/image'\nimport Image1 from 'next/legacy/image'\n// 'next/future/image' becomes 'next/image'\nimport Image2 from 'next/image'\n\nexport default function Home() {\n  return (\n    <div>\n      <Image1 src=\"/test.jpg\" width=\"200\" height=\"300\" />\n      <Image2 src=\"/test.png\" width=\"500\" height=\"400\" />\n    </div>\n  )\n}\n```\n\n#### Migrate to the New Image Component\n\n##### `next-image-experimental`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod@latest next-image-experimental .\n```\n\nDangerously migrates from `next/legacy/image` to the new `next/image` by adding inline styles and removing unused props.\n\n- Removes `layout` prop and adds `style`.\n- Removes `objectFit` prop and adds `style`.\n- Removes `objectPosition` prop and adds `style`.\n- Removes `lazyBoundary` prop.\n- Removes `lazyRoot` prop.\n\n#### Remove `<a>` Tags From Link Components\n\n##### `new-link`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod@latest new-link .\n```\n\n<AppOnly>\n\nRemove `<a>` tags inside [Link Components](/docs/app/api-reference/components/link), or add a `legacyBehavior` prop to Links that cannot be auto-fixed.\n\n</AppOnly>\n\n<PagesOnly>\n\nRemove `<a>` tags inside [Link Components](/docs/pages/api-reference/components/link), or add a `legacyBehavior` prop to Links that cannot be auto-fixed.\n\n</PagesOnly>\n\nFor example:\n\n```jsx\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\">\n  About\n</Link>\n\n<Link href=\"/about\">\n  <a onClick={() => console.log('clicked')}>About</a>\n</Link>\n// transforms into\n<Link href=\"/about\" onClick={() => console.log('clicked')}>\n  About\n</Link>\n```\n\nIn cases where auto-fixing can't be applied, the `legacyBehavior` prop is added. This allows your app to keep functioning using the old behavior for that particular link.\n\n```jsx\nconst Component = () => <a>About</a>\n\n<Link href=\"/about\">\n  <Component />\n</Link>\n// becomes\n<Link href=\"/about\" legacyBehavior>\n  <Component />\n</Link>\n```\n\n### 11\n\n#### Migrate from CRA\n\n##### `cra-to-next`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod cra-to-next\n```\n\nMigrates a Create React App project to Next.js; creating a Pages Router and necessary config to match behavior. Client-side only rendering is leveraged initially to prevent breaking compatibility due to `window` usage during SSR and can be enabled seamlessly to allow the gradual adoption of Next.js specific features.\n\nPlease share any feedback related to this transform [in this discussion](https://github.com/vercel/next.js/discussions/25858).\n\n### 10\n\n#### Add React imports\n\n##### `add-missing-react-import`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod add-missing-react-import\n```\n\nTransforms files that do not import `React` to include the import in order for the new [React JSX transform](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html) to work.\n\nFor example:\n\n```jsx filename=\"my-component.js\"\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n```\n\nTransforms into:\n\n```jsx filename=\"my-component.js\"\nimport React from 'react'\nexport default class Home extends React.Component {\n  render() {\n    return <div>Hello World</div>\n  }\n}\n```\n\n### 9\n\n#### Transform Anonymous Components into Named Components\n\n##### `name-default-component`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod name-default-component\n```\n\n**Versions 9 and above.**\n\nTransforms anonymous components into named components to make sure they work with [Fast Refresh](https://nextjs.org/blog/next-9-4#fast-refresh).\n\nFor example:\n\n```jsx filename=\"my-component.js\"\nexport default function () {\n  return <div>Hello World</div>\n}\n```\n\nTransforms into:\n\n```jsx filename=\"my-component.js\"\nexport default function MyComponent() {\n  return <div>Hello World</div>\n}\n```\n\nThe component will have a camel-cased name based on the name of the file, and it also works with arrow functions.\n\n### 8\n\n#### Transform AMP HOC into page config\n\n##### `withamp-to-config`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod withamp-to-config\n```\n\nTransforms the `withAmp` HOC into Next.js 9 page configuration.\n\nFor example:\n\n```js\n// Before\nimport { withAmp } from 'next/amp'\n\nfunction Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport default withAmp(Home)\n```\n\n```js\n// After\nexport default function Home() {\n  return <h1>My AMP Page</h1>\n}\n\nexport const config = {\n  amp: true,\n}\n```\n\n### 6\n\n#### Use `withRouter`\n\n##### `url-to-withrouter`\n\n```bash filename=\"Terminal\"\nnpx @next/codemod url-to-withrouter\n```\n\nTransforms the deprecated automatically injected `url` property on top level pages to using `withRouter` and the `router` property it injects. Read more here: [https://nextjs.org/docs/messages/url-deprecated](/docs/messages/url-deprecated)\n\nFor example:\n\n```js filename=\"From\"\nimport React from 'react'\nexport default class extends React.Component {\n  render() {\n    const { pathname } = this.props.url\n    return <div>Current pathname: {pathname}</div>\n  }\n}\n```\n\n```js filename=\"To\"\nimport React from 'react'\nimport { withRouter } from 'next/router'\nexport default withRouter(\n  class extends React.Component {\n    render() {\n      const { pathname } = this.props.router\n      return <div>Current pathname: {pathname}</div>\n    }\n  }\n)\n```\n\nThis is one case. All the cases that are transformed (and tested) can be found in the [`__testfixtures__` directory](https://github.com/vercel/next.js/tree/canary/packages/next-codemod/transforms/__testfixtures__/url-to-withrouter).\n", "01-building-your-application/11-upgrading/05-from-create-react-app.mdx": "---\ntitle: Migrating from Create React App\ndescription: Learn how to migrate your existing React application from Create React App to Next.js.\n---\n\nThis guide will help you migrate an existing Create React App site to Next.js.\n\n## Why Switch?\n\nThere are several reasons why you might want to switch from Create React App to Next.js:\n\n### Slow initial page loading time\n\nCreate React App uses purely client-side React. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:\n\n1. The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load data.\n2. Your application code grows with every new feature and dependency you add.\n\n### No automatic code splitting\n\nThe previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.\n\n### Network waterfalls\n\nA common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.\n\nWhile fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.\n\n### Fast and intentional loading states\n\nWith built-in support for [streaming through React Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense), you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.\n\nThis enables you to build pages that are faster to load and eliminate [layout shifts](https://vercel.com/blog/how-core-web-vitals-affect-seo).\n\n### Choose the data fetching strategy\n\nDepending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.\n\n### Middleware\n\n[Next.js Middleware](/docs/app/building-your-application/routing/middleware) allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and [internationalization](/docs/app/building-your-application/routing/internationalization).\n\n### Built-in Optimizations\n\n[Images](/docs/app/building-your-application/optimizing/images), [fonts](/docs/app/building-your-application/optimizing/fonts), and [third-party scripts](/docs/app/building-your-application/optimizing/scripts) often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.\n\n## Migration Steps\n\nOur goal with this migration is to get a working Next.js application as quickly as possible, so that you can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely client-side application (SPA) without migrating your existing router. This helps minimize the chances of encountering issues during the migration process and reduces merge conflicts.\n\n### Step 1: Install the Next.js Dependency\n\nThe first thing you need to do is to install `next` as a dependency:\n\n```bash filename=\"Terminal\"\nnpm install next@latest\n```\n\n### Step 2: Create the Next.js Configuration File\n\nCreate a `next.config.mjs` at the root of your project. This file will hold your [Next.js configuration options](/docs/app/api-reference/next-config-js).\n\n```js filename=\"next.config.mjs\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n\nexport default nextConfig\n```\n\n### Step 3: Update TypeScript Configuration\n\nIf you're using TypeScript, you need to update your `tsconfig.json` file with the following changes to make it compatible with Next.js:\n\n```json filename=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": false,\n    \"forceConsistentCasingInFileNames\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"baseUrl\": \".\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"strictNullChecks\": true\n  },\n  \"include\": [\n    \"next-env.d.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\",\n    \".next/types/**/*.ts\",\n    \"./dist/types/**/*.ts\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\nYou can find more information about configuring TypeScript on the [Next.js docs](/docs/app/building-your-application/configuring/typescript#typescript-plugin).\n\n### Step 4: Create the Root Layout\n\nA Next.js [App Router](/docs/app) application must include a [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required) file, which is a [React Server Component](/docs/app/building-your-application/rendering/server-components) that will wrap all pages in your application. This file is defined at the top level of the `app` directory.\n\nThe closest equivalent to the root layout file in a CRA application is the `index.html` file, which contains your `<html>`, `<head>`, and `<body>` tags.\n\nIn this step, you'll convert your `index.html` file into a root layout file:\n\n1. Create a new `app` directory in your `src` directory.\n2. Create a new `layout.tsx` file inside that `app` directory:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return null\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return null\n}\n```\n\n> **Good to know**: `.js`, `.jsx`, or `.tsx` extensions can be used for Layout files.\n\nCopy the content of your `index.html` file into the previously created `<RootLayout>` component while replacing the `body.div#root` and `body.script` tags with `<div id=\"root\">{children}</div>`:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n> **Good to know**: We'll ignore the [manifest file](/docs/app/api-reference/file-conventions/metadata), additional iconography other than the favicon, and [testing configuration](/docs/app/building-your-application/testing), but if these are requirements, Next.js also supports these options.\n\n### Step 5: Metadata\n\nNext.js already includes by default the [meta charset](https://developer.mozilla.org/docs/Web/HTML/Element/meta#charset) and [meta viewport](https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag) tags, so you can safely remove those from your `<head>`:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" href=\"%PUBLIC_URL%/favicon.ico\" />\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nAny [metadata files](/docs/app/building-your-application/optimizing/metadata#file-based-metadata) such as `favicon.ico`, `icon.png`, `robots.txt` are automatically added to the application `<head>` tag as long as you have them placed into the top level of the `app` directory. After moving [all supported files](/docs/app/building-your-application/optimizing/metadata#file-based-metadata) into the `app` directory you can safely delete their `<link>` tags:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>React App</title>\n        <meta name=\"description\" content=\"Web site created...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nFinally, Next.js can manage your last `<head>` tags with the [Metadata API](/docs/app/building-your-application/optimizing/metadata). Move your final metadata info into an exported [`metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object):\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  title: 'React App',\n  description: 'Web site created with Next.js.',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nWith the above changes, you shifted from declaring everything in your `index.html` to using Next.js' convention-based approach built into the framework ([Metadata API](/docs/app/building-your-application/optimizing/metadata)). This approach enables you to more easily improve your SEO and web shareability of your pages.\n\n### Step 6: Styles\n\nLike Create React App, Next.js has built-in support for [CSS Modules](/docs/app/building-your-application/styling/css-modules).\n\nIf you're using a global CSS file, import it into your `app/layout.tsx` file:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport '../index.css'\n\n// ...\n```\n\nIf you're using Tailwind, you'll need to install `postcss` and `autoprefixer`:\n\n```bash filename=\"Terminal\"\nnpm install postcss autoprefixer\n```\n\nThen, create a `postcss.config.js` file at the root of your project:\n\n```js filename=\"postcss.config.js\"\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n```\n\n### Step 7: Create the Entrypoint Page\n\nOn Next.js you declare an entrypoint for your application by creating a `page.tsx` file. The closest equivalent of this file on CRA is your `src/index.tsx` file. In this step, you\u2019ll set up the entry point of your application.\n\n**Create a `[[...slug]]` directory in your `app` directory.**\n\nSince this guide is aiming to first set up our Next.js as an SPA (Single Page Application), you need your page entry point to catch all possible routes of your application. For that, create a new `[[...slug]]` directory in your `app` directory.\n\nThis directory is what is called an [optional catch-all route segment](/docs/app/building-your-application/routing/dynamic-routes#optional-catch-all-segments). Next.js uses a file-system based router where [directories are used to define routes](/docs/app/building-your-application/routing/defining-routes#creating-routes). This special directory will make sure that all routes of your application will be directed to its containing `page.tsx` file.\n\n**Create a new `page.tsx` file inside the `app/[[...slug]]` directory with the following content:**\n\n```tsx filename=\"app/[[...slug]]/page.tsx\" switcher\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n```jsx filename=\"app/[[...slug]]/page.js\" switcher\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\nThis file is a [Server Component](/docs/app/building-your-application/rendering/server-components). When you run `next build`, the file is prerendered into a static asset. It does _not_ require any dynamic code.\n\nThis file imports our global CSS and tells [`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params) we are only going to generate one route, the index route at `/`.\n\nNow, let's move the rest of our CRA application which will run client-only.\n\n```tsx filename=\"app/[[...slug]]/client.tsx\" switcher\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n```jsx filename=\"app/[[...slug]]/client.js\" switcher\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\nThis file is a [Client Component](/docs/app/building-your-application/rendering/client-components), defined by the `'use client'` directive. Client Components are still [prerendered to HTML](/docs/app/building-your-application/rendering/client-components#how-are-client-components-rendered) on the server before being sent to the client.\n\nSince we want a client-only application to start, we can configure Next.js to disable prerendering from the `App` component down.\n\n```tsx\nconst App = dynamic(() => import('../../App'), { ssr: false })\n```\n\nNow, update your entrypoint page to use the new component:\n\n```tsx filename=\"app/[[...slug]]/page.tsx\" switcher\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n```jsx filename=\"app/[[...slug]]/page.js\" switcher\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n### Step 8: Update Static Image Imports\n\nNext.js handles static image imports slightly different from CRA. With CRA, importing an image file will return its public URL as a string:\n\n```tsx filename=\"App.tsx\"\nimport image from './img.png'\n\nexport default function App() {\n  return <img src={image} />\n}\n```\n\nWith Next.js, static image imports return an object. The object can then be used directly with the Next.js [`<Image>` component](/docs/app/api-reference/components/image), or you can use the object's `src` property with your existing `<img>` tag.\n\nThe `<Image>` component has the added benefits of [automatic image optimization](/docs/app/building-your-application/optimizing/images). The `<Image>` component automatically sets the `width` and `height` attributes of the resulting `<img>` based on the image's dimensions. This prevents layout shifts when the image loads. However, this can cause issues if your app contains images with only one of their dimensions being styled without the other styled to `auto`. When not styled to `auto`, the dimension will default to the `<img>` dimension attribute's value, which can cause the image to appear distorted.\n\nKeeping the `<img>` tag will reduce the amount of changes in your application and prevent the above issues. You can then optionally later migrate to the `<Image>` component to take advantage of optimizing images by [configuring a loader](/docs/app/building-your-application/optimizing/images#loaders), or moving to the default Next.js server which has automatic image optimization.\n\n**Convert absolute import paths for images imported from `/public` into relative imports:**\n\n```tsx\n// Before\nimport logo from '/logo.png'\n\n// After\nimport logo from '../public/logo.png'\n```\n\n**Pass the image `src` property instead of the whole image object to your `<img>` tag:**\n\n```tsx\n// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n```\n\nAlternatively, you can reference the public URL for the image asset based on the filename. For example, `public/logo.png` will serve the image at `/logo.png` for your application, which would be the `src` value.\n\n> **Warning:** If you're using TypeScript, you might encounter type errors when accessing the `src` property. You can safely ignore those for now. They will be fixed by the end of this guide.\n\n### Step 9: Migrate the Environment Variables\n\nNext.js has support for `.env` [environment variables](/docs/app/building-your-application/configuring/environment-variables) similar to CRA.\n\nThe main difference is the prefix used to expose environment variables on the client-side. Change all environment variables with the `REACT_APP_` prefix to `NEXT_PUBLIC_`.\n\n### Step 10: Update Scripts in `package.json`\n\nYou should now be able to run your application to test if you successfully migrated to Next.js. But before that, you need to update your `scripts` in your `package.json` with Next.js related commands, and add `.next`, `next-env.d.ts`, and `dist` to your `.gitignore` file:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n```txt filename=\".gitignore\"\n# ...\n.next\nnext-env.d.ts\ndist\n```\n\nNow run `npm run dev`, and open [`http://localhost:3000`](http://localhost:3000). You should see your application now running on Next.js.\n\n### Step 11: Clean Up\n\nYou can now clean up your codebase from Create React App related artifacts:\n\n- Delete `src/index.tsx`\n- Delete `public/index.html`\n- Delete `reportWebVitals` setup\n- Uninstall CRA dependencies (`react-scripts`)\n\n## Bundler Compatibility\n\nCreate React App and Next.js both default to using webpack for bundling.\n\nWhen migrating your CRA application to Next.js, you might have a custom webpack configuration you're looking to migrate. Next.js supports providing a [custom webpack configuration](/docs/app/api-reference/next-config-js/webpack).\n\nFurther, Next.js has support for [Turbopack](/docs/app/api-reference/next-config-js/turbo) through `next dev --turbo` to improve your local dev performance. Turbopack supports some [webpack loaders](/docs/app/api-reference/next-config-js/turbo) as well for compatibility and incremental adoption.\n\n## Next Steps\n\nIf everything went according to plan, you now have a functioning Next.js application running as a single-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but you can now start making incremental changes to reap all the benefits. Here's what you might want to do next:\n\n- Migrate from React Router to the [Next.js App Router](/docs/app/building-your-application/routing) to get:\n  - Automatic code splitting\n  - [Streaming Server-Rendering](/docs/app/building-your-application/routing/loading-ui-and-streaming)\n  - [React Server Components](/docs/app/building-your-application/rendering/server-components)\n- [Optimize images with the `<Image>` component](/docs/app/building-your-application/optimizing/images)\n- [Optimize fonts with `next/font`](/docs/app/building-your-application/optimizing/fonts)\n- [Optimize third-party scripts with the `<Script>` component](/docs/app/building-your-application/optimizing/scripts)\n- [Update your ESLint configuration to support Next.js rules](/docs/app/building-your-application/configuring/eslint)\n\n> **Good to know:** Using a static export [does not currently support](https://github.com/vercel/next.js/issues/54393) using the `useParams` hook.\n", "01-building-your-application/11-upgrading/04-from-vite.mdx": "---\ntitle: Migrating from Vite\ndescription: Learn how to migrate your existing React application from Vite to Next.js.\n---\n\nThis guide will help you migrate an existing Vite application to Next.js.\n\n## Why Switch?\n\nThere are several reasons why you might want to switch from Vite to Next.js:\n\n### Slow initial page loading time\n\nIf you have built your application with the [default Vite plugin for React](https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react), your application is a purely client-side application. Client-side only applications, also known as single-page applications (SPAs), often experience slow initial page loading time. This happens due to a couple of reasons:\n\n1. The browser needs to wait for the React code and your entire application bundle to download and run before your code is able to send requests to load some data.\n2. Your application code grows with every new feature and extra dependency you add.\n\n### No automatic code splitting\n\nThe previous issue of slow loading times can be somewhat managed with code splitting. However, if you try to do code splitting manually, you'll often make performance worse. It's easy to inadvertently introduce network waterfalls when code-splitting manually. Next.js provides automatic code splitting built into its router.\n\n### Network waterfalls\n\nA common cause of poor performance occurs when applications make sequential client-server requests to fetch data. One common pattern for data fetching in an SPA is to initially render a placeholder, and then fetch data after the component has mounted. Unfortunately, this means that a child component that fetches data can't start fetching until the parent component has finished loading its own data.\n\nWhile fetching data on the client is supported with Next.js, it also gives you the option to shift data fetching to the server, which can eliminate client-server waterfalls.\n\n### Fast and intentional loading states\n\nWith built-in support for [streaming through React Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense), you can be more intentional about which parts of your UI you want to load first and in what order without introducing network waterfalls.\n\nThis enables you to build pages that are faster to load and eliminate [layout shifts](https://vercel.com/blog/how-core-web-vitals-affect-seo).\n\n### Choose the data fetching strategy\n\nDepending on your needs, Next.js allows you to choose your data fetching strategy on a page and component basis. You can decide to fetch at build time, at request time on the server, or on the client. For example, you can fetch data from your CMS and render your blog posts at build time, which can then be efficiently cached on a CDN.\n\n### Middleware\n\n[Next.js Middleware](/docs/app/building-your-application/routing/middleware) allows you to run code on the server before a request is completed. This is especially useful to avoid having a flash of unauthenticated content when the user visits an authenticated-only page by redirecting the user to a login page. The middleware is also useful for experimentation and [internationalization](/docs/app/building-your-application/routing/internationalization).\n\n### Built-in Optimizations\n\n[Images](/docs/app/building-your-application/optimizing/images), [fonts](/docs/app/building-your-application/optimizing/fonts), and [third-party scripts](/docs/app/building-your-application/optimizing/scripts) often have significant impact on an application's performance. Next.js comes with built-in components that automatically optimize those for you.\n\n## Migration Steps\n\nOur goal with this migration is to get a working Next.js application as quickly as possible, so that\nyou can then adopt Next.js features incrementally. To begin with, we'll keep it as a purely\nclient-side application (SPA) without migrating your existing router. This helps minimize the\nchances of encountering issues during the migration process and reduces merge conflicts.\n\n### Step 1: Install the Next.js Dependency\n\nThe first thing you need to do is to install `next` as a dependency:\n\n```bash filename=\"Terminal\"\nnpm install next@latest\n```\n\n### Step 2: Create the Next.js Configuration File\n\nCreate a `next.config.mjs` at the root of your project. This file will hold your\n[Next.js configuration options](/docs/app/api-reference/next-config-js).\n\n```js filename=\"next.config.mjs\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n}\n\nexport default nextConfig\n```\n\n> **Good to know:** You can use either `.js` or `.mjs` for your Next.js configuration file.\n\n### Step 3: Update TypeScript Configuration\n\nIf you're using TypeScript, you need to update your `tsconfig.json` file with the following changes\nto make it compatible with Next.js. If you're not using TypeScript, you can skip this step.\n\n1. Remove the [project reference](https://www.typescriptlang.org/tsconfig#references) to `tsconfig.node.json`\n2. Add `./dist/types/**/*.ts` and `./next-env.d.ts` to the [`include` array](https://www.typescriptlang.org/tsconfig#include)\n3. Add `./node_modules` to the [`exclude` array](https://www.typescriptlang.org/tsconfig#exclude)\n4. Add `{ \"name\": \"next\" }` to the [`plugins` array in `compilerOptions`](https://www.typescriptlang.org/tsconfig#plugins): `\"plugins\": [{ \"name\": \"next\" }]`\n5. Set [`esModuleInterop`](https://www.typescriptlang.org/tsconfig#esModuleInterop) to `true`: `\"esModuleInterop\": true`\n6. Set [`jsx`](https://www.typescriptlang.org/tsconfig#jsx) to `preserve`: `\"jsx\": \"preserve\"`\n7. Set [`allowJs`](https://www.typescriptlang.org/tsconfig#allowJs) to `true`: `\"allowJs\": true`\n8. Set [`forceConsistentCasingInFileNames`](https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames) to `true`: `\"forceConsistentCasingInFileNames\": true`\n9. Set [`incremental`](https://www.typescriptlang.org/tsconfig#incremental) to `true`: `\"incremental\": true`\n\nHere's an example of a working `tsconfig.json` with those changes:\n\n```json filename=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"allowJs\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"plugins\": [{ \"name\": \"next\" }]\n  },\n  \"include\": [\"./src\", \"./dist/types/**/*.ts\", \"./next-env.d.ts\"],\n  \"exclude\": [\"./node_modules\"]\n}\n```\n\nYou can find more information about configuring TypeScript on the\n[Next.js docs](/docs/app/building-your-application/configuring/typescript#typescript-plugin).\n\n### Step 4: Create the Root Layout\n\nA Next.js [App Router](/docs/app) application must include a\n[root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required)\nfile, which is a [React Server Component](/docs/app/building-your-application/rendering/server-components)\nthat will wrap all pages in your application. This file is defined at the top level of the `app`\ndirectory.\n\nThe closest equivalent to the root layout file in a Vite application is the\n[`index.html` file](https://vitejs.dev/guide/#index-html-and-project-root), which contains your\n`<html>`, `<head>`, and `<body>` tags.\n\nIn this step, you'll convert your `index.html` file into a root layout file:\n\n1. Create a new `app` directory in your `src` directory.\n2. Create a new `layout.tsx` file inside that `app` directory:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return null\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return null\n}\n```\n\n> **Good to know**: `.js`, `.jsx`, or `.tsx` extensions can be used for Layout files.\n\n3. Copy the content of your `index.html` file into the previously created `<RootLayout>` component while\n   replacing the `body.div#root` and `body.script` tags with `<div id=\"root\">{children}</div>`:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n4. Next.js already includes by default the\n   [meta charset](https://developer.mozilla.org/docs/Web/HTML/Element/meta#charset) and\n   [meta viewport](https://developer.mozilla.org/docs/Web/HTML/Viewport_meta_tag) tags, so you\n   can safely remove those from your `<head>`:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/icon.svg\" />\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n5. Any [metadata files](/docs/app/building-your-application/optimizing/metadata#file-based-metadata)\n   such as `favicon.ico`, `icon.png`, `robots.txt` are automatically added to the application\n   `<head>` tag as long as you have them placed into the top level of the `app` directory. After\n   moving\n   [all supported files](/docs/app/building-your-application/optimizing/metadata#file-based-metadata)\n   into the `app` directory you can safely delete their `<link>` tags:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <title>My App</title>\n        <meta name=\"description\" content=\"My App is a...\" />\n      </head>\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n6. Finally, Next.js can manage your last `<head>` tags with the\n   [Metadata API](/docs/app/building-your-application/optimizing/metadata). Move your final metadata\n   info into an exported\n   [`metadata` object](/docs/app/api-reference/functions/generate-metadata#metadata-object):\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport type { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  title: 'My App',\n  description: 'My App is a...',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <div id=\"root\">{children}</div>\n      </body>\n    </html>\n  )\n}\n```\n\nWith the above changes, you shifted from declaring everything in your `index.html` to using Next.js'\nconvention-based approach built into the framework\n([Metadata API](/docs/app/building-your-application/optimizing/metadata)). This approach enables you\nto more easily improve your SEO and web shareability of your pages.\n\n### Step 5: Create the Entrypoint Page\n\nOn Next.js you declare an entrypoint for your application by creating a `page.tsx` file. The\nclosest equivalent of this file on Vite is your `main.tsx` file. In this step, you\u2019ll set up the\nentrypoint of your application.\n\n1. **Create a `[[...slug]]` directory in your `app` directory.**\n\nSince in this guide we're aiming first to set up our Next.js as an SPA (Single Page Application),\nyou need your page entrypoint to catch all possible routes of your application. For that, create a\nnew `[[...slug]]` directory in your `app` directory.\n\nThis directory is what is called an\n[optional catch-all route segment](/docs/app/building-your-application/routing/dynamic-routes#optional-catch-all-segments).\nNext.js uses a file-system based router where\n[directories are used to define routes](/docs/app/building-your-application/routing/defining-routes#creating-routes).\nThis special directory will make sure that all routes of your application will be directed to its\ncontaining `page.tsx` file.\n\n2. **Create a new `page.tsx` file inside the `app/[[...slug]]` directory with the following content:**\n\n```tsx filename=\"app/[[...slug]]/page.tsx\" switcher\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n```jsx filename=\"app/[[...slug]]/page.js\" switcher\nimport '../../index.css'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return '...' // We'll update this\n}\n```\n\n> **Good to know**: `.js`, `.jsx`, or `.tsx` extensions can be used for Page files.\n\nThis file is a [Server Component](/docs/app/building-your-application/rendering/server-components). When you run `next build`, the file is prerendered into a static asset. It does _not_ require any dynamic code.\n\nThis file imports our global CSS and tells [`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params) we are only going to generate one route, the index route at `/`.\n\nNow, let's move the rest of our Vite application which will run client-only.\n\n```tsx filename=\"app/[[...slug]]/client.tsx\" switcher\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\n```jsx filename=\"app/[[...slug]]/client.js\" switcher\n'use client'\n\nimport React from 'react'\nimport dynamic from 'next/dynamic'\n\nconst App = dynamic(() => import('../../App'), { ssr: false })\n\nexport function ClientOnly() {\n  return <App />\n}\n```\n\nThis file is a [Client Component](/docs/app/building-your-application/rendering/client-components), defined by the `'use client'`\ndirective. Client Components are still [prerendered to HTML](/docs/app/building-your-application/rendering/client-components#how-are-client-components-rendered) on the server before being sent to the client.\n\nSince we want a client-only application to start, we can configure Next.js to disable prerendering from the `App` component down.\n\n```tsx\nconst App = dynamic(() => import('../../App'), { ssr: false })\n```\n\nNow, update your entrypoint page to use the new component:\n\n```tsx filename=\"app/[[...slug]]/page.tsx\" switcher\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n```jsx filename=\"app/[[...slug]]/page.js\" switcher\nimport '../../index.css'\nimport { ClientOnly } from './client'\n\nexport function generateStaticParams() {\n  return [{ slug: [''] }]\n}\n\nexport default function Page() {\n  return <ClientOnly />\n}\n```\n\n### Step 6: Update Static Image Imports\n\nNext.js handles static image imports slightly different from Vite. With Vite, importing an image\nfile will return its public URL as a string:\n\n```tsx filename=\"App.tsx\"\nimport image from './img.png' // `image` will be '/assets/img.2d8efhg.png' in production\n\nexport default function App() {\n  return <img src={image} />\n}\n```\n\nWith Next.js, static image imports return an object. The object can then be used directly with the\nNext.js [`<Image>` component](/docs/app/api-reference/components/image), or you can use the object's\n`src` property with your existing `<img>` tag.\n\nThe `<Image>` component has the added benefits of\n[automatic image optimization](/docs/app/building-your-application/optimizing/images). The `<Image>`\ncomponent automatically sets the `width` and `height` attributes of the resulting `<img>` based on\nthe image's dimensions. This prevents layout shifts when the image loads. However, this can cause\nissues if your app contains images with only one of their dimensions being styled without the other\nstyled to `auto`. When not styled to `auto`, the dimension will default to the `<img>` dimension\nattribute's value, which can cause the image to appear distorted.\n\nKeeping the `<img>` tag will reduce the amount of changes in your application and prevent the above\nissues. You can then optionally later migrate to the `<Image>` component to take advantage of optimizing images by [configuring a loader](/docs/app/building-your-application/optimizing/images#loaders), or moving to the default Next.js server which has automatic image optimization.\n\n1. **Convert absolute import paths for images imported from `/public` into relative imports:**\n\n```tsx\n// Before\nimport logo from '/logo.png'\n\n// After\nimport logo from '../public/logo.png'\n```\n\n2. **Pass the image `src` property instead of the whole image object to your `<img>` tag:**\n\n```tsx\n// Before\n<img src={logo} />\n\n// After\n<img src={logo.src} />\n```\n\nAlternatively, you can reference the public URL for the image asset based on the filename. For example, `public/logo.png` will serve the image at `/logo.png` for your application, which would be the `src` value.\n\n> **Warning:** If you're using TypeScript, you might encounter type errors when accessing the `src`\n> property. You can safely ignore those for now. They will be fixed by the end of this guide.\n\n### Step 7: Migrate the Environment Variables\n\nNext.js has support for `.env`\n[environment variables](/docs/app/building-your-application/configuring/environment-variables)\nsimilar to Vite. The main difference is the prefix used to expose environment variables on the\nclient-side.\n\n- Change all environment variables with the `VITE_` prefix to `NEXT_PUBLIC_`.\n\nVite exposes a few built-in environment variables on the special `import.meta.env` object which\naren\u2019t supported by Next.js. You need to update their usage as follows:\n\n- `import.meta.env.MODE` \u21d2 `process.env.NODE_ENV`\n- `import.meta.env.PROD` \u21d2 `process.env.NODE_ENV === 'production'`\n- `import.meta.env.DEV` \u21d2 `process.env.NODE_ENV !== 'production'`\n- `import.meta.env.SSR` \u21d2 `typeof window !== 'undefined'`\n\nNext.js also doesn't provide a built-in `BASE_URL` environment variable. However, you can still\nconfigure one, if you need it:\n\n1. **Add the following to your `.env` file:**\n\n```bash filename=\".env\"\n# ...\nNEXT_PUBLIC_BASE_PATH=\"/some-base-path\"\n```\n\n2. **Set [`basePath`](/docs/app/api-reference/next-config-js/basePath) to `process.env.NEXT_PUBLIC_BASE_PATH` in your `next.config.mjs` file:**\n\n```js filename=\"next.config.mjs\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export', // Outputs a Single-Page Application (SPA).\n  distDir: './dist', // Changes the build output directory to `./dist/`.\n  basePath: process.env.NEXT_PUBLIC_BASE_PATH, // Sets the base path to `/some-base-path`.\n}\n\nexport default nextConfig\n```\n\n3. **Update `import.meta.env.BASE_URL` usages to `process.env.NEXT_PUBLIC_BASE_PATH`**\n\n### Step 8: Update Scripts in `package.json`\n\nYou should now be able to run your application to test if you successfully migrated to Next.js. But\nbefore that, you need to update your `scripts` in your `package.json` with Next.js related commands,\nand add `.next` and `next-env.d.ts` to your `.gitignore`:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n```txt filename=\".gitignore\"\n# ...\n.next\nnext-env.d.ts\ndist\n```\n\nNow run `npm run dev`, and open [`http://localhost:3000`](http://localhost:3000). You should see your application now running on Next.js.\n\n> **Example:** Check out [this pull request](https://github.com/inngest/vite-to-nextjs/pull/1) for a\n> working example of a Vite application migrated to Next.js.\n\n### Step 9: Clean Up\n\nYou can now clean up your codebase from Vite related artifacts:\n\n- Delete `main.tsx`\n- Delete `index.html`\n- Delete `vite-env.d.ts`\n- Delete `tsconfig.node.json`\n- Delete `vite.config.ts`\n- Uninstall Vite dependencies\n\n## Next Steps\n\nIf everything went according to plan, you now have a functioning Next.js application running as a\nsingle-page application. However, you aren't yet taking advantage of most of Next.js' benefits, but\nyou can now start making incremental changes to reap all the benefits. Here's what you might want to\ndo next:\n\n- Migrate from React Router to the [Next.js App Router](/docs/app/building-your-application/routing) to get:\n  - Automatic code splitting\n  - [Streaming Server-Rendering](/docs/app/building-your-application/routing/loading-ui-and-streaming)\n  - [React Server Components](/docs/app/building-your-application/rendering/server-components)\n- [Optimize images with the `<Image>` component](/docs/app/building-your-application/optimizing/images)\n- [Optimize fonts with `next/font`](/docs/app/building-your-application/optimizing/fonts)\n- [Optimize third-party scripts with the `<Script>` component](/docs/app/building-your-application/optimizing/scripts)\n- [Update your ESLint configuration to support Next.js rules](/docs/app/building-your-application/configuring/eslint)\n", "01-building-your-application/11-upgrading/index.mdx": "---\ntitle: Upgrade Guide\nnav_title: Upgrading\ndescription: Learn how to upgrade to the latest versions of Next.js.\n---\n\nUpgrade your application to newer versions of Next.js or migrate from the Pages Router to the App Router.\n", "01-building-your-application/11-upgrading/03-version-14.mdx": "---\ntitle: Version 14\ndescription: Upgrade your Next.js Application from Version 13 to 14.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n## Upgrading from 13 to 14\n\nTo update to Next.js version 14, run the following command using your preferred package manager:\n\n```bash filename=\"Terminal\"\nnpm i next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n```bash filename=\"Terminal\"\nyarn add next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n```bash filename=\"Terminal\"\npnpm up next react react-dom eslint-config-next --latest\n```\n\n```bash filename=\"Terminal\"\nbun add next@latest react@latest react-dom@latest eslint-config-next@latest\n```\n\n> **Good to know:** If you are using TypeScript, ensure you also upgrade `@types/react` and `@types/react-dom` to their latest versions.\n\n### v14 Summary\n\n- The minimum Node.js version has been bumped from 16.14 to 18.17, since 16.x has reached end-of-life.\n- The `next export` command has been removed in favor of `output: 'export'` config. Please see the [docs](https://nextjs.org/docs/app/building-your-application/deploying/static-exports) for more information.\n- The `next/server` import for `ImageResponse` was renamed to `next/og`. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#next-og-import) to safely and automatically rename your imports.\n- The `@next/font` package has been fully removed in favor of the built-in `next/font`. A [codemod is available](/docs/app/building-your-application/upgrading/codemods#built-in-next-font) to safely and automatically rename your imports.\n- The WASM target for `next-swc` has been removed.\n", "01-building-your-application/11-upgrading/02-app-router-migration.mdx": "---\ntitle: App Router Incremental Adoption Guide\nnav_title: App Router Migration\ndescription: Learn how to upgrade your existing Next.js application from the Pages Router to the App Router.\n---\n\nThis guide will help you:\n\n- [Update your Next.js application from version 12 to version 13](#nextjs-version)\n- [Upgrade features that work in both the `pages` and the `app` directories](#upgrading-new-features)\n- [Incrementally migrate your existing application from `pages` to `app`](#migrating-from-pages-to-app)\n\n## Upgrading\n\n### Node.js Version\n\nThe minimum Node.js version is now **v18.17**. See the [Node.js documentation](https://nodejs.org/docs/latest-v18.x/api/) for more information.\n\n### Next.js Version\n\nTo update to Next.js version 13, run the following command using your preferred package manager:\n\n```bash filename=\"Terminal\"\nnpm install next@latest react@latest react-dom@latest\n```\n\n### ESLint Version\n\nIf you're using ESLint, you need to upgrade your ESLint version:\n\n```bash filename=\"Terminal\"\nnpm install -D eslint-config-next@latest\n```\n\n> **Good to know**: You may need to restart the ESLint server in VS Code for the ESLint changes to take effect. Open the Command Palette (`cmd+shift+p` on Mac; `ctrl+shift+p` on Windows) and search for `ESLint: Restart ESLint Server`.\n\n## Next Steps\n\nAfter you've updated, see the following sections for next steps:\n\n- [Upgrade new features](#upgrading-new-features): A guide to help you upgrade to new features such as the improved Image and Link Components.\n- [Migrate from the `pages` to `app` directory](#migrating-from-pages-to-app): A step-by-step guide to help you incrementally migrate from the `pages` to the `app` directory.\n\n## Upgrading New Features\n\nNext.js 13 introduced the new [App Router](/docs/app/building-your-application/routing) with new features and conventions. The new Router is available in the `app` directory and co-exists with the `pages` directory.\n\nUpgrading to Next.js 13 does **not** require using the new [App Router](/docs/app/building-your-application/routing#the-app-router). You can continue using `pages` with new features that work in both directories, such as the updated [Image component](#image-component), [Link component](#link-component), [Script component](#script-component), and [Font optimization](#font-optimization).\n\n### `<Image/>` Component\n\nNext.js 12 introduced new improvements to the Image Component with a temporary import: `next/future/image`. These improvements included less client-side JavaScript, easier ways to extend and style images, better accessibility, and native browser lazy loading.\n\nIn version 13, this new behavior is now the default for `next/image`.\n\nThere are two codemods to help you migrate to the new Image Component:\n\n- [**`next-image-to-legacy-image` codemod**](/docs/app/building-your-application/upgrading/codemods#next-image-to-legacy-image): Safely and automatically renames `next/image` imports to `next/legacy/image`. Existing components will maintain the same behavior.\n- [**`next-image-experimental` codemod**](/docs/app/building-your-application/upgrading/codemods#next-image-experimental): Dangerously adds inline styles and removes unused props. This will change the behavior of existing components to match the new defaults. To use this codemod, you need to run the `next-image-to-legacy-image` codemod first.\n\n### `<Link>` Component\n\nThe [`<Link>` Component](/docs/app/building-your-application/routing/linking-and-navigating#link-component) no longer requires manually adding an `<a>` tag as a child. This behavior was added as an experimental option in [version 12.2](https://nextjs.org/blog/next-12-2) and is now the default. In Next.js 13, `<Link>` always renders `<a>` and allows you to forward props to the underlying tag.\n\nFor example:\n\n```jsx\nimport Link from 'next/link'\n\n// Next.js 12: `<a>` has to be nested otherwise it's excluded\n<Link href=\"/about\">\n  <a>About</a>\n</Link>\n\n// Next.js 13: `<Link>` always renders `<a>` under the hood\n<Link href=\"/about\">\n  About\n</Link>\n```\n\nTo upgrade your links to Next.js 13, you can use the [`new-link` codemod](/docs/app/building-your-application/upgrading/codemods#new-link).\n\n### `<Script>` Component\n\nThe behavior of [`next/script`](/docs/app/api-reference/components/script) has been updated to support both `pages` and `app`, but some changes need to be made to ensure a smooth migration:\n\n- Move any `beforeInteractive` scripts you previously included in `_document.js` to the root layout file (`app/layout.tsx`).\n- The experimental `worker` strategy does not yet work in `app` and scripts denoted with this strategy will either have to be removed or modified to use a different strategy (e.g. `lazyOnload`).\n- `onLoad`, `onReady`, and `onError` handlers will not work in Server Components so make sure to move them to a [Client Component](/docs/app/building-your-application/rendering/server-components) or remove them altogether.\n\n### Font Optimization\n\nPreviously, Next.js helped you optimize fonts by [inlining font CSS](/docs/app/building-your-application/optimizing/fonts). Version 13 introduces the new [`next/font`](/docs/app/building-your-application/optimizing/fonts) module which gives you the ability to customize your font loading experience while still ensuring great performance and privacy. `next/font` is supported in both the `pages` and `app` directories.\n\nWhile [inlining CSS](/docs/app/building-your-application/optimizing/fonts) still works in `pages`, it does not work in `app`. You should use [`next/font`](/docs/app/building-your-application/optimizing/fonts) instead.\n\nSee the [Font Optimization](/docs/app/building-your-application/optimizing/fonts) page to learn how to use `next/font`.\n\n## Migrating from `pages` to `app`\n\n> **\ud83c\udfa5 Watch:** Learn how to incrementally adopt the App Router \u2192 [YouTube (16 minutes)](https://www.youtube.com/watch?v=YQMSietiFm0).\n\nMoving to the App Router may be the first time using React features that Next.js builds on top of such as Server Components, Suspense, and more. When combined with new Next.js features such as [special files](/docs/app/building-your-application/routing#file-conventions) and [layouts](/docs/app/building-your-application/routing/layouts-and-templates#layouts), migration means new concepts, mental models, and behavioral changes to learn.\n\nWe recommend reducing the combined complexity of these updates by breaking down your migration into smaller steps. The `app` directory is intentionally designed to work simultaneously with the `pages` directory to allow for incremental page-by-page migration.\n\n- The `app` directory supports nested routes _and_ layouts. [Learn more](/docs/app/building-your-application/routing).\n- Use nested folders to [define routes](/docs/app/building-your-application/routing/defining-routes) and a special `page.js` file to make a route segment publicly accessible. [Learn more](#step-4-migrating-pages).\n- [Special file conventions](/docs/app/building-your-application/routing#file-conventions) are used to create UI for each route segment. The most common special files are `page.js` and `layout.js`.\n  - Use `page.js` to define UI unique to a route.\n  - Use `layout.js` to define UI that is shared across multiple routes.\n  - `.js`, `.jsx`, or `.tsx` file extensions can be used for special files.\n- You can colocate other files inside the `app` directory such as components, styles, tests, and more. [Learn more](/docs/app/building-your-application/routing).\n- Data fetching functions like `getServerSideProps` and `getStaticProps` have been replaced with [a new API](/docs/app/building-your-application/data-fetching) inside `app`. `getStaticPaths` has been replaced with [`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params).\n- `pages/_app.js` and `pages/_document.js` have been replaced with a single `app/layout.js` root layout. [Learn more](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required).\n- `pages/_error.js` has been replaced with more granular `error.js` special files. [Learn more](/docs/app/building-your-application/routing/error-handling).\n- `pages/404.js` has been replaced with the [`not-found.js`](/docs/app/api-reference/file-conventions/not-found) file.\n- `pages/api/*` API Routes have been replaced with the [`route.js`](/docs/app/api-reference/file-conventions/route) (Route Handler) special file.\n\n### Step 1: Creating the `app` directory\n\nUpdate to the latest Next.js version (requires 13.4 or greater):\n\n```bash\nnpm install next@latest\n```\n\nThen, create a new `app` directory at the root of your project (or `src/` directory).\n\n### Step 2: Creating a Root Layout\n\nCreate a new `app/layout.tsx` file inside the `app` directory. This is a [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required) that will apply to all routes inside `app`.\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({\n  // Layouts must accept a children prop.\n  // This will be populated with nested layouts or pages\n  children,\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n- The `app` directory **must** include a root layout.\n- The root layout must define `<html>`, and `<body>` tags since Next.js does not automatically create them\n- The root layout replaces the `pages/_app.tsx` and `pages/_document.tsx` files.\n- `.js`, `.jsx`, or `.tsx` extensions can be used for layout files.\n\nTo manage `<head>` HTML elements, you can use the [built-in SEO support](/docs/app/building-your-application/optimizing/metadata):\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport const metadata = {\n  title: 'Home',\n  description: 'Welcome to Next.js',\n}\n```\n\n#### Migrating `_document.js` and `_app.js`\n\nIf you have an existing `_app` or `_document` file, you can copy the contents (e.g. global styles) to the root layout (`app/layout.tsx`). Styles in `app/layout.tsx` will _not_ apply to `pages/*`. You should keep `_app`/`_document` while migrating to prevent your `pages/*` routes from breaking. Once fully migrated, you can then safely delete them.\n\nIf you are using any React Context providers, they will need to be moved to a [Client Component](/docs/app/building-your-application/rendering/client-components).\n\n#### Migrating the `getLayout()` pattern to Layouts (Optional)\n\nNext.js recommended adding a [property to Page components](/docs/pages/building-your-application/routing/pages-and-layouts#layout-pattern#per-page-layouts) to achieve per-page layouts in the `pages` directory. This pattern can be replaced with native support for [nested layouts](/docs/app/building-your-application/routing/layouts-and-templates#layouts) in the `app` directory.\n\n<details>\n  <summary>See before and after example</summary>\n\n**Before**\n\n```jsx filename=\"components/DashboardLayout.js\"\nexport default function DashboardLayout({ children }) {\n  return (\n    <div>\n      <h2>My Dashboard</h2>\n      {children}\n    </div>\n  )\n}\n```\n\n```jsx filename=\"pages/dashboard/index.js\"\nimport DashboardLayout from '../components/DashboardLayout'\n\nexport default function Page() {\n  return <p>My Page</p>\n}\n\nPage.getLayout = function getLayout(page) {\n  return <DashboardLayout>{page}</DashboardLayout>\n}\n```\n\n**After**\n\n- Remove the `Page.getLayout` property from `pages/dashboard/index.js` and follow the [steps for migrating pages](#step-4-migrating-pages) to the `app` directory.\n\n  ```jsx filename=\"app/dashboard/page.js\"\n  export default function Page() {\n    return <p>My Page</p>\n  }\n  ```\n\n- Move the contents of `DashboardLayout` into a new [Client Component](/docs/app/building-your-application/rendering/client-components) to retain `pages` directory behavior.\n\n  ```jsx filename=\"app/dashboard/DashboardLayout.js\"\n  'use client' // this directive should be at top of the file, before any imports.\n\n  // This is a Client Component\n  export default function DashboardLayout({ children }) {\n    return (\n      <div>\n        <h2>My Dashboard</h2>\n        {children}\n      </div>\n    )\n  }\n  ```\n\n- Import the `DashboardLayout` into a new `layout.js` file inside the `app` directory.\n\n  ```jsx filename=\"app/dashboard/layout.js\"\n  import DashboardLayout from './DashboardLayout'\n\n  // This is a Server Component\n  export default function Layout({ children }) {\n    return <DashboardLayout>{children}</DashboardLayout>\n  }\n  ```\n\n- You can incrementally move non-interactive parts of `DashboardLayout.js` (Client Component) into `layout.js` (Server Component) to reduce the amount of component JavaScript you send to the client.\n\n</details>\n\n### Step 3: Migrating `next/head`\n\nIn the `pages` directory, the `next/head` React component is used to manage `<head>` HTML elements such as `title` and `meta` . In the `app` directory, `next/head` is replaced with the new [built-in SEO support](/docs/app/building-your-application/optimizing/metadata).\n\n**Before:**\n\n```tsx filename=\"pages/index.tsx\" switcher\nimport Head from 'next/head'\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n```\n\n```jsx filename=\"pages/index.js\" switcher\nimport Head from 'next/head'\n\nexport default function Page() {\n  return (\n    <>\n      <Head>\n        <title>My page title</title>\n      </Head>\n    </>\n  )\n}\n```\n\n**After:**\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'My Page Title',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport const metadata = {\n  title: 'My Page Title',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n[See all metadata options](/docs/app/api-reference/functions/generate-metadata).\n\n### Step 4: Migrating Pages\n\n- Pages in the [`app` directory](/docs/app/building-your-application/routing) are [Server Components](/docs/app/building-your-application/rendering/server-components) by default. This is different from the `pages` directory where pages are [Client Components](/docs/app/building-your-application/rendering/client-components).\n- [Data fetching](/docs/app/building-your-application/data-fetching) has changed in `app`. `getServerSideProps`, `getStaticProps` and `getInitialProps` have been replaced with a simpler API.\n- The `app` directory uses nested folders to [define routes](/docs/app/building-your-application/routing/defining-routes) and a special `page.js` file to make a route segment publicly accessible.\n- | `pages` Directory | `app` Directory       | Route          |\n  | ----------------- | --------------------- | -------------- |\n  | `index.js`        | `page.js`             | `/`            |\n  | `about.js`        | `about/page.js`       | `/about`       |\n  | `blog/[slug].js`  | `blog/[slug]/page.js` | `/blog/post-1` |\n\nWe recommend breaking down the migration of a page into two main steps:\n\n- Step 1: Move the default exported Page Component into a new Client Component.\n- Step 2: Import the new Client Component into a new `page.js` file inside the `app` directory.\n\n> **Good to know**: This is the easiest migration path because it has the most comparable behavior to the `pages` directory.\n\n**Step 1: Create a new Client Component**\n\n- Create a new separate file inside the `app` directory (i.e. `app/home-page.tsx` or similar) that exports a Client Component. To define Client Components, add the `'use client'` directive to the top of the file (before any imports).\n  - Similar to the Pages Router, there is an [optimization step](/docs/app/building-your-application/rendering/client-components#full-page-load) to prerender Client Components to static HTML on the initial page load.\n- Move the default exported page component from `pages/index.js` to `app/home-page.tsx`.\n\n```tsx filename=\"app/home-page.tsx\" switcher\n'use client'\n\n// This is a Client Component (same as components in the `pages` directory)\n// It receives data as props, has access to state and effects, and is\n// prerendered on the server during the initial page load.\nexport default function HomePage({ recentPosts }) {\n  return (\n    <div>\n      {recentPosts.map((post) => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/home-page.js\" switcher\n'use client'\n\n// This is a Client Component. It receives data as props and\n// has access to state and effects just like Page components\n// in the `pages` directory.\nexport default function HomePage({ recentPosts }) {\n  return (\n    <div>\n      {recentPosts.map((post) => (\n        <div key={post.id}>{post.title}</div>\n      ))}\n    </div>\n  )\n}\n```\n\n**Step 2: Create a new page**\n\n- Create a new `app/page.tsx` file inside the `app` directory. This is a Server Component by default.\n- Import the `home-page.tsx` Client Component into the page.\n- If you were fetching data in `pages/index.js`, move the data fetching logic directly into the Server Component using the new [data fetching APIs](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating). See the [data fetching upgrade guide](#step-6-migrating-data-fetching-methods) for more details.\n\n  ```tsx filename=\"app/page.tsx\" switcher\n  // Import your Client Component\n  import HomePage from './home-page'\n\n  async function getPosts() {\n    const res = await fetch('https://...')\n    const posts = await res.json()\n    return posts\n  }\n\n  export default async function Page() {\n    // Fetch data directly in a Server Component\n    const recentPosts = await getPosts()\n    // Forward fetched data to your Client Component\n    return <HomePage recentPosts={recentPosts} />\n  }\n  ```\n\n  ```jsx filename=\"app/page.js\" switcher\n  // Import your Client Component\n  import HomePage from './home-page'\n\n  async function getPosts() {\n    const res = await fetch('https://...')\n    const posts = await res.json()\n    return posts\n  }\n\n  export default async function Page() {\n    // Fetch data directly in a Server Component\n    const recentPosts = await getPosts()\n    // Forward fetched data to your Client Component\n    return <HomePage recentPosts={recentPosts} />\n  }\n  ```\n\n- If your previous page used `useRouter`, you'll need to update to the new routing hooks. [Learn more](/docs/app/api-reference/functions/use-router).\n- Start your development server and visit [`http://localhost:3000`](http://localhost:3000). You should see your existing index route, now served through the app directory.\n\n### Step 5: Migrating Routing Hooks\n\nA new router has been added to support the new behavior in the `app` directory.\n\nIn `app`, you should use the three new hooks imported from `next/navigation`: [`useRouter()`](/docs/app/api-reference/functions/use-router), [`usePathname()`](/docs/app/api-reference/functions/use-pathname), and [`useSearchParams()`](/docs/app/api-reference/functions/use-search-params).\n\n- The new `useRouter` hook is imported from `next/navigation` and has different behavior to the `useRouter` hook in `pages` which is imported from `next/router`.\n  - The [`useRouter` hook imported from `next/router`](/docs/pages/api-reference/functions/use-router) is not supported in the `app` directory but can continue to be used in the `pages` directory.\n- The new `useRouter` does not return the `pathname` string. Use the separate `usePathname` hook instead.\n- The new `useRouter` does not return the `query` object. Use the separate `useSearchParams` hook instead.\n- You can use `useSearchParams` and `usePathname` together to listen to page changes. See the [Router Events](/docs/app/api-reference/functions/use-router#router-events) section for more details.\n- These new hooks are only supported in Client Components. They cannot be used in Server Components.\n\n```tsx filename=\"app/example-client-component.tsx\" switcher\n'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}\n```\n\n```jsx filename=\"app/example-client-component.js\" switcher\n'use client'\n\nimport { useRouter, usePathname, useSearchParams } from 'next/navigation'\n\nexport default function ExampleClientComponent() {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  // ...\n}\n```\n\nIn addition, the new `useRouter` hook has the following changes:\n\n- `isFallback` has been removed because `fallback` has [been replaced](#replacing-fallback).\n- The `locale`, `locales`, `defaultLocales`, `domainLocales` values have been removed because built-in i18n Next.js features are no longer necessary in the `app` directory. [Learn more about i18n](/docs/app/building-your-application/routing/internationalization).\n- `basePath` has been removed. The alternative will not be part of `useRouter`. It has not yet been implemented.\n- `asPath` has been removed because the concept of `as` has been removed from the new router.\n- `isReady` has been removed because it is no longer necessary. During [static rendering](/docs/app/building-your-application/rendering/server-components#static-rendering-default), any component that uses the [`useSearchParams()`](/docs/app/api-reference/functions/use-search-params) hook will skip the prerendering step and instead be rendered on the client at runtime.\n\n[View the `useRouter()` API reference](/docs/app/api-reference/functions/use-router).\n\n### Step 6: Migrating Data Fetching Methods\n\nThe `pages` directory uses `getServerSideProps` and `getStaticProps` to fetch data for pages. Inside the `app` directory, these previous data fetching functions are replaced with a [simpler API](/docs/app/building-your-application/data-fetching) built on top of `fetch()` and `async` React Server Components.\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport default async function Page() {\n  // This request should be cached until manually invalidated.\n  // Similar to `getStaticProps`.\n  // `force-cache` is the default and can be omitted.\n  const staticData = await fetch(`https://...`, { cache: 'force-cache' })\n\n  // This request should be refetched on every request.\n  // Similar to `getServerSideProps`.\n  const dynamicData = await fetch(`https://...`, { cache: 'no-store' })\n\n  // This request should be cached with a lifetime of 10 seconds.\n  // Similar to `getStaticProps` with the `revalidate` option.\n  const revalidatedData = await fetch(`https://...`, {\n    next: { revalidate: 10 },\n  })\n\n  return <div>...</div>\n}\n```\n\n#### Server-side Rendering (`getServerSideProps`)\n\nIn the `pages` directory, `getServerSideProps` is used to fetch data on the server and forward props to the default exported React component in the file. The initial HTML for the page is prerendered from the server, followed by \"hydrating\" the page in the browser (making it interactive).\n\n```jsx filename=\"pages/dashboard.js\"\n// `pages` directory\n\nexport async function getServerSideProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Dashboard({ projects }) {\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\nIn the `app` directory, we can colocate our data fetching inside our React components using [Server Components](/docs/app/building-your-application/rendering/server-components). This allows us to send less JavaScript to the client, while maintaining the rendered HTML from the server.\n\nBy setting the `cache` option to `no-store`, we can indicate that the fetched data should [never be cached](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating). This is similar to `getServerSideProps` in the `pages` directory.\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/page.js\" switcher\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`, { cache: 'no-store' })\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Dashboard() {\n  const projects = await getProjects()\n\n  return (\n    <ul>\n      {projects.map((project) => (\n        <li key={project.id}>{project.name}</li>\n      ))}\n    </ul>\n  )\n}\n```\n\n#### Accessing Request Object\n\nIn the `pages` directory, you can retrieve request-based data based on the Node.js HTTP API.\n\nFor example, you can retrieve the `req` object from `getServerSideProps` and use it to retrieve the request's cookies and headers.\n\n```jsx filename=\"pages/index.js\"\n// `pages` directory\n\nexport async function getServerSideProps({ req, query }) {\n  const authHeader = req.getHeaders()['authorization'];\n  const theme = req.cookies['theme'];\n\n  return { props: { ... }}\n}\n\nexport default function Page(props) {\n  return ...\n}\n```\n\nThe `app` directory exposes new read-only functions to retrieve request data:\n\n- [`headers()`](/docs/app/api-reference/functions/headers): Based on the Web Headers API, and can be used inside [Server Components](/docs/app/building-your-application/rendering/server-components) to retrieve request headers.\n- [`cookies()`](/docs/app/api-reference/functions/cookies): Based on the Web Cookies API, and can be used inside [Server Components](/docs/app/building-your-application/rendering/server-components) to retrieve cookies.\n\n```tsx filename=\"app/page.tsx\" switcher\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = headers().get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  // You can use `cookies()` or `headers()` inside Server Components\n  // directly or in your data fetching function\n  const theme = cookies().get('theme')\n  const data = await getData()\n  return '...'\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n// `app` directory\nimport { cookies, headers } from 'next/headers'\n\nasync function getData() {\n  const authHeader = headers().get('authorization')\n\n  return '...'\n}\n\nexport default async function Page() {\n  // You can use `cookies()` or `headers()` inside Server Components\n  // directly or in your data fetching function\n  const theme = cookies().get('theme')\n  const data = await getData()\n  return '...'\n}\n```\n\n#### Static Site Generation (`getStaticProps`)\n\nIn the `pages` directory, the `getStaticProps` function is used to pre-render a page at build time. This function can be used to fetch data from an external API or directly from a database, and pass this data down to the entire page as it's being generated during the build.\n\n```jsx filename=\"pages/index.js\"\n// `pages` directory\n\nexport async function getStaticProps() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return { props: { projects } }\n}\n\nexport default function Index({ projects }) {\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\nIn the `app` directory, data fetching with [`fetch()`](/docs/app/api-reference/functions/fetch) will default to `cache: 'force-cache'`, which will cache the request data until manually invalidated. This is similar to `getStaticProps` in the `pages` directory.\n\n```jsx filename=\"app/page.js\"\n// `app` directory\n\n// This function can be named anything\nasync function getProjects() {\n  const res = await fetch(`https://...`)\n  const projects = await res.json()\n\n  return projects\n}\n\nexport default async function Index() {\n  const projects = await getProjects()\n\n  return projects.map((project) => <div>{project.name}</div>)\n}\n```\n\n#### Dynamic paths (`getStaticPaths`)\n\nIn the `pages` directory, the `getStaticPaths` function is used to define the dynamic paths that should be pre-rendered at build time.\n\n```jsx filename=\"pages/posts/[id].js\"\n// `pages` directory\nimport PostLayout from '@/components/post-layout'\n\nexport async function getStaticPaths() {\n  return {\n    paths: [{ params: { id: '1' } }, { params: { id: '2' } }],\n  }\n}\n\nexport async function getStaticProps({ params }) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  return { props: { post } }\n}\n\nexport default function Post({ post }) {\n  return <PostLayout post={post} />\n}\n```\n\nIn the `app` directory, `getStaticPaths` is replaced with [`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params).\n\n[`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params) behaves similarly to `getStaticPaths`, but has a simplified API for returning route parameters and can be used inside [layouts](/docs/app/building-your-application/routing/layouts-and-templates). The return shape of `generateStaticParams` is an array of segments instead of an array of nested `param` objects or a string of resolved paths.\n\n```jsx filename=\"app/posts/[id]/page.js\"\n// `app` directory\nimport PostLayout from '@/components/post-layout'\n\nexport async function generateStaticParams() {\n  return [{ id: '1' }, { id: '2' }]\n}\n\nasync function getPost(params) {\n  const res = await fetch(`https://.../posts/${params.id}`)\n  const post = await res.json()\n\n  return post\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params)\n\n  return <PostLayout post={post} />\n}\n```\n\nUsing the name `generateStaticParams` is more appropriate than `getStaticPaths` for the new model in the `app` directory. The `get` prefix is replaced with a more descriptive `generate`, which sits better alone now that `getStaticProps` and `getServerSideProps` are no longer necessary. The `Paths` suffix is replaced by `Params`, which is more appropriate for nested routing with multiple dynamic segments.\n\n---\n\n#### Replacing `fallback`\n\nIn the `pages` directory, the `fallback` property returned from `getStaticPaths` is used to define the behavior of a page that isn't pre-rendered at build time. This property can be set to `true` to show a fallback page while the page is being generated, `false` to show a 404 page, or `blocking` to generate the page at request time.\n\n```jsx filename=\"pages/posts/[id].js\"\n// `pages` directory\n\nexport async function getStaticPaths() {\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n}\n\nexport async function getStaticProps({ params }) {\n  ...\n}\n\nexport default function Post({ post }) {\n  return ...\n}\n```\n\nIn the `app` directory the [`config.dynamicParams` property](/docs/app/api-reference/file-conventions/route-segment-config#dynamicparams) controls how params outside of [`generateStaticParams`](/docs/app/api-reference/functions/generate-static-params) are handled:\n\n- **`true`**: (default) Dynamic segments not included in `generateStaticParams` are generated on demand.\n- **`false`**: Dynamic segments not included in `generateStaticParams` will return a 404.\n\nThis replaces the `fallback: true | false | 'blocking'` option of `getStaticPaths` in the `pages` directory. The `fallback: 'blocking'` option is not included in `dynamicParams` because the difference between `'blocking'` and `true` is negligible with streaming.\n\n```jsx filename=\"app/posts/[id]/page.js\"\n// `app` directory\n\nexport const dynamicParams = true;\n\nexport async function generateStaticParams() {\n  return [...]\n}\n\nasync function getPost(params) {\n  ...\n}\n\nexport default async function Post({ params }) {\n  const post = await getPost(params);\n\n  return ...\n}\n```\n\nWith [`dynamicParams`](/docs/app/api-reference/file-conventions/route-segment-config#dynamicparams) set to `true` (the default), when a route segment is requested that hasn't been generated, it will be server-rendered and cached.\n\n#### Incremental Static Regeneration (`getStaticProps` with `revalidate`)\n\nIn the `pages` directory, the `getStaticProps` function allows you to add a `revalidate` field to automatically regenerate a page after a certain amount of time.\n\n```jsx filename=\"pages/index.js\"\n// `pages` directory\n\nexport async function getStaticProps() {\n  const res = await fetch(`https://.../posts`)\n  const posts = await res.json()\n\n  return {\n    props: { posts },\n    revalidate: 60,\n  }\n}\n\nexport default function Index({ posts }) {\n  return (\n    <Layout>\n      <PostList posts={posts} />\n    </Layout>\n  )\n}\n```\n\nIn the `app` directory, data fetching with [`fetch()`](/docs/app/api-reference/functions/fetch) can use `revalidate`, which will cache the request for the specified amount of seconds.\n\n```jsx filename=\"app/page.js\"\n// `app` directory\n\nasync function getPosts() {\n  const res = await fetch(`https://.../posts`, { next: { revalidate: 60 } })\n  const data = await res.json()\n\n  return data.posts\n}\n\nexport default async function PostList() {\n  const posts = await getPosts()\n\n  return posts.map((post) => <div>{post.name}</div>)\n}\n```\n\n#### API Routes\n\nAPI Routes continue to work in the `pages/api` directory without any changes. However, they have been replaced by [Route Handlers](/docs/app/building-your-application/routing/route-handlers) in the `app` directory.\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web [Request](https://developer.mozilla.org/docs/Web/API/Request) and [Response](https://developer.mozilla.org/docs/Web/API/Response) APIs.\n\n```ts filename=\"app/api/route.ts\" switcher\nexport async function GET(request: Request) {}\n```\n\n```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {}\n```\n\n> **Good to know**: If you previously used API routes to call an external API from the client, you can now use [Server Components](/docs/app/building-your-application/rendering/server-components) instead to securely fetch data. Learn more about [data fetching](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating).\n\n### Step 7: Styling\n\nIn the `pages` directory, global stylesheets are restricted to only `pages/_app.js`. With the `app` directory, this restriction has been lifted. Global styles can be added to any layout, page, or component.\n\n- [CSS Modules](/docs/app/building-your-application/styling/css-modules)\n- [Tailwind CSS](/docs/app/building-your-application/styling/tailwind-css)\n- [Global Styles](/docs/app/building-your-application/styling/css-modules#global-styles)\n- [CSS-in-JS](/docs/app/building-your-application/styling/css-in-js)\n- [External Stylesheets](/docs/app/building-your-application/styling/css-modules#external-stylesheets)\n- [Sass](/docs/app/building-your-application/styling/sass)\n\n#### Tailwind CSS\n\nIf you're using Tailwind CSS, you'll need to add the `app` directory to your `tailwind.config.js` file:\n\n```js filename=\"tailwind.config.js\"\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // <-- Add this line\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n}\n```\n\nYou'll also need to import your global styles in your `app/layout.js` file:\n\n```jsx filename=\"app/layout.js\"\nimport '../styles/globals.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\nLearn more about [styling with Tailwind CSS](/docs/app/building-your-application/styling/tailwind-css)\n\n## Codemods\n\nNext.js provides Codemod transformations to help upgrade your codebase when a feature is deprecated. See [Codemods](/docs/app/building-your-application/upgrading/codemods) for more information.\n", "01-building-your-application/02-data-fetching/03-patterns.mdx": "---\ntitle: Patterns and Best Practices\nnav_title: Data Fetching Patterns and Best Practices\ndescription: Learn about common data fetching patterns in React and Next.js.\n---\n\nThere are a few recommended patterns and best practices for fetching data in React and Next.js. This page will go over some of the most common patterns and how to use them.\n\n## Fetching data on the server\n\nWhenever possible, we recommend fetching data on the server with Server Components. This allows you to:\n\n- Have direct access to backend data resources (e.g. databases).\n- Keep your application more secure by preventing sensitive information, such as access tokens and API keys, from being exposed to the client.\n- Fetch data and render in the same environment. This reduces both the back-and-forth communication between client and server, as well as the [work on the main thread](https://vercel.com/blog/how-react-18-improves-application-performance) on the client.\n- Perform multiple data fetches with single round-trip instead of multiple individual requests on the client.\n- Reduce client-server [waterfalls](#parallel-and-sequential-data-fetching).\n- Depending on your region, data fetching can also happen closer to your data source, reducing latency and improving performance.\n\nThen, you can mutate or update data with [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\n## Fetching data where it's needed\n\nIf you need to use the same data (e.g. current user) in multiple components in a tree, you do not have to fetch data globally, nor forward props between components. Instead, you can use `fetch` or React `cache` in the component that needs the data without worrying about the performance implications of making multiple requests for the same data.\n\nThis is possible because `fetch` requests are automatically memoized. Learn more about [request memoization](/docs/app/building-your-application/caching#request-memoization)\n\n> **Good to know**: This also applies to layouts, since it's not possible to pass data between a parent layout and its children.\n\n## Streaming\n\nStreaming and [Suspense](https://react.dev/reference/react/Suspense) are React features that allow you to progressively render and incrementally stream rendered units of the UI to the client.\n\nWith Server Components and [nested layouts](/docs/app/building-your-application/routing/layouts-and-templates), you're able to instantly render parts of the page that do not specifically require data, and show a [loading state](/docs/app/building-your-application/routing/loading-ui-and-streaming) for parts of the page that are fetching data. This means the user does not have to wait for the entire page to load before they can start interacting with it.\n\n<Image\n  alt=\"Server Rendering with Streaming\"\n  srcLight=\"/docs/light/server-rendering-with-streaming.png\"\n  srcDark=\"/docs/dark/server-rendering-with-streaming.png\"\n  width=\"1600\"\n  height=\"785\"\n/>\n\nTo learn more about Streaming and Suspense, see the [Loading UI](/docs/app/building-your-application/routing/loading-ui-and-streaming) and [Streaming and Suspense](/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense) pages.\n\n## Parallel and sequential data fetching\n\nWhen fetching data inside React components, you need to be aware of two data fetching patterns: Parallel and Sequential.\n\n<Image\n  alt=\"Sequential and Parallel Data Fetching\"\n  srcLight=\"/docs/light/sequential-parallel-data-fetching.png\"\n  srcDark=\"/docs/dark/sequential-parallel-data-fetching.png\"\n  width=\"1600\"\n  height=\"525\"\n/>\n\n- With **sequential data fetching**, requests in a route are dependent on each other and therefore create waterfalls. There may be cases where you want this pattern because one fetch depends on the result of the other, or you want a condition to be satisfied before the next fetch to save resources. However, this behavior can also be unintentional and lead to longer loading times.\n- With **parallel data fetching**, requests in a route are eagerly initiated and will load data at the same time. This reduces client-server waterfalls and the total time it takes to load data.\n\n### Sequential Data Fetching\n\nIf you have nested components, and each component fetches its own data, then data fetching will happen sequentially if those data requests are different (this doesn't apply to requests for the same data as they are automatically [memoized](/docs/app/building-your-application/caching#request-memoization)).\n\nFor example, the `Playlists` component will only start fetching data once the `Artist` component has finished fetching data because `Playlists` depends on the `artistID` prop:\n\n```tsx filename=\"app/artist/[username]/page.tsx\" switcher\n// ...\n\nasync function Playlists({ artistID }: { artistID: string }) {\n  // Wait for the playlists\n  const playlists = await getArtistPlaylists(artistID)\n\n  return (\n    <ul>\n      {playlists.map((playlist) => (\n        <li key={playlist.id}>{playlist.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default async function Page({\n  params: { username },\n}: {\n  params: { username: string }\n}) {\n  // Wait for the artist\n  const artist = await getArtist(username)\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Playlists artistID={artist.id} />\n      </Suspense>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/artist/[username]/page.js\" switcher\n// ...\n\nasync function Playlists({ artistID }) {\n  // Wait for the playlists\n  const playlists = await getArtistPlaylists(artistID)\n\n  return (\n    <ul>\n      {playlists.map((playlist) => (\n        <li key={playlist.id}>{playlist.name}</li>\n      ))}\n    </ul>\n  )\n}\n\nexport default async function Page({ params: { username } }) {\n  // Wait for the artist\n  const artist = await getArtist(username)\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Playlists artistID={artist.id} />\n      </Suspense>\n    </>\n  )\n}\n```\n\nIn cases like this, you can use [`loading.js`](/docs/app/building-your-application/routing/loading-ui-and-streaming) (for route segments) or [React `<Suspense>`](/docs/app/building-your-application/routing/loading-ui-and-streaming#streaming-with-suspense) (for nested components) to show an instant loading state while React streams in the result.\n\nThis will prevent the whole route from being blocked by data fetching, and the user will be able to interact with the parts of the page that are not blocked.\n\n> **Blocking Data Requests:**\n>\n> An alternative approach to prevent waterfalls is to fetch data globally, at the root of your application, but this will block rendering for all route segments beneath it until the data has finished loading. This can be described as \"all or nothing\" data fetching. Either you have the entire data for your page or application, or none.\n>\n> Any fetch requests with `await` will block rendering and data fetching for the entire tree beneath it, unless they are wrapped in a `<Suspense>` boundary or `loading.js` is used. Another alternative is to use [parallel data fetching](#parallel-data-fetching) or the [preload pattern](#preloading-data).\n\n### Parallel Data Fetching\n\nTo fetch data in parallel, you can eagerly initiate requests by defining them outside the components that use the data, then calling them from inside the component. This saves time by initiating both requests in parallel, however, the user won't see the rendered result until both promises are resolved.\n\nIn the example below, the `getArtist` and `getArtistAlbums` functions are defined outside the `Page` component, then called inside the component, and we wait for both promises to resolve:\n\n```tsx filename=\"app/artist/[username]/page.tsx\" switcher\nimport Albums from './albums'\n\nasync function getArtist(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n\nasync function getArtistAlbums(username: string) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n\nexport default async function Page({\n  params: { username },\n}: {\n  params: { username: string }\n}) {\n  // Initiate both requests in parallel\n  const artistData = getArtist(username)\n  const albumsData = getArtistAlbums(username)\n\n  // Wait for the promises to resolve\n  const [artist, albums] = await Promise.all([artistData, albumsData])\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Albums list={albums}></Albums>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/artist/[username]/page.js\" switcher\nimport Albums from './albums'\n\nasync function getArtist(username) {\n  const res = await fetch(`https://api.example.com/artist/${username}`)\n  return res.json()\n}\n\nasync function getArtistAlbums(username) {\n  const res = await fetch(`https://api.example.com/artist/${username}/albums`)\n  return res.json()\n}\n\nexport default async function Page({ params: { username } }) {\n  // Initiate both requests in parallel\n  const artistData = getArtist(username)\n  const albumsData = getArtistAlbums(username)\n\n  // Wait for the promises to resolve\n  const [artist, albums] = await Promise.all([artistData, albumsData])\n\n  return (\n    <>\n      <h1>{artist.name}</h1>\n      <Albums list={albums}></Albums>\n    </>\n  )\n}\n```\n\nTo improve the user experience, you can add a [Suspense Boundary](/docs/app/building-your-application/routing/loading-ui-and-streaming) to break up the rendering work and show part of the result as soon as possible.\n\n## Preloading Data\n\nAnother way to prevent waterfalls is to use the preload pattern. You can optionally create a `preload` function to further optimize parallel data fetching. With this approach, you don't have to pass promises down as props. The `preload` function can also have any name as it's a pattern, not an API.\n\n```tsx filename=\"components/Item.tsx\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id: string) => {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id)\n}\nexport default async function Item({ id }: { id: string }) {\n  const result = await getItem(id)\n  // ...\n}\n```\n\n```jsx filename=\"components/Item.js\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const preload = (id) => {\n  // void evaluates the given expression and returns undefined\n  // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/void\n  void getItem(id)\n}\nexport default async function Item({ id }) {\n  const result = await getItem(id)\n  // ...\n}\n```\n\n```tsx filename=\"app/item/[id]/page.tsx\" switcher\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  // starting loading item data\n  preload(id)\n  // perform another asynchronous task\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? <Item id={id} /> : null\n}\n```\n\n```jsx filename=\"app/item/[id]/page.js\" switcher\nimport Item, { preload, checkIsAvailable } from '@/components/Item'\n\nexport default async function Page({ params: { id } }) {\n  // starting loading item data\n  preload(id)\n  // perform another asynchronous task\n  const isAvailable = await checkIsAvailable()\n\n  return isAvailable ? <Item id={id} /> : null\n}\n```\n\n### Using React `cache`, `server-only`, and the Preload Pattern\n\nYou can combine the `cache` function, the `preload` pattern, and the `server-only` package to create a data fetching utility that can be used throughout your app.\n\n```ts filename=\"utils/get-item.ts\" switcher\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id: string) => {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id: string) => {\n  // ...\n})\n```\n\n```js filename=\"utils/get-item.js\" switcher\nimport { cache } from 'react'\nimport 'server-only'\n\nexport const preload = (id) => {\n  void getItem(id)\n}\n\nexport const getItem = cache(async (id) => {\n  // ...\n})\n```\n\nWith this approach, you can eagerly fetch data, cache responses, and guarantee that this data fetching [only happens on the server](/docs/app/building-your-application/rendering/composition-patterns#keeping-server-only-code-out-of-the-client-environment).\n\nThe `utils/get-item` exports can be used by Layouts, Pages, or other components to give them control over when an item's data is fetched.\n\n> **Good to know:**\n>\n> - We recommend using the [`server-only` package](/docs/app/building-your-application/rendering/composition-patterns#keeping-server-only-code-out-of-the-client-environment) to make sure server data fetching functions are never used on the client.\n\n## Preventing sensitive data from being exposed to the client\n\nWe recommend using React's taint APIs, [`taintObjectReference`](https://react.dev/reference/react/experimental_taintObjectReference) and [`taintUniqueValue`](https://react.dev/reference/react/experimental_taintUniqueValue), to prevent whole object instances or sensitive values from being passed to the client.\n\nTo enable tainting in your application, set the Next.js Config `experimental.taint` option to `true`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  experimental: {\n    taint: true,\n  },\n}\n```\n\nThen pass the object or value you want to taint to the `experimental_taintObjectReference` or `experimental_taintUniqueValue` functions:\n\n```ts filename=\"app/utils.ts\" switcher\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n```\n\n```js filename=\"app/utils.js\" switcher\nimport { queryDataFromDB } from './api'\nimport {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from 'react'\n\nexport async function getUserData() {\n  const data = await queryDataFromDB()\n  experimental_taintObjectReference(\n    'Do not pass the whole user object to the client',\n    data\n  )\n  experimental_taintUniqueValue(\n    \"Do not pass the user's address to the client\",\n    data,\n    data.address\n  )\n  return data\n}\n```\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { getUserData } from './data'\n\nexport async function Page() {\n  const userData = await getUserData()\n  return (\n    <ClientComponent\n      user={userData} // this will cause an error because of taintObjectReference\n      address={userData.address} // this will cause an error because of taintUniqueValue\n    />\n  )\n}\n```\n\nLearn more about [Security and Server Actions](https://nextjs.org/blog/security-nextjs-server-components-actions).\n", "01-building-your-application/02-data-fetching/01-fetching-caching-and-revalidating.mdx": "---\ntitle: Data Fetching, Caching, and Revalidating\nnav_title: Fetching, Caching, and Revalidating\ndescription: Learn how to fetch, cache, and revalidate data in your Next.js application.\n---\n\nData fetching is a core part of any application. This page goes through how you can fetch, cache, and revalidate data in React and Next.js.\n\nThere are four ways you can fetch data:\n\n1. [On the server, with `fetch`](#fetching-data-on-the-server-with-fetch)\n2. [On the server, with third-party libraries](#fetching-data-on-the-server-with-third-party-libraries)\n3. [On the client, via a Route Handler](#fetching-data-on-the-client-with-route-handlers)\n4. [On the client, with third-party libraries](#fetching-data-on-the-client-with-route-handlers).\n\n## Fetching Data on the Server with `fetch`\n\nNext.js extends the native [`fetch` Web API](https://developer.mozilla.org/docs/Web/API/Fetch_API) to allow you to configure the [caching](#caching-data) and [revalidating](#revalidating-data) behavior for each fetch request on the server. React extends `fetch` to automatically [memoize](/docs/app/building-your-application/data-fetching/patterns#fetching-data-where-its-needed) fetch requests while rendering a React component tree.\n\nYou can use `fetch` with `async`/`await` in Server Components, in [Route Handlers](/docs/app/building-your-application/routing/route-handlers), and in [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\nFor example:\n\n```tsx filename=\"app/page.tsx\" switcher\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n\n  if (!res.ok) {\n    // This will activate the closest `error.js` Error Boundary\n    throw new Error('Failed to fetch data')\n  }\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const data = await getData()\n\n  return <main></main>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n\n  if (!res.ok) {\n    // This will activate the closest `error.js` Error Boundary\n    throw new Error('Failed to fetch data')\n  }\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const data = await getData()\n\n  return <main></main>\n}\n```\n\n> **Good to know**:\n>\n> - Next.js provides helpful functions you may need when fetching data in Server Components such as [`cookies`](/docs/app/api-reference/functions/cookies) and [`headers`](/docs/app/api-reference/functions/headers). These will cause the route to be dynamically rendered as they rely on request time information.\n> - In Route handlers, `fetch` requests are not memoized as Route Handlers are not part of the React component tree.\n> - In [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations), `fetch` requests are not cached (defaults `cache: no-store`).\n> - To use `async`/`await` in a Server Component with TypeScript, you'll need to use TypeScript `5.1.3` or higher and `@types/react` `18.2.8` or higher.\n\n### Caching Data\n\nCaching stores data so it doesn't need to be re-fetched from your data source on every request.\n\nBy default, Next.js automatically caches the returned values of `fetch` in the [Data Cache](/docs/app/building-your-application/caching#data-cache) on the server. This means that the data can be fetched at build time or request time, cached, and reused on each data request.\n\n```js\n// 'force-cache' is the default, and can be omitted\nfetch('https://...', { cache: 'force-cache' })\n```\n\nHowever, there are exceptions, `fetch` requests are not cached when:\n\n- Used inside a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n- Used inside a [Route Handler](/docs/app/building-your-application/routing/route-handlers) that uses the `POST` method.\n\n> **What is the Data Cache?**\n>\n> The Data Cache is a persistent [HTTP cache](https://developer.mozilla.org/docs/Web/HTTP/Caching). Depending on your platform, the cache can scale automatically and be [shared across multiple regions](https://vercel.com/docs/infrastructure/data-cache).\n>\n> Learn more about the [Data Cache](/docs/app/building-your-application/caching#data-cache).\n\n### Revalidating Data\n\nRevalidation is the process of purging the Data Cache and re-fetching the latest data. This is useful when your data changes and you want to ensure you show the latest information.\n\nCached data can be revalidated in two ways:\n\n- **Time-based revalidation**: Automatically revalidate data after a certain amount of time has passed. This is useful for data that changes infrequently and freshness is not as critical.\n- **On-demand revalidation**: Manually revalidate data based on an event (e.g. form submission). On-demand revalidation can use a tag-based or path-based approach to revalidate groups of data at once. This is useful when you want to ensure the latest data is shown as soon as possible (e.g. when content from your headless CMS is updated).\n\n#### Time-based Revalidation\n\nTo revalidate data at a timed interval, you can use the `next.revalidate` option of `fetch` to set the cache lifetime of a resource (in seconds).\n\n```js\nfetch('https://...', { next: { revalidate: 3600 } })\n```\n\nAlternatively, to revalidate all `fetch` requests in a route segment, you can use the [Segment Config Options](/docs/app/api-reference/file-conventions/route-segment-config).\n\n```jsx filename=\"layout.js | page.js\"\nexport const revalidate = 3600 // revalidate at most every hour\n```\n\nIf you have multiple fetch requests in a statically rendered route, and each has a different revalidation frequency. The lowest time will be used for all requests. For dynamically rendered routes, each `fetch` request will be revalidated independently.\n\nLearn more about [time-based revalidation](/docs/app/building-your-application/caching#time-based-revalidation).\n\n#### On-demand Revalidation\n\nData can be revalidated on-demand by path ([`revalidatePath`](/docs/app/api-reference/functions/revalidatePath)) or by cache tag ([`revalidateTag`](/docs/app/api-reference/functions/revalidateTag)) inside a [Server Action](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) or [Route Handler](/docs/app/building-your-application/routing/route-handlers).\n\nNext.js has a cache tagging system for invalidating `fetch` requests across routes.\n\n1. When using `fetch`, you have the option to tag cache entries with one or more tags.\n2. Then, you can call `revalidateTag` to revalidate all entries associated with that tag.\n\nFor example, the following `fetch` request adds the cache tag `collection`:\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default async function Page() {\n  const res = await fetch('https://...', { next: { tags: ['collection'] } })\n  const data = await res.json()\n  // ...\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport default async function Page() {\n  const res = await fetch('https://...', { next: { tags: ['collection'] } })\n  const data = await res.json()\n  // ...\n}\n```\n\nYou can then revalidate this `fetch` call tagged with `collection` by calling `revalidateTag` in a Server Action:\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function action() {\n  revalidateTag('collection')\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport default async function action() {\n  revalidateTag('collection')\n}\n```\n\nLearn more about [on-demand revalidation](/docs/app/building-your-application/caching#on-demand-revalidation).\n\n#### Error handling and revalidation\n\nIf an error is thrown while attempting to revalidate data, the last successfully generated data will continue to be served from the cache. On the next subsequent request, Next.js will retry revalidating the data.\n\n### Opting out of Data Caching\n\n`fetch` requests are **not** cached if:\n\n- The `cache: 'no-store'` is added to `fetch` requests.\n- The `revalidate: 0` option is added to individual `fetch` requests.\n- The `fetch` request is inside a Router Handler that uses the `POST` method.\n- The `fetch` request comes after the usage of `headers` or `cookies`.\n- The `const dynamic = 'force-dynamic'` route segment option is used.\n- The `fetchCache` route segment option is configured to skip cache by default.\n- The `fetch` request uses `Authorization` or `Cookie` headers and there's an uncached request above it in the component tree.\n\n#### Individual `fetch` Requests\n\nTo opt out of caching for individual `fetch` requests, you can set the `cache` option in `fetch` to `'no-store'`. This will fetch data dynamically, on every request.\n\n```js filename=\"layout.js | page.js\"\nfetch('https://...', { cache: 'no-store' })\n```\n\nView all the available `cache` options in the [`fetch` API reference](/docs/app/api-reference/functions/fetch).\n\n#### Multiple `fetch` Requests\n\nIf you have multiple `fetch` requests in a route segment (e.g. a Layout or Page), you can configure the caching behavior of all data requests in the segment using the [Segment Config Options](/docs/app/api-reference/file-conventions/route-segment-config).\n\nHowever, we recommend configuring the caching behavior of each `fetch` request individually. This gives you more granular control over the caching behavior.\n\n## Fetching data on the Server with third-party libraries\n\nIn cases where you're using a third-party library that doesn't support or expose `fetch` (for example, a database, CMS, or ORM client), you can configure the caching and revalidating behavior of those requests using the [Route Segment Config Option](/docs/app/api-reference/file-conventions/route-segment-config) and React's `cache` function.\n\nWhether the data is cached or not will depend on whether the route segment is [statically or dynamically rendered](/docs/app/building-your-application/rendering/server-components#server-rendering-strategies). If the segment is static (default), the output of the request will be cached and revalidated as part of the route segment. If the segment is dynamic, the output of the request will _not_ be cached and will be re-fetched on every request when the segment is rendered.\n\nYou can also use the experimental [`unstable_cache` API](/docs/app/api-reference/functions/unstable_cache).\n\n### Example\n\nIn the example below:\n\n- The React `cache` function is used to [memoize](/docs/app/building-your-application/caching#request-memoization) data requests.\n- The `revalidate` option is set to `3600` in the Layout and Page segments, meaning the data will be cached and revalidated at most every hour.\n\n```ts filename=\"app/utils.ts\" switcher\nimport { cache } from 'react'\n\nexport const getItem = cache(async (id: string) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\n```js filename=\"app/utils.js\" switcher\nimport { cache } from 'react'\n\nexport const getItem = cache(async (id) => {\n  const item = await db.item.findUnique({ id })\n  return item\n})\n```\n\nAlthough the `getItem` function is called twice, only one query will be made to the database.\n\n```tsx filename=\"app/item/[id]/layout.tsx\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Layout({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n```jsx filename=\"app/item/[id]/layout.js\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Layout({ params: { id } }) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n```tsx filename=\"app/item/[id]/page.tsx\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Page({\n  params: { id },\n}: {\n  params: { id: string }\n}) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n```jsx filename=\"app/item/[id]/page.js\" switcher\nimport { getItem } from '@/utils/get-item'\n\nexport const revalidate = 3600 // revalidate the data at most every hour\n\nexport default async function Page({ params: { id } }) {\n  const item = await getItem(id)\n  // ...\n}\n```\n\n## Fetching Data on the Client with Route Handlers\n\nIf you need to fetch data in a client component, you can call a [Route Handler](/docs/app/building-your-application/routing/route-handlers) from the client. Route Handlers execute on the server and return the data to the client. This is useful when you don't want to expose sensitive information to the client, such as API tokens.\n\nSee the [Route Handler](/docs/app/building-your-application/routing/route-handlers) documentation for examples.\n\n> **Server Components and Route Handlers**\n>\n> Since Server Components render on the server, you don't need to call a Route Handler from a Server Component to fetch data. Instead, you can fetch the data directly inside the Server Component.\n\n## Fetching Data on the Client with third-party libraries\n\nYou can also fetch data on the client using a third-party library such as [SWR](https://swr.vercel.app/) or [TanStack Query](https://tanstack.com/query/latest). These libraries provide their own APIs for memoizing requests, caching, revalidating, and mutating data.\n\n> **Future APIs**:\n>\n> `use` is a React function that **accepts and handles a promise** returned by a function. Wrapping `fetch` in `use` is currently **not** recommended in Client Components and may trigger multiple re-renders. Learn more about `use` in the [React docs](https://react.dev/reference/react/use).\n", "01-building-your-application/02-data-fetching/index.mdx": "---\ntitle: Data Fetching\ndescription: Learn how to fetch, cache, revalidate, and mutate data with Next.js.\n---\n", "01-building-your-application/02-data-fetching/02-server-actions-and-mutations.mdx": "---\ntitle: Server Actions and Mutations\nnav_title: Server Actions and Mutations\ndescription: Learn how to handle form submissions and data mutations with Next.js.\nrelated:\n  description: Learn how to configure Server Actions in Next.js\n  links:\n    - app/api-reference/next-config-js/serverActions\n---\n\nServer Actions are **asynchronous functions** that are executed on the server. They can be used in Server and Client Components to handle form submissions and data mutations in Next.js applications.\n\n> **\ud83c\udfa5 Watch:** Learn more about forms and mutations with Server Actions \u2192 [YouTube (10 minutes)](https://youtu.be/dDpZfOQBMaU?si=cJZHlUu_jFhCzHUg).\n\n## Convention\n\nA Server Action can be defined with the React [`\"use server\"`](https://react.dev/reference/react/use-server) directive. You can place the directive at the top of an `async` function to mark the function as a Server Action, or at the top of a separate file to mark all exports of that file as Server Actions.\n\n### Server Components\n\nServer Components can use the inline function level or module level `\"use server\"` directive. To inline a Server Action, add `\"use server\"` to the top of the function body:\n\n```tsx filename=\"app/page.tsx\" switcher\n// Server Component\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n\n    // ...\n  }\n\n  return (\n    // ...\n  )\n}\n```\n\n```jsx filename=\"app/page.jsx\" switcher\n// Server Component\nexport default function Page() {\n  // Server Action\n  async function create() {\n    'use server'\n\n    // ...\n  }\n\n  return (\n    // ...\n  )\n}\n```\n\n### Client Components\n\nClient Components can only import actions that use the module-level `\"use server\"` directive.\n\nTo call a Server Action in a Client Component, create a new file and add the `\"use server\"` directive at the top of it. All functions within the file will be marked as Server Actions that can be reused in both Client and Server Components:\n\n```tsx filename=\"app/actions.ts\" switcher\n'use server'\n\nexport async function create() {\n  // ...\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nexport async function create() {\n  // ...\n}\n```\n\n```tsx filename=\"app/ui/button.tsx\" switcher\nimport { create } from '@/app/actions'\n\nexport function Button() {\n  return (\n    // ...\n  )\n}\n```\n\n```jsx filename=\"app/ui/button.js\" switcher\nimport { create } from '@/app/actions'\n\nexport function Button() {\n  return (\n    // ...\n  )\n}\n```\n\nYou can also pass a Server Action to a Client Component as a prop:\n\n```jsx\n<ClientComponent updateItem={updateItem} />\n```\n\n```jsx filename=\"app/client-component.jsx\"\n'use client'\n\nexport default function ClientComponent({ updateItem }) {\n  return <form action={updateItem}>{/* ... */}</form>\n}\n```\n\n## Behavior\n\n- Server actions can be invoked using the `action` attribute in a [`<form>` element](#forms):\n  - Server Components support progressive enhancement by default, meaning the form will be submitted even if JavaScript hasn't loaded yet or is disabled.\n  - In Client Components, forms invoking Server Actions will queue submissions if JavaScript isn't loaded yet, prioritizing client hydration.\n  - After hydration, the browser does not refresh on form submission.\n- Server Actions are not limited to `<form>` and can be invoked from event handlers, `useEffect`, third-party libraries, and other form elements like `<button>`.\n- Server Actions integrate with the Next.js [caching and revalidation](/docs/app/building-your-application/caching) architecture. When an action is invoked, Next.js can return both the updated UI and new data in a single server roundtrip.\n- Behind the scenes, actions use the `POST` method, and only this HTTP method can invoke them.\n- The arguments and return value of Server Actions must be serializable by React. See the React docs for a list of [serializable arguments and values](https://react.dev/reference/react/use-server#serializable-parameters-and-return-values).\n- Server Actions are functions. This means they can be reused anywhere in your application.\n- Server Actions inherit the [runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes) from the page or layout they are used on.\n- Server Actions inherit the [Route Segment Config](/docs/app/api-reference/file-conventions/route-segment-config) from the page or layout they are used on, including fields like `maxDuration`.\n\n## Examples\n\n### Forms\n\nReact extends the HTML [`<form>`](https://developer.mozilla.org/docs/Web/HTML/Element/form) element to allow Server Actions to be invoked with the `action` prop.\n\nWhen invoked in a form, the action automatically receives the [`FormData`](https://developer.mozilla.org/docs/Web/API/FormData/FormData) object. You don't need to use React `useState` to manage fields, instead, you can extract the data using the native [`FormData` methods](https://developer.mozilla.org/en-US/docs/Web/API/FormData#instance_methods):\n\n```tsx filename=\"app/invoices/page.tsx\" switcher\nexport default function Page() {\n  async function createInvoice(formData: FormData) {\n    'use server'\n\n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n\n    // mutate data\n    // revalidate cache\n  }\n\n  return <form action={createInvoice}>...</form>\n}\n```\n\n```jsx filename=\"app/invoices/page.jsx\" switcher\nexport default function Page() {\n  async function createInvoice(formData) {\n    'use server'\n\n    const rawFormData = {\n      customerId: formData.get('customerId'),\n      amount: formData.get('amount'),\n      status: formData.get('status'),\n    }\n\n    // mutate data\n    // revalidate cache\n  }\n\n  return <form action={createInvoice}>...</form>\n}\n```\n\n> **Good to know:**\n>\n> - Example: [Form with Loading & Error States](https://github.com/vercel/next.js/tree/canary/examples/next-forms)\n> - When working with forms that have many fields, you may want to consider using the [`entries()`](https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries) method with JavaScript's [`Object.fromEntries()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries). For example: `const rawFormData = Object.fromEntries(formData)`. One thing to note is that the `formData` will include additional `$ACTION_` properties.\n> - See [React `<form>` documentation](https://react.dev/reference/react-dom/components/form#handle-form-submission-with-a-server-action) to learn more.\n\n#### Passing Additional Arguments\n\nYou can pass additional arguments to a Server Action using the JavaScript `bind` method.\n\n```tsx filename=\"app/client-component.tsx\" highlight={6} switcher\n'use client'\n\nimport { updateUser } from './actions'\n\nexport function UserProfile({ userId }: { userId: string }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n\n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\n```jsx filename=\"app/client-component.js\" highlight={6} switcher\n'use client'\n\nimport { updateUser } from './actions'\n\nexport function UserProfile({ userId }) {\n  const updateUserWithId = updateUser.bind(null, userId)\n\n  return (\n    <form action={updateUserWithId}>\n      <input type=\"text\" name=\"name\" />\n      <button type=\"submit\">Update User Name</button>\n    </form>\n  )\n}\n```\n\nThe Server Action will receive the `userId` argument, in addition to the form data:\n\n```js filename=\"app/actions.js\"\n'use server'\n\nexport async function updateUser(userId, formData) {\n  // ...\n}\n```\n\n> **Good to know**:\n>\n> - An alternative is to pass arguments as hidden input fields in the form (e.g. `<input type=\"hidden\" name=\"userId\" value={userId} />`). However, the value will be part of the rendered HTML and will not be encoded.\n> - `.bind` works in both Server and Client Components. It also supports progressive enhancement.\n\n#### Pending states\n\nYou can use the React [`useFormStatus`](https://react.dev/reference/react-dom/hooks/useFormStatus) hook to show a pending state while the form is being submitted.\n\n- `useFormStatus` returns the status for a specific `<form>`, so it **must be defined as a child of the `<form>` element**.\n- `useFormStatus` is a React hook and therefore must be used in a Client Component.\n\n```tsx filename=\"app/submit-button.tsx\" switcher\n'use client'\n\nimport { useFormStatus } from 'react-dom'\n\nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button type=\"submit\" disabled={pending}>\n      Add\n    </button>\n  )\n}\n```\n\n```jsx filename=\"app/submit-button.jsx\" switcher\n'use client'\n\nimport { useFormStatus } from 'react-dom'\n\nexport function SubmitButton() {\n  const { pending } = useFormStatus()\n\n  return (\n    <button type=\"submit\" disabled={pending}>\n      Add\n    </button>\n  )\n}\n```\n\n`<SubmitButton />` can then be nested in any form:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { SubmitButton } from '@/app/submit-button'\nimport { createItem } from '@/app/actions'\n\n// Server Component\nexport default async function Home() {\n  return (\n    <form action={createItem}>\n      <input type=\"text\" name=\"field-name\" />\n      <SubmitButton />\n    </form>\n  )\n}\n```\n\n```jsx filename=\"app/page.jsx\" switcher\nimport { SubmitButton } from '@/app/submit-button'\nimport { createItem } from '@/app/actions'\n\n// Server Component\nexport default async function Home() {\n  return (\n    <form action={createItem}>\n      <input type=\"text\" name=\"field-name\" />\n      <SubmitButton />\n    </form>\n  )\n}\n```\n\n#### Server-side validation and error handling\n\nWe recommend using HTML validation like `required` and `type=\"email\"` for basic client-side form validation.\n\nFor more advanced server-side validation, you can use a library like [zod](https://zod.dev/) to validate the form fields before mutating the data:\n\n```tsx filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n\nexport default async function createUser(formData: FormData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Mutate data\n}\n```\n\n```jsx filename=\"app/actions.js\" switcher\n'use server'\n\nimport { z } from 'zod'\n\nconst schema = z.object({\n  email: z.string({\n    invalid_type_error: 'Invalid Email',\n  }),\n})\n\nexport default async function createsUser(formData) {\n  const validatedFields = schema.safeParse({\n    email: formData.get('email'),\n  })\n\n  // Return early if the form data is invalid\n  if (!validatedFields.success) {\n    return {\n      errors: validatedFields.error.flatten().fieldErrors,\n    }\n  }\n\n  // Mutate data\n}\n```\n\nOnce the fields have been validated on the server, you can return a serializable object in your action and use the React [`useFormState`](https://react.dev/reference/react-dom/hooks/useFormState) hook to show a message to the user.\n\n- By passing the action to `useFormState`, the action's function signature changes to receive a new `prevState` or `initialState` parameter as its first argument.\n- `useFormState` is a React hook and therefore must be used in a Client Component.\n\n```tsx filename=\"app/actions.ts\" switcher\n'use server'\n\nexport async function createUser(prevState: any, formData: FormData) {\n  // ...\n  return {\n    message: 'Please enter a valid email',\n  }\n}\n```\n\n```jsx filename=\"app/actions.js\" switcher\n'use server'\n\nexport async function createUser(prevState, formData) {\n  // ...\n  return {\n    message: 'Please enter a valid email',\n  }\n}\n```\n\nThen, you can pass your action to the `useFormState` hook and use the returned `state` to display an error message.\n\n```tsx filename=\"app/ui/signup.tsx\" switcher\n'use client'\n\nimport { useFormState } from 'react-dom'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction] = useFormState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\" className=\"sr-only\">\n        {state?.message}\n      </p>\n      <button>Sign up</button>\n    </form>\n  )\n}\n```\n\n```jsx filename=\"app/ui/signup.js\" switcher\n'use client'\n\nimport { useFormState } from 'react-dom'\nimport { createUser } from '@/app/actions'\n\nconst initialState = {\n  message: '',\n}\n\nexport function Signup() {\n  const [state, formAction] = useFormState(createUser, initialState)\n\n  return (\n    <form action={formAction}>\n      <label htmlFor=\"email\">Email</label>\n      <input type=\"text\" id=\"email\" name=\"email\" required />\n      {/* ... */}\n      <p aria-live=\"polite\" className=\"sr-only\">\n        {state?.message}\n      </p>\n      <button>Sign up</button>\n    </form>\n  )\n}\n```\n\n> **Good to know:**\n>\n> - Before mutating data, you should always ensure a user is also authorized to perform the action. See [Authentication and Authorization](#authentication-and-authorization).\n\n#### Optimistic updates\n\nYou can use the React [`useOptimistic`](https://react.dev/reference/react/useOptimistic) hook to optimistically update the UI before the Server Action finishes, rather than waiting for the response:\n\n```tsx filename=\"app/page.tsx\" switcher\n'use client'\n\nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n\ntype Message = {\n  message: string\n}\n\nexport function Thread({ messages }: { messages: Message[] }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic<\n    Message[],\n    string\n  >(messages, (state, newMessage) => [...state, { message: newMessage }])\n\n  return (\n    <div>\n      {optimisticMessages.map((m, k) => (\n        <div key={k}>{m.message}</div>\n      ))}\n      <form\n        action={async (formData: FormData) => {\n          const message = formData.get('message')\n          addOptimisticMessage(message)\n          await send(message)\n        }}\n      >\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/page.jsx\" switcher\n'use client'\n\nimport { useOptimistic } from 'react'\nimport { send } from './actions'\n\nexport function Thread({ messages }) {\n  const [optimisticMessages, addOptimisticMessage] = useOptimistic(\n    messages,\n    (state, newMessage) => [...state, { message: newMessage }]\n  )\n\n  return (\n    <div>\n      {optimisticMessages.map((m) => (\n        <div>{m.message}</div>\n      ))}\n      <form\n        action={async (formData) => {\n          const message = formData.get('message')\n          addOptimisticMessage(message)\n          await send(message)\n        }}\n      >\n        <input type=\"text\" name=\"message\" />\n        <button type=\"submit\">Send</button>\n      </form>\n    </div>\n  )\n}\n```\n\n#### Nested elements\n\nYou can invoke a Server Action in elements nested inside `<form>` such as `<button>`, `<input type=\"submit\">`, and `<input type=\"image\">`. These elements accept the `formAction` prop or [event handlers](#event-handlers).\n\nThis is useful in cases where you want to call multiple server actions within a form. For example, you can create a specific `<button>` element for saving a post draft in addition to publishing it. See the [React `<form>` docs](https://react.dev/reference/react-dom/components/form#handling-multiple-submission-types) for more information.\n\n#### Programmatic form submission\n\nYou can trigger a form submission using the [`requestSubmit()`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit) method. For example, when the user presses `\u2318` + `Enter`, you can listen for the `onKeyDown` event:\n\n```tsx filename=\"app/entry.tsx\" switcher\n'use client'\n\nexport function Entry() {\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n\n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/entry.jsx\" switcher\n'use client'\n\nexport function Entry() {\n  const handleKeyDown = (e) => {\n    if (\n      (e.ctrlKey || e.metaKey) &&\n      (e.key === 'Enter' || e.key === 'NumpadEnter')\n    ) {\n      e.preventDefault()\n      e.currentTarget.form?.requestSubmit()\n    }\n  }\n\n  return (\n    <div>\n      <textarea name=\"entry\" rows={20} required onKeyDown={handleKeyDown} />\n    </div>\n  )\n}\n```\n\nThis will trigger the submission of the nearest `<form>` ancestor, which will invoke the Server Action.\n\n### Non-form Elements\n\nWhile it's common to use Server Actions within `<form>` elements, they can also be invoked from other parts of your code such as event handlers and `useEffect`.\n\n#### Event Handlers\n\nYou can invoke a Server Action from event handlers such as `onClick`. For example, to increment a like count:\n\n```tsx filename=\"app/like-button.tsx\" switcher\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }: { initialLikes: number }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/like-button.js\" switcher\n'use client'\n\nimport { incrementLike } from './actions'\nimport { useState } from 'react'\n\nexport default function LikeButton({ initialLikes }) {\n  const [likes, setLikes] = useState(initialLikes)\n\n  return (\n    <>\n      <p>Total Likes: {likes}</p>\n      <button\n        onClick={async () => {\n          const updatedLikes = await incrementLike()\n          setLikes(updatedLikes)\n        }}\n      >\n        Like\n      </button>\n    </>\n  )\n}\n```\n\nTo improve the user experience, we recommend using other React APIs like [`useOptimistic`](https://react.dev/reference/react/useOptimistic) and [`useTransition`](https://react.dev/reference/react/useTransition) to update the UI before the Server Action finishes executing on the server, or to show a pending state.\n\nYou can also add event handlers to form elements, for example, to save a form field `onChange`:\n\n```tsx filename=\"app/ui/edit-post.tsx\"\n'use client'\n\nimport { publishPost, saveDraft } from './actions'\n\nexport default function EditPost() {\n  return (\n    <form action={publishPost}>\n      <textarea\n        name=\"content\"\n        onChange={async (e) => {\n          await saveDraft(e.target.value)\n        }}\n      />\n      <button type=\"submit\">Publish</button>\n    </form>\n  )\n}\n```\n\nFor cases like this, where multiple events might be fired in quick succession, we recommend **debouncing** to prevent unnecessary Server Action invocations.\n\n#### `useEffect`\n\nYou can use the React [`useEffect`](https://react.dev/reference/react/useEffect) hook to invoke a Server Action when the component mounts or a dependency changes. This is useful for mutations that depend on global events or need to be triggered automatically. For example, `onKeyDown` for app shortcuts, an intersection observer hook for infinite scrolling, or when the component mounts to update a view count:\n\n```tsx filename=\"app/view-count.tsx\" switcher\n'use client'\n\nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n\nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n\n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n\n    updateViews()\n  }, [])\n\n  return <p>Total Views: {views}</p>\n}\n```\n\n```jsx filename=\"app/view-count.js\" switcher\n'use client'\n\nimport { incrementViews } from './actions'\nimport { useState, useEffect } from 'react'\n\nexport default function ViewCount({ initialViews }: { initialViews: number }) {\n  const [views, setViews] = useState(initialViews)\n\n  useEffect(() => {\n    const updateViews = async () => {\n      const updatedViews = await incrementViews()\n      setViews(updatedViews)\n    }\n\n    updateViews()\n  }, [])\n\n  return <p>Total Views: {views}</p>\n}\n```\n\nRemember to consider the [behavior and caveats](https://react.dev/reference/react/useEffect#caveats) of `useEffect`.\n\n### Error Handling\n\nWhen an error is thrown, it'll be caught by the nearest [`error.js`](/docs/app/building-your-application/routing/error-handling) or `<Suspense>` boundary on the client. We recommend using `try/catch` to return errors to be handled by your UI.\n\nFor example, your Server Action might handle errors from creating a new item by returning a message:\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nexport async function createTodo(prevState: any, formData: FormData) {\n  try {\n    // Mutate data\n  } catch (e) {\n    throw new Error('Failed to create task')\n  }\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nexport async function createTodo(prevState, formData) {\n  try {\n    //  Mutate data\n  } catch (e) {\n    throw new Error('Failed to create task')\n  }\n}\n```\n\n> **Good to know:**\n>\n> - Aside from throwing the error, you can also return an object to be handled by `useFormState`. See [Server-side validation and error handling](#server-side-validation-and-error-handling).\n\n### Revalidating data\n\nYou can revalidate the [Next.js Cache](/docs/app/building-your-application/caching) inside your Server Actions with the [`revalidatePath`](/docs/app/api-reference/functions/revalidatePath) API:\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidatePath('/posts')\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidatePath('/posts')\n}\n```\n\nOr invalidate a specific data fetch with a cache tag using [`revalidateTag`](/docs/app/api-reference/functions/revalidateTag):\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts')\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost() {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts')\n}\n```\n\n### Redirecting\n\nIf you would like to redirect the user to a different route after the completion of a Server Action, you can use [`redirect`](/docs/app/api-reference/functions/redirect) API. `redirect` needs to be called outside of the `try/catch` block:\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // ...\n  } catch (error) {\n    // ...\n  }\n\n  revalidateTag('posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n### Cookies\n\nYou can `get`, `set`, and `delete` cookies inside a Server Action using the [`cookies`](/docs/app/api-reference/functions/cookies) API:\n\n```ts filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function exampleAction() {\n  // Get cookie\n  const value = cookies().get('name')?.value\n\n  // Set cookie\n  cookies().set('name', 'Delba')\n\n  // Delete cookie\n  cookies().delete('name')\n}\n```\n\n```js filename=\"app/actions.js\" switcher\n'use server'\n\nimport { cookies } from 'next/headers'\n\nexport async function exampleAction() {\n  // Get cookie\n  const value = cookies().get('name')?.value\n\n  // Set cookie\n  cookies().set('name', 'Delba')\n\n  // Delete cookie\n  cookies().delete('name')\n}\n```\n\nSee [additional examples](/docs/app/api-reference/functions/cookies#deleting-cookies) for deleting cookies from Server Actions.\n\n## Security\n\n### Authentication and authorization\n\nYou should treat Server Actions as you would public-facing API endpoints, and ensure that the user is authorized to perform the action. For example:\n\n```tsx filename=\"app/actions.ts\"\n'use server'\n\nimport { auth } from './lib'\n\nexport function addItem() {\n  const { user } = auth()\n  if (!user) {\n    throw new Error('You must be signed in to perform this action')\n  }\n\n  // ...\n}\n```\n\n### Closures and encryption\n\nDefining a Server Action inside a component creates a [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures) where the action has access to the outer function's scope. For example, the `publish` action has access to the `publishVersion` variable:\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default async function Page() {\n  const publishVersion = await getLatestVersion();\n\n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n\n  return (\n    <form>\n      <button formAction={publish}>Publish</button>\n    </form>\n  );\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport default async function Page() {\n  const publishVersion = await getLatestVersion();\n\n  async function publish() {\n    \"use server\";\n    if (publishVersion !== await getLatestVersion()) {\n      throw new Error('The version has changed since pressing publish');\n    }\n    ...\n  }\n\n  return (\n    <form>\n      <button formAction={publish}>Publish</button>\n    </form>\n  );\n}\n```\n\nClosures are useful when you need to capture a _snapshot_ of data (e.g. `publishVersion`) at the time of rendering so that it can be used later when the action is invoked.\n\nHowever, for this to happen, the captured variables are sent to the client and back to the server when the action is invoked. To prevent sensitive data from being exposed to the client, Next.js automatically encrypts the closed-over variables. A new private key is generated for each action every time a Next.js application is built. This means actions can only be invoked for a specific build.\n\n> **Good to know:** We don't recommend relying on encryption alone to prevent sensitive values from being exposed on the client. Instead, you should use the [React taint APIs](/docs/app/building-your-application/data-fetching/patterns#preventing-sensitive-data-from-being-exposed-to-the-client) to proactively prevent specific data from being sent to the client.\n\n### Overwriting encryption keys (advanced)\n\nWhen self-hosting your Next.js application across multiple servers, each server instance may end up with a different encryption key, leading to potential inconsistencies.\n\nTo mitigate this, you can overwrite the encryption key using the `process.env.NEXT_SERVER_ACTIONS_ENCRYPTION_KEY` environment variable. Specifying this variable ensures that your encryption keys are persistent across builds, and all server instances use the same key.\n\nThis is an advanced use case where consistent encryption behavior across multiple deployments is critical for your application. You should consider standard security practices such key rotation and signing.\n\n> **Good to know:** Next.js applications deployed to Vercel automatically handle this.\n\n### Allowed origins (advanced)\n\nSince Server Actions can be invoked in a `<form>` element, this opens them up to [CSRF attacks](https://developer.mozilla.org/en-US/docs/Glossary/CSRF).\n\nBehind the scenes, Server Actions use the `POST` method, and only this HTTP method is allowed to invoke them. This prevents most CSRF vulnerabilities in modern browsers, particularly with [SameSite cookies](https://web.dev/articles/samesite-cookies-explained) being the default.\n\nAs an additional protection, Server Actions in Next.js also compare the [Origin header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin) to the [Host header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Host) (or `X-Forwarded-Host`). If these don't match, the request will be aborted. In other words, Server Actions can only be invoked on the same host as the page that hosts it.\n\nFor large applications that use reverse proxies or multi-layered backend architectures (where the server API differs from the production domain), it's recommended to use the configuration option [`serverActions.allowedOrigins`](/docs/app/api-reference/next-config-js/serverActions) option to specify a list of safe origins. The option accepts an array of strings.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nmodule.exports = {\n  experimental: {\n    serverActions: {\n      allowedOrigins: ['my-proxy.com', '*.my-proxy.com'],\n    },\n  },\n}\n```\n\nLearn more about [Security and Server Actions](https://nextjs.org/blog/security-nextjs-server-components-actions).\n\n## Additional resources\n\nFor more information on Server Actions, check out the following React docs:\n\n- [`\"use server\"`](https://react.dev/reference/react/use-server)\n- [`<form>`](https://react.dev/reference/react-dom/components/form)\n- [`useFormStatus`](https://react.dev/reference/react-dom/hooks/useFormStatus)\n- [`useFormState`](https://react.dev/reference/react-dom/hooks/useFormState)\n- [`useOptimistic`](https://react.dev/reference/react/useOptimistic)\n", "01-building-your-application/07-configuring/11-draft-mode.mdx": "---\ntitle: Draft Mode\ndescription: Next.js has draft mode to toggle between static and dynamic pages. You can learn how it works with App Router here.\n---\n\nStatic rendering is useful when your pages fetch data from a headless CMS. However, it\u2019s not ideal when you\u2019re writing a draft on your headless CMS and want to view the draft immediately on your page. You\u2019d want Next.js to render these pages at **request time** instead of build time and fetch the draft content instead of the published content. You\u2019d want Next.js to switch to [dynamic rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering) only for this specific case.\n\nNext.js has a feature called **Draft Mode** which solves this problem. Here are instructions on how to use it.\n\n## Step 1: Create and access the Route Handler\n\nFirst, create a [Route Handler](/docs/app/building-your-application/routing/route-handlers). It can have any name - e.g. `app/api/draft/route.ts`\n\nThen, import `draftMode` from `next/headers` and call the `enable()` method.\n\n```ts filename=\"app/api/draft/route.ts\" switcher\n// route handler enabling draft mode\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  draftMode().enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\n```js filename=\"app/api/draft/route.js\" switcher\n// route handler enabling draft mode\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  draftMode().enable()\n  return new Response('Draft mode is enabled')\n}\n```\n\nThis will set a **cookie** to enable draft mode. Subsequent requests containing this cookie will trigger **Draft Mode** changing the behavior for statically generated pages (more on this later).\n\nYou can test this manually by visiting `/api/draft` and looking at your browser\u2019s developer tools. Notice the `Set-Cookie` response header with a cookie named `__prerender_bypass`.\n\n### Securely accessing it from your Headless CMS\n\nIn practice, you\u2019d want to call this Route Handler _securely_ from your headless CMS. The specific steps will vary depending on which headless CMS you\u2019re using, but here are some common steps you could take.\n\nThese steps assume that the headless CMS you\u2019re using supports setting **custom draft URLs**. If it doesn\u2019t, you can still use this method to secure your draft URLs, but you\u2019ll need to construct and access the draft URL manually.\n\n**First**, you should create a **secret token string** using a token generator of your choice. This secret will only be known by your Next.js app and your headless CMS. This secret prevents people who don\u2019t have access to your CMS from accessing draft URLs.\n\n**Second**, if your headless CMS supports setting custom draft URLs, specify the following as the draft URL. This assumes that your Route Handler is located at `app/api/draft/route.ts`\n\n```bash filename=\"Terminal\"\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```\n\n- `<your-site>` should be your deployment domain.\n- `<token>` should be replaced with the secret token you generated.\n- `<path>` should be the path for the page that you want to view. If you want to view `/posts/foo`, then you should use `&slug=/posts/foo`.\n\nYour headless CMS might allow you to include a variable in the draft URL so that `<path>` can be set dynamically based on the CMS\u2019s data like so: `&slug=/posts/{entry.fields.slug}`\n\n**Finally**, in the Route Handler:\n\n- Check that the secret matches and that the `slug` parameter exists (if not, the request should fail).\n- Call `draftMode.enable()` to set the cookie.\n- Then redirect the browser to the path specified by `slug`.\n\n```ts filename=\"app/api/draft/route.ts\" switcher\n// route handler with secret and slug\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n\n  // Check the secret and next parameters\n  // This secret should only be known to this route handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  draftMode().enable()\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\n```js filename=\"app/api/draft/route.js\" switcher\n// route handler with secret and slug\nimport { draftMode } from 'next/headers'\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  // Parse query string parameters\n  const { searchParams } = new URL(request.url)\n  const secret = searchParams.get('secret')\n  const slug = searchParams.get('slug')\n\n  // Check the secret and next parameters\n  // This secret should only be known to this route handler and the CMS\n  if (secret !== 'MY_SECRET_TOKEN' || !slug) {\n    return new Response('Invalid token', { status: 401 })\n  }\n\n  // Fetch the headless CMS to check if the provided `slug` exists\n  // getPostBySlug would implement the required fetching logic to the headless CMS\n  const post = await getPostBySlug(slug)\n\n  // If the slug doesn't exist prevent draft mode from being enabled\n  if (!post) {\n    return new Response('Invalid slug', { status: 401 })\n  }\n\n  // Enable Draft Mode by setting the cookie\n  draftMode().enable()\n\n  // Redirect to the path from the fetched post\n  // We don't redirect to searchParams.slug as that might lead to open redirect vulnerabilities\n  redirect(post.slug)\n}\n```\n\nIf it succeeds, then the browser will be redirected to the path you want to view with the draft mode cookie.\n\n## Step 2: Update page\n\nThe next step is to update your page to check the value of `draftMode().isEnabled`.\n\nIf you request a page which has the cookie set, then data will be fetched at **request time** (instead of at build time).\n\nFurthermore, the value of `isEnabled` will be `true`.\n\n```tsx filename=\"app/page.tsx\" switcher\n// page that fetches data\nimport { draftMode } from 'next/headers'\n\nasync function getData() {\n  const { isEnabled } = draftMode()\n\n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n\n  const res = await fetch(url)\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const { title, desc } = await getData()\n\n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n// page that fetches data\nimport { draftMode } from 'next/headers'\n\nasync function getData() {\n  const { isEnabled } = draftMode()\n\n  const url = isEnabled\n    ? 'https://draft.example.com'\n    : 'https://production.example.com'\n\n  const res = await fetch(url)\n\n  return res.json()\n}\n\nexport default async function Page() {\n  const { title, desc } = await getData()\n\n  return (\n    <main>\n      <h1>{title}</h1>\n      <p>{desc}</p>\n    </main>\n  )\n}\n```\n\nThat's it! If you access the draft Route Handler (with `secret` and `slug`) from your headless CMS or manually, you should now be able to see the draft content. And if you update your draft without publishing, you should be able to view the draft.\n\nSet this as the draft URL on your headless CMS or access manually, and you should be able to see the draft.\n\n```bash filename=\"Terminal\"\nhttps://<your-site>/api/draft?secret=<token>&slug=<path>\n```\n\n## More Details\n\n### Clear the Draft Mode cookie\n\nBy default, the Draft Mode session ends when the browser is closed.\n\nTo clear the Draft Mode cookie manually, create a Route Handler that calls `draftMode().disable()`:\n\n```ts filename=\"app/api/disable-draft/route.ts\" switcher\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request: Request) {\n  draftMode().disable()\n  return new Response('Draft mode is disabled')\n}\n```\n\n```js filename=\"app/api/disable-draft/route.js\" switcher\nimport { draftMode } from 'next/headers'\n\nexport async function GET(request) {\n  draftMode().disable()\n  return new Response('Draft mode is disabled')\n}\n```\n\nThen, send a request to `/api/disable-draft` to invoke the Route Handler. If calling this route using [`next/link`](/docs/app/api-reference/components/link), you must pass `prefetch={false}` to prevent accidentally deleting the cookie on prefetch.\n\n### Unique per `next build`\n\nA new bypass cookie value will be generated each time you run `next build`.\n\nThis ensures that the bypass cookie can\u2019t be guessed.\n\n> **Good to know**: To test Draft Mode locally over HTTP, your browser will need to allow third-party cookies and local storage access.\n", "01-building-your-application/07-configuring/06-src-directory.mdx": "---\ntitle: src Directory\ndescription: Save pages under the `src` directory as an alternative to the root `pages` directory.\nrelated:\n  links:\n    - app/building-your-application/routing/colocation\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nAs an alternative to having the special Next.js `app` or `pages` directories in the root of your project, Next.js also supports the common pattern of placing application code under the `src` directory.\n\nThis separates application code from project configuration files which mostly live in the root of a project, which is preferred by some individuals and teams.\n\nTo use the `src` directory, move the `app` Router folder or `pages` Router folder to `src/app` or `src/pages` respectively.\n\n<Image\n  alt=\"An example folder structure with the `src` directory\"\n  srcLight=\"/docs/light/project-organization-src-directory.png\"\n  srcDark=\"/docs/dark/project-organization-src-directory.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\n> **Good to know**\n>\n> - The `/public` directory should remain in the root of your project.\n> - Config files like `package.json`, `next.config.js` and `tsconfig.json` should remain in the root of your project.\n> - `.env.*` files should remain in the root of your project.\n> - `src/app` or `src/pages` will be ignored if `app` or `pages` are present in the root directory.\n> - If you're using `src`, you'll probably also move other application folders such as `/components` or `/lib`.\n> - If you're using Middleware, ensure it is placed inside the `src` directory.\n> - If you're using Tailwind CSS, you'll need to add the `/src` prefix to the `tailwind.config.js` file in the [content section](https://tailwindcss.com/docs/content-configuration).\n> - If you are using TypeScript paths for imports such as `@/*`, you should update the `paths` object in `tsconfig.json` to include `src/`.\n", "01-building-your-application/07-configuring/04-absolute-imports-and-module-aliases.mdx": "---\ntitle: Absolute Imports and Module Path Aliases\ndescription: Configure module path aliases that allow you to remap certain import paths.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<details>\n  <summary>Examples</summary>\n\n- [Absolute Imports and Aliases](https://github.com/vercel/next.js/tree/canary/examples/with-absolute-imports)\n\n</details>\n\nNext.js has in-built support for the `\"paths\"` and `\"baseUrl\"` options of `tsconfig.json` and `jsconfig.json` files.\n\nThese options allow you to alias project directories to absolute paths, making it easier to import modules. For example:\n\n```tsx\n// before\nimport { Button } from '../../../components/button'\n\n// after\nimport { Button } from '@/components/button'\n```\n\n> **Good to know**: `create-next-app` will prompt to configure these options for you.\n\n## Absolute Imports\n\nThe `baseUrl` configuration option allows you to import directly from the root of the project.\n\nAn example of this configuration:\n\n```json filename=\"tsconfig.json or jsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\"\n  }\n}\n```\n\n```tsx filename=\"components/button.tsx\" switcher\nexport default function Button() {\n  return <button>Click me</button>\n}\n```\n\n```jsx filename=\"components/button.js\" switcher\nexport default function Button() {\n  return <button>Click me</button>\n}\n```\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Button from 'components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Button from 'components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n## Module Aliases\n\nIn addition to configuring the `baseUrl` path, you can use the `\"paths\"` option to \"alias\" module paths.\n\nFor example, the following configuration maps `@/components/*` to `components/*`:\n\n```json filename=\"tsconfig.json or jsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n```tsx filename=\"components/button.tsx\" switcher\nexport default function Button() {\n  return <button>Click me</button>\n}\n```\n\n```jsx filename=\"components/button.js\" switcher\nexport default function Button() {\n  return <button>Click me</button>\n}\n```\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Button from '@/components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Button from '@/components/button'\n\nexport default function HomePage() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <Button />\n    </>\n  )\n}\n```\n\nEach of the `\"paths\"` are relative to the `baseUrl` location. For example:\n\n```json\n// tsconfig.json or jsconfig.json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"src/\",\n    \"paths\": {\n      \"@/styles/*\": [\"styles/*\"],\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n```jsx\n// pages/index.js\nimport Button from '@/components/button'\nimport '@/styles/styles.css'\nimport Helper from 'utils/helper'\n\nexport default function HomePage() {\n  return (\n    <Helper>\n      <h1>Hello World</h1>\n      <Button />\n    </Helper>\n  )\n}\n```\n", "01-building-your-application/07-configuring/01-typescript.mdx": "---\ntitle: TypeScript\ndescription: Next.js provides a TypeScript-first development experience for building your React application.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js provides a TypeScript-first development experience for building your React application.\n\nIt comes with built-in TypeScript support for automatically installing the necessary packages and configuring the proper settings.\n\n<AppOnly>\n\nAs well as a [TypeScript Plugin](#typescript-plugin) for your editor.\n\n> **\ud83c\udfa5 Watch:** Learn about the built-in TypeScript plugin \u2192 [YouTube (3 minutes)](https://www.youtube.com/watch?v=pqMqn9fKEf8)\n\n</AppOnly>\n\n## New Projects\n\n`create-next-app` now ships with TypeScript by default.\n\n```bash filename=\"Terminal\"\nnpx create-next-app@latest\n```\n\n## Existing Projects\n\nAdd TypeScript to your project by renaming a file to `.ts` / `.tsx`. Run `next dev` and `next build` to automatically install the necessary dependencies and add a `tsconfig.json` file with the recommended config options.\n\nIf you already had a `jsconfig.json` file, copy the `paths` compiler option from the old `jsconfig.json` into the new `tsconfig.json` file, and delete the old `jsconfig.json` file.\n\n<AppOnly>\n\n## TypeScript Plugin\n\nNext.js includes a custom TypeScript plugin and type checker, which VSCode and other code editors can use for advanced type-checking and auto-completion.\n\nYou can enable the plugin in VS Code by:\n\n1. Opening the command palette (`Ctrl/\u2318` + `Shift` + `P`)\n2. Searching for \"TypeScript: Select TypeScript Version\"\n3. Selecting \"Use Workspace Version\"\n\n<Image\n  alt=\"TypeScript Command Palette\"\n  srcLight=\"/docs/light/typescript-command-palette.png\"\n  srcDark=\"/docs/dark/typescript-command-palette.png\"\n  width=\"1600\"\n  height=\"637\"\n/>\n\nNow, when editing files, the custom plugin will be enabled. When running `next build`, the custom type checker will be used.\n\n### Plugin Features\n\nThe TypeScript plugin can help with:\n\n- Warning if the invalid values for [segment config options](/docs/app/api-reference/file-conventions/route-segment-config) are passed.\n- Showing available options and in-context documentation.\n- Ensuring the `use client` directive is used correctly.\n- Ensuring client hooks (like `useState`) are only used in Client Components.\n\n> **Good to know**: More features will be added in the future.\n\n</AppOnly>\n\n## Minimum TypeScript Version\n\nIt is highly recommended to be on at least `v4.5.2` of TypeScript to get syntax features such as [type modifiers on import names](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#type-on-import-names) and [performance improvements](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5/#real-path-sync-native).\n\n<AppOnly>\n\n## Statically Typed Links\n\nNext.js can statically type links to prevent typos and other errors when using `next/link`, improving type safety when navigating between pages.\n\nTo opt-into this feature, `experimental.typedRoutes` need to be enabled and the project needs to be using TypeScript.\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  experimental: {\n    typedRoutes: true,\n  },\n}\n\nmodule.exports = nextConfig\n```\n\nNext.js will generate a link definition in `.next/types` that contains information about all existing routes in your application, which TypeScript can then use to provide feedback in your editor about invalid links.\n\nCurrently, experimental support includes any string literal, including dynamic segments. For non-literal strings, you currently need to manually cast the `href` with `as Route`:\n\n```tsx\nimport type { Route } from 'next';\nimport Link from 'next/link'\n\n// No TypeScript errors if href is a valid route\n<Link href=\"/about\" />\n<Link href=\"/blog/nextjs\" />\n<Link href={`/blog/${slug}`} />\n<Link href={('/blog' + slug) as Route} />\n\n// TypeScript errors if href is not a valid route\n<Link href=\"/aboot\" />\n```\n\nTo accept `href` in a custom component wrapping `next/link`, use a generic:\n\n```tsx\nimport type { Route } from 'next'\nimport Link from 'next/link'\n\nfunction Card<T extends string>({ href }: { href: Route<T> | URL }) {\n  return (\n    <Link href={href}>\n      <div>My Card</div>\n    </Link>\n  )\n}\n```\n\n> **How does it work?**\n>\n> When running `next dev` or `next build`, Next.js generates a hidden `.d.ts` file inside `.next` that contains information about all existing routes in your application (all valid routes as the `href` type of `Link`). This `.d.ts` file is included in `tsconfig.json` and the TypeScript compiler will check that `.d.ts` and provide feedback in your editor about invalid links.\n\n## End-to-End Type Safety\n\nThe Next.js App Router has **enhanced type safety**. This includes:\n\n1. **No serialization of data between fetching function and page**: You can `fetch` directly in components, layouts, and pages on the server. This data _does not_ need to be serialized (converted to a string) to be passed to the client side for consumption in React. Instead, since `app` uses Server Components by default, we can use values like `Date`, `Map`, `Set`, and more without any extra steps. Previously, you needed to manually type the boundary between server and client with Next.js-specific types.\n2. **Streamlined data flow between components**: With the removal of `_app` in favor of root layouts, it is now easier to visualize the data flow between components and pages. Previously, data flowing between individual `pages` and `_app` were difficult to type and could introduce confusing bugs. With [colocated data fetching](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating) in the App Router, this is no longer an issue.\n\n[Data Fetching in Next.js](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating) now provides as close to end-to-end type safety as possible without being prescriptive about your database or content provider selection.\n\nWe're able to type the response data as you would expect with normal TypeScript. For example:\n\n```tsx filename=\"app/page.tsx\"\nasync function getData() {\n  const res = await fetch('https://api.example.com/...')\n  // The return value is *not* serialized\n  // You can return Date, Map, Set, etc.\n  return res.json()\n}\n\nexport default async function Page() {\n  const name = await getData()\n\n  return '...'\n}\n```\n\nFor _complete_ end-to-end type safety, this also requires your database or content provider to support TypeScript. This could be through using an [ORM](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping) or type-safe query builder.\n\n## Async Server Component TypeScript Error\n\nTo use an `async` Server Component with TypeScript, ensure you are using TypeScript `5.1.3` or higher and `@types/react` `18.2.8` or higher.\n\nIf you are using an older version of TypeScript, you may see a `'Promise<Element>' is not a valid JSX element` type error. Updating to the latest version of TypeScript and `@types/react` should resolve this issue.\n\n## Passing Data Between Server & Client Components\n\nWhen passing data between a Server and Client Component through props, the data is still serialized (converted to a string) for use in the browser. However, it does not need a special type. It\u2019s typed the same as passing any other props between components.\n\nFurther, there is less code to be serialized, as un-rendered data does not cross between the server and client (it remains on the server). This is only now possible through support for Server Components.\n\n</AppOnly>\n\n<PagesOnly>\n\n## Static Generation and Server-side Rendering\n\nFor [`getStaticProps`](/docs/pages/api-reference/functions/get-static-props), [`getStaticPaths`](/docs/pages/api-reference/functions/get-static-paths), and [`getServerSideProps`](/docs/pages/api-reference/functions/get-server-side-props), you can use the `GetStaticProps`, `GetStaticPaths`, and `GetServerSideProps` types respectively:\n\n```tsx filename=\"pages/blog/[slug].tsx\"\nimport { GetStaticProps, GetStaticPaths, GetServerSideProps } from 'next'\n\nexport const getStaticProps = (async (context) => {\n  // ...\n}) satisfies GetStaticProps\n\nexport const getStaticPaths = (async () => {\n  // ...\n}) satisfies GetStaticPaths\n\nexport const getServerSideProps = (async (context) => {\n  // ...\n}) satisfies GetServerSideProps\n```\n\n> **Good to know:** `satisfies` was added to TypeScript in [4.9](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html). We recommend upgrading to the latest version of TypeScript.\n\n## API Routes\n\nThe following is an example of how to use the built-in types for API routes:\n\n```ts\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\nYou can also type the response data:\n\n```ts\nimport type { NextApiRequest, NextApiResponse } from 'next'\n\ntype Data = {\n  name: string\n}\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  res.status(200).json({ name: 'John Doe' })\n}\n```\n\n## Custom `App`\n\nIf you have a [custom `App`](/docs/pages/building-your-application/routing/custom-app), you can use the built-in type `AppProps` and change file name to `./pages/_app.tsx` like so:\n\n```ts\nimport type { AppProps } from 'next/app'\n\nexport default function MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n</PagesOnly>\n\n## Path aliases and baseUrl\n\nNext.js automatically supports the `tsconfig.json` `\"paths\"` and `\"baseUrl\"` options.\n\n<AppOnly>\n\nYou can learn more about this feature on the [Module Path aliases documentation](/docs/app/building-your-application/configuring/absolute-imports-and-module-aliases).\n\n</AppOnly>\n\n<PagesOnly>\n\nYou can learn more about this feature on the [Module Path aliases documentation](/docs/pages/building-your-application/configuring/absolute-imports-and-module-aliases).\n\n</PagesOnly>\n\n## Type checking next.config.js\n\nThe `next.config.js` file must be a JavaScript file as it does not get parsed by Babel or TypeScript, however you can add some type checking in your IDE using JSDoc as below:\n\n```js\n// @ts-check\n\n/**\n * @type {import('next').NextConfig}\n **/\nconst nextConfig = {\n  /* config options here */\n}\n\nmodule.exports = nextConfig\n```\n\n## Incremental type checking\n\nSince `v10.2.1` Next.js supports [incremental type checking](https://www.typescriptlang.org/tsconfig#incremental) when enabled in your `tsconfig.json`, this can help speed up type checking in larger applications.\n\n## Ignoring TypeScript Errors\n\nNext.js fails your **production build** (`next build`) when TypeScript errors are present in your project.\n\nIf you'd like Next.js to dangerously produce production code even when your application has errors, you can disable the built-in type checking step.\n\nIf disabled, be sure you are running type checks as part of your build or deploy process, otherwise this can be very dangerous.\n\nOpen `next.config.js` and enable the `ignoreBuildErrors` option in the `typescript` config:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  typescript: {\n    // !! WARN !!\n    // Dangerously allow production builds to successfully complete even if\n    // your project has type errors.\n    // !! WARN !!\n    ignoreBuildErrors: true,\n  },\n}\n```\n\n## Custom Type Declarations\n\nWhen you need to declare custom types, you might be tempted to modify `next-env.d.ts`. However, this file is automatically generated, so any changes you make will be overwritten. Instead, you should create a new file, let's call it `new-types.d.ts`, and reference it in your `tsconfig.json`:\n\n```json filename=\"tsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"skipLibCheck\": true\n    //...truncated...\n  },\n  \"include\": [\n    \"new-types.d.ts\",\n    \"next-env.d.ts\",\n    \".next/types/**/*.ts\",\n    \"**/*.ts\",\n    \"**/*.tsx\"\n  ],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n## Version Changes\n\n| Version   | Changes                                                                                                                              |\n| --------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n| `v13.2.0` | Statically typed links are available in beta.                                                                                        |\n| `v12.0.0` | [SWC](/docs/architecture/nextjs-compiler) is now used by default to compile TypeScript and TSX for faster builds.                    |\n| `v10.2.1` | [Incremental type checking](https://www.typescriptlang.org/tsconfig#incremental) support added when enabled in your `tsconfig.json`. |\n", "01-building-your-application/07-configuring/index.mdx": "---\ntitle: Configuring\ndescription: Learn how to configure your Next.js application.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js allows you to customize your project to meet specific requirements. This includes integrations with TypeScript, ESlint, and more, as well as internal configuration options such as Absolute Imports and Environment Variables.\n", "01-building-your-application/07-configuring/15-content-security-policy.mdx": "---\ntitle: Content Security Policy\ndescription: Learn how to set a Content Security Policy (CSP) for your Next.js application.\nrelated:\n  links:\n    - app/building-your-application/routing/middleware\n    - app/api-reference/functions/headers\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n[Content Security Policy (CSP)](https://developer.mozilla.org/docs/Web/HTTP/CSP) is important to guard your Next.js application against various security threats such as cross-site scripting (XSS), clickjacking, and other code injection attacks.\n\nBy using CSP, developers can specify which origins are permissible for content sources, scripts, stylesheets, images, fonts, objects, media (audio, video), iframes, and more.\n\n<details>\n  <summary>Examples</summary>\n\n- [Strict CSP](https://github.com/vercel/next.js/tree/canary/examples/with-strict-csp)\n\n</details>\n\n## Nonces\n\nA [nonce](https://developer.mozilla.org/docs/Web/HTML/Global_attributes/nonce) is a unique, random string of characters created for a one-time use. It is used in conjunction with CSP to selectively allow certain inline scripts or styles to execute, bypassing strict CSP directives.\n\n### Why use a nonce?\n\nEven though CSPs are designed to block malicious scripts, there are legitimate scenarios where inline scripts are necessary. In such cases, nonces offer a way to allow these scripts to execute if they have the correct nonce.\n\n### Adding a nonce with Middleware\n\n[Middleware](/docs/app/building-your-application/routing/middleware) enables you to add headers and generate nonces before the page renders.\n\nEvery time a page is viewed, a fresh nonce should be generated. This means that you **must use dynamic rendering to add nonces**.\n\nFor example:\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextRequest, NextResponse } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n\n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  return response\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  const nonce = Buffer.from(crypto.randomUUID()).toString('base64')\n  const cspHeader = `\n    default-src 'self';\n    script-src 'self' 'nonce-${nonce}' 'strict-dynamic';\n    style-src 'self' 'nonce-${nonce}';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n  // Replace newline characters and spaces\n  const contentSecurityPolicyHeaderValue = cspHeader\n    .replace(/\\s{2,}/g, ' ')\n    .trim()\n\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-nonce', nonce)\n  requestHeaders.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  const response = NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  })\n  response.headers.set(\n    'Content-Security-Policy',\n    contentSecurityPolicyHeaderValue\n  )\n\n  return response\n}\n```\n\nBy default, Middleware runs on all requests. You can filter Middleware to run on specific paths using a [`matcher`](/docs/app/building-your-application/routing/middleware#matcher).\n\nWe recommend ignoring matching prefetches (from `next/link`) and static assets that don't need the CSP header.\n\n```ts filename=\"middleware.ts\" switcher\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\n```\n\n```js filename=\"middleware.js\" switcher\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n  ],\n}\n```\n\n### Reading the nonce\n\nYou can now read the nonce from a [Server Component](/docs/app/building-your-application/rendering/server-components) using [`headers`](/docs/app/api-reference/functions/headers):\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const nonce = headers().get('x-nonce')\n\n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\n```\n\n```jsx filename=\"app/page.jsx\" switcher\nimport { headers } from 'next/headers'\nimport Script from 'next/script'\n\nexport default function Page() {\n  const nonce = headers().get('x-nonce')\n\n  return (\n    <Script\n      src=\"https://www.googletagmanager.com/gtag/js\"\n      strategy=\"afterInteractive\"\n      nonce={nonce}\n    />\n  )\n}\n```\n\n## Without Nonces\n\nFor applications that do not require nonces, you can set the CSP header directly in your [`next.config.js`](/docs/app/api-reference/next-config-js) file:\n\n```js filename=\"next.config.js\"\nconst cspHeader = `\n    default-src 'self';\n    script-src 'self' 'unsafe-eval' 'unsafe-inline';\n    style-src 'self' 'unsafe-inline';\n    img-src 'self' blob: data:;\n    font-src 'self';\n    object-src 'none';\n    base-uri 'self';\n    form-action 'self';\n    frame-ancestors 'none';\n    upgrade-insecure-requests;\n`\n\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'Content-Security-Policy',\n            value: cspHeader.replace(/\\n/g, ''),\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n## Version History\n\nWe recommend using `v13.4.20+` of Next.js to properly handle and apply nonces.\n", "01-building-your-application/07-configuring/02-eslint.mdx": "---\ntitle: ESLint\ndescription: Next.js provides an integrated ESLint experience by default. These conformance rules help you use Next.js in an optimal way.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js provides an integrated [ESLint](https://eslint.org/) experience out of the box. Add `next lint` as a script to `package.json`:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"lint\": \"next lint\"\n  }\n}\n```\n\nThen run `npm run lint` or `yarn lint`:\n\n```bash filename=\"Terminal\"\nyarn lint\n```\n\nIf you don't already have ESLint configured in your application, you will be guided through the installation and configuration process.\n\n```bash filename=\"Terminal\"\nyarn lint\n```\n\n> You'll see a prompt like this:\n>\n> ? How would you like to configure ESLint?\n>\n> \u276f Strict (recommended)  \n> Base  \n> Cancel\n\nOne of the following three options can be selected:\n\n- **Strict**: Includes Next.js' base ESLint configuration along with a stricter [Core Web Vitals rule-set](#core-web-vitals). This is the recommended configuration for developers setting up ESLint for the first time.\n\n  ```json filename=\".eslintrc.json\"\n  {\n    \"extends\": \"next/core-web-vitals\"\n  }\n  ```\n\n- **Base**: Includes Next.js' base ESLint configuration.\n\n  ```json filename=\".eslintrc.json\"\n  {\n    \"extends\": \"next\"\n  }\n  ```\n\n- **Cancel**: Does not include any ESLint configuration. Only select this option if you plan on setting up your own custom ESLint configuration.\n\nIf either of the two configuration options are selected, Next.js will automatically install `eslint` and `eslint-config-next` as dependencies in your application and create an `.eslintrc.json` file in the root of your project that includes your selected configuration.\n\nYou can now run `next lint` every time you want to run ESLint to catch errors. Once ESLint has been set up, it will also automatically run during every build (`next build`). Errors will fail the build, while warnings will not.\n\n<AppOnly>\n\n> If you do not want ESLint to run during `next build`, refer to the documentation for [Ignoring ESLint](/docs/app/api-reference/next-config-js/eslint).\n\n</AppOnly>\n\n<PagesOnly>\n\n> If you do not want ESLint to run during `next build`, refer to the documentation for [Ignoring ESLint](/docs/pages/api-reference/next-config-js/eslint).\n\n</PagesOnly>\n\nWe recommend using an appropriate [integration](https://eslint.org/docs/user-guide/integrations#editors) to view warnings and errors directly in your code editor during development.\n\n## ESLint Config\n\nThe default configuration (`eslint-config-next`) includes everything you need to have an optimal out-of-the-box linting experience in Next.js. If you do not have ESLint already configured in your application, we recommend using `next lint` to set up ESLint along with this configuration.\n\n> If you would like to use `eslint-config-next` along with other ESLint configurations, refer to the [Additional Configurations](#additional-configurations) section to learn how to do so without causing any conflicts.\n\nRecommended rule-sets from the following ESLint plugins are all used within `eslint-config-next`:\n\n- [`eslint-plugin-react`](https://www.npmjs.com/package/eslint-plugin-react)\n- [`eslint-plugin-react-hooks`](https://www.npmjs.com/package/eslint-plugin-react-hooks)\n- [`eslint-plugin-next`](https://www.npmjs.com/package/@next/eslint-plugin-next)\n\nThis will take precedence over the configuration from `next.config.js`.\n\n## ESLint Plugin\n\nNext.js provides an ESLint plugin, [`eslint-plugin-next`](https://www.npmjs.com/package/@next/eslint-plugin-next), already bundled within the base configuration that makes it possible to catch common issues and problems in a Next.js application. The full set of rules is as follows:\n\n<Check size={18} /> Enabled in the recommended configuration\n\n|                     | Rule                                                                                                                     | Description                                                                                                      |\n| :-----------------: | ------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------- |\n| <Check size={18} /> | [@next/next/google-font-display](/docs/messages/google-font-display)                                                     | Enforce font-display behavior with Google Fonts.                                                                 |\n| <Check size={18} /> | [@next/next/google-font-preconnect](/docs/messages/google-font-preconnect)                                               | Ensure `preconnect` is used with Google Fonts.                                                                   |\n| <Check size={18} /> | [@next/next/inline-script-id](/docs/messages/inline-script-id)                                                           | Enforce `id` attribute on `next/script` components with inline content.                                          |\n| <Check size={18} /> | [@next/next/next-script-for-ga](/docs/messages/next-script-for-ga)                                                       | Prefer `next/script` component when using the inline script for Google Analytics.                                |\n| <Check size={18} /> | [@next/next/no-assign-module-variable](/docs/messages/no-assign-module-variable)                                         | Prevent assignment to the `module` variable.                                                                     |\n| <Check size={18} /> | [@next/next/no-async-client-component](/docs/messages/no-async-client-component)                                         | Prevent client components from being async functions.                                                            |\n| <Check size={18} /> | [@next/next/no-before-interactive-script-outside-document](/docs/messages/no-before-interactive-script-outside-document) | Prevent usage of `next/script`'s `beforeInteractive` strategy outside of `pages/_document.js`.                   |\n| <Check size={18} /> | [@next/next/no-css-tags](/docs/messages/no-css-tags)                                                                     | Prevent manual stylesheet tags.                                                                                  |\n| <Check size={18} /> | [@next/next/no-document-import-in-page](/docs/messages/no-document-import-in-page)                                       | Prevent importing `next/document` outside of `pages/_document.js`.                                               |\n| <Check size={18} /> | [@next/next/no-duplicate-head](/docs/messages/no-duplicate-head)                                                         | Prevent duplicate usage of `<Head>` in `pages/_document.js`.                                                     |\n| <Check size={18} /> | [@next/next/no-head-element](/docs/messages/no-head-element)                                                             | Prevent usage of `<head>` element.                                                                               |\n| <Check size={18} /> | [@next/next/no-head-import-in-document](/docs/messages/no-head-import-in-document)                                       | Prevent usage of `next/head` in `pages/_document.js`.                                                            |\n| <Check size={18} /> | [@next/next/no-html-link-for-pages](/docs/messages/no-html-link-for-pages)                                               | Prevent usage of `<a>` elements to navigate to internal Next.js pages.                                           |\n| <Check size={18} /> | [@next/next/no-img-element](/docs/messages/no-img-element)                                                               | Prevent usage of `<img>` element due to slower LCP and higher bandwidth.                                         |\n| <Check size={18} /> | [@next/next/no-page-custom-font](/docs/messages/no-page-custom-font)                                                     | Prevent page-only custom fonts.                                                                                  |\n| <Check size={18} /> | [@next/next/no-script-component-in-head](/docs/messages/no-script-component-in-head)                                     | Prevent usage of `next/script` in `next/head` component.                                                         |\n| <Check size={18} /> | [@next/next/no-styled-jsx-in-document](/docs/messages/no-styled-jsx-in-document)                                         | Prevent usage of `styled-jsx` in `pages/_document.js`.                                                           |\n| <Check size={18} /> | [@next/next/no-sync-scripts](/docs/messages/no-sync-scripts)                                                             | Prevent synchronous scripts.                                                                                     |\n| <Check size={18} /> | [@next/next/no-title-in-document-head](/docs/messages/no-title-in-document-head)                                         | Prevent usage of `<title>` with `Head` component from `next/document`.                                           |\n| <Check size={18} /> | @next/next/no-typos                                                                                                      | Prevent common typos in [Next.js's data fetching functions](/docs/pages/building-your-application/data-fetching) |\n| <Check size={18} /> | [@next/next/no-unwanted-polyfillio](/docs/messages/no-unwanted-polyfillio)                                               | Prevent duplicate polyfills from Polyfill.io.                                                                    |\n\nIf you already have ESLint configured in your application, we recommend extending from this plugin directly instead of including `eslint-config-next` unless a few conditions are met. Refer to the [Recommended Plugin Ruleset](#recommended-plugin-ruleset) to learn more.\n\n### Custom Settings\n\n#### `rootDir`\n\nIf you're using `eslint-plugin-next` in a project where Next.js isn't installed in your root directory (such as a monorepo), you can tell `eslint-plugin-next` where to find your Next.js application using the `settings` property in your `.eslintrc`:\n\n```json filename=\".eslintrc.json\"\n{\n  \"extends\": \"next\",\n  \"settings\": {\n    \"next\": {\n      \"rootDir\": \"packages/my-app/\"\n    }\n  }\n}\n```\n\n`rootDir` can be a path (relative or absolute), a glob (i.e. `\"packages/*/\"`), or an array of paths and/or globs.\n\n## Linting Custom Directories and Files\n\nBy default, Next.js will run ESLint for all files in the `pages/`, `app/`, `components/`, `lib/`, and `src/` directories. However, you can specify which directories using the `dirs` option in the `eslint` config in `next.config.js` for production builds:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  eslint: {\n    dirs: ['pages', 'utils'], // Only run ESLint on the 'pages' and 'utils' directories during production builds (next build)\n  },\n}\n```\n\nSimilarly, the `--dir` and `--file` flags can be used for `next lint` to lint specific directories and files:\n\n```bash filename=\"Terminal\"\nnext lint --dir pages --dir utils --file bar.js\n```\n\n## Caching\n\n<AppOnly>\n\nTo improve performance, information of files processed by ESLint are cached by default. This is stored in `.next/cache` or in your defined [build directory](/docs/app/api-reference/next-config-js/distDir). If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the `--no-cache` flag with `next lint`.\n\n</AppOnly>\n\n<PagesOnly>\n\nTo improve performance, information of files processed by ESLint are cached by default. This is stored in `.next/cache` or in your defined [build directory](/docs/pages/api-reference/next-config-js/distDir). If you include any ESLint rules that depend on more than the contents of a single source file and need to disable the cache, use the `--no-cache` flag with `next lint`.\n\n</PagesOnly>\n\n```bash filename=\"Terminal\"\nnext lint --no-cache\n```\n\n## Disabling Rules\n\nIf you would like to modify or disable any rules provided by the supported plugins (`react`, `react-hooks`, `next`), you can directly change them using the `rules` property in your `.eslintrc`:\n\n```json filename=\".eslintrc.json\"\n{\n  \"extends\": \"next\",\n  \"rules\": {\n    \"react/no-unescaped-entities\": \"off\",\n    \"@next/next/no-page-custom-font\": \"off\"\n  }\n}\n```\n\n### Core Web Vitals\n\nThe `next/core-web-vitals` rule set is enabled when `next lint` is run for the first time and the **strict** option is selected.\n\n```json filename=\".eslintrc.json\"\n{\n  \"extends\": \"next/core-web-vitals\"\n}\n```\n\n`next/core-web-vitals` updates `eslint-plugin-next` to error on a number of rules that are warnings by default if they affect [Core Web Vitals](https://web.dev/vitals/).\n\n> The `next/core-web-vitals` entry point is automatically included for new applications built with [Create Next App](/docs/app/api-reference/create-next-app).\n\n## Usage With Other Tools\n\n### Prettier\n\nESLint also contains code formatting rules, which can conflict with your existing [Prettier](https://prettier.io/) setup. We recommend including [eslint-config-prettier](https://github.com/prettier/eslint-config-prettier) in your ESLint config to make ESLint and Prettier work together.\n\nFirst, install the dependency:\n\n```bash filename=\"Terminal\"\nnpm install --save-dev eslint-config-prettier\n\nyarn add --dev eslint-config-prettier\n\npnpm add --save-dev eslint-config-prettier\n\nbun add --dev eslint-config-prettier\n```\n\nThen, add `prettier` to your existing ESLint config:\n\n```json filename=\".eslintrc.json\"\n{\n  \"extends\": [\"next\", \"prettier\"]\n}\n```\n\n### lint-staged\n\nIf you would like to use `next lint` with [lint-staged](https://github.com/okonet/lint-staged) to run the linter on staged git files, you'll have to add the following to the `.lintstagedrc.js` file in the root of your project in order to specify usage of the `--file` flag.\n\n```js filename=\".lintstagedrc.js\"\nconst path = require('path')\n\nconst buildEslintCommand = (filenames) =>\n  `next lint --fix --file ${filenames\n    .map((f) => path.relative(process.cwd(), f))\n    .join(' --file ')}`\n\nmodule.exports = {\n  '*.{js,jsx,ts,tsx}': [buildEslintCommand],\n}\n```\n\n## Migrating Existing Config\n\n### Recommended Plugin Ruleset\n\nIf you already have ESLint configured in your application and any of the following conditions are true:\n\n- You have one or more of the following plugins already installed (either separately or through a different config such as `airbnb` or `react-app`):\n  - `react`\n  - `react-hooks`\n  - `jsx-a11y`\n  - `import`\n- You've defined specific `parserOptions` that are different from how Babel is configured within Next.js (this is not recommended unless you have [customized your Babel configuration](/docs/pages/building-your-application/configuring/babel))\n- You have `eslint-plugin-import` installed with Node.js and/or TypeScript [resolvers](https://github.com/benmosher/eslint-plugin-import#resolvers) defined to handle imports\n\nThen we recommend either removing these settings if you prefer how these properties have been configured within [`eslint-config-next`](https://github.com/vercel/next.js/blob/canary/packages/eslint-config-next/index.js) or extending directly from the Next.js ESLint plugin instead:\n\n```js\nmodule.exports = {\n  extends: [\n    //...\n    'plugin:@next/next/recommended',\n  ],\n}\n```\n\nThe plugin can be installed normally in your project without needing to run `next lint`:\n\n```bash filename=\"Terminal\"\nnpm install --save-dev @next/eslint-plugin-next\n\nyarn add --dev @next/eslint-plugin-next\n\npnpm add --save-dev @next/eslint-plugin-next\n\nbun add --dev @next/eslint-plugin-next\n```\n\nThis eliminates the risk of collisions or errors that can occur due to importing the same plugin or parser across multiple configurations.\n\n### Additional Configurations\n\nIf you already use a separate ESLint configuration and want to include `eslint-config-next`, ensure that it is extended last after other configurations. For example:\n\n```json filename=\".eslintrc.json\"\n{\n  \"extends\": [\"eslint:recommended\", \"next\"]\n}\n```\n\nThe `next` configuration already handles setting default values for the `parser`, `plugins` and `settings` properties. There is no need to manually re-declare any of these properties unless you need a different configuration for your use case.\n\nIf you include any other shareable configurations, **you will need to make sure that these properties are not overwritten or modified**. Otherwise, we recommend removing any configurations that share behavior with the `next` configuration or extending directly from the Next.js ESLint plugin as mentioned above.\n", "01-building-your-application/07-configuring/05-mdx.mdx": "---\ntitle: Markdown and MDX\nnav_title: MDX\ndescription: Learn how to configure MDX and use it in your Next.js apps.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n[Markdown](https://daringfireball.net/projects/markdown/syntax) is a lightweight markup language used to format text. It allows you to write using plain text syntax and convert it to structurally valid HTML. It's commonly used for writing content on websites and blogs.\n\nYou write...\n\n```md\nI **love** using [Next.js](https://nextjs.org/)\n```\n\nOutput:\n\n```html\n<p>I <strong>love</strong> using <a href=\"https://nextjs.org/\">Next.js</a></p>\n```\n\n[MDX](https://mdxjs.com/) is a superset of markdown that lets you write [JSX](https://react.dev/learn/writing-markup-with-jsx) directly in your markdown files. It is a powerful way to add dynamic interactivity and embed React components within your content.\n\nNext.js can support both local MDX content inside your application, as well as remote MDX files fetched dynamically on the server. The Next.js plugin handles transforming markdown and React components into HTML, including support for usage in Server Components (the default in App Router).\n\n> **Good to know**: View the [Portfolio Starter Kit](https://vercel.com/templates/next.js/portfolio-starter-kit) template for a complete working example.\n\n## Install dependencies\n\nThe `@next/mdx` package, and related packages, are used to configure Next.js so it can process markdown and MDX. **It sources data from local files**, allowing you to create pages with a `.md` or `.mdx` extension, directly in your `/pages` or `/app` directory.\n\nInstall these packages to render MDX with Next.js:\n\n```bash filename=\"Terminal\"\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\n```\n\n## Configure `next.config.mjs`\n\nUpdate the `next.config.mjs` file at your project's root to configure it to use MDX:\n\n```js filename=\"next.config.mjs\"\nimport createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions` to include markdown and MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n\nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n})\n\n// Merge MDX config with Next.js config\nexport default withMDX(nextConfig)\n```\n\nThis allows `.md` and `.mdx` files to act as pages, routes, or imports in your application.\n\n## Add a `mdx-components.tsx` file\n\nCreate a `mdx-components.tsx` (or `.js`) file in the root of your project to define global MDX Components. For example, at the same level as `pages` or `app`, or inside `src` if applicable.\n\n```tsx filename=\"mdx-components.tsx\" switcher\nimport type { MDXComponents } from 'mdx/types'\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    ...components,\n  }\n}\n```\n\n```js filename=\"mdx-components.js\" switcher\nexport function useMDXComponents(components) {\n  return {\n    ...components,\n  }\n}\n```\n\n> **Good to know**:\n>\n> - `mdx-components.tsx` is **required** to use `@next/mdx` with App Router and will not work without it.\n> - Learn more about the [`mdx-components.tsx` file convention](/docs/app/api-reference/file-conventions/mdx-components).\n> - Learn how to [use custom styles and components](#using-custom-styles-and-components).\n\n## Rendering MDX\n\nYou can render MDX using Next.js's file based routing or by importing MDX files into other pages.\n\n### Using file based routing\n\nWhen using file based routing, you can use MDX pages like any other page.\n\n<AppOnly>\n\nIn App Router apps, that includes being able to use [metadata](/docs/app/building-your-application/optimizing/metadata).\n\nCreate a new MDX page within the `/app` directory:\n\n```txt\n  my-project\n  \u251c\u2500\u2500 app\n  \u2502   \u2514\u2500\u2500 mdx-page\n  \u2502       \u2514\u2500\u2500 page.(mdx/md)\n  |\u2500\u2500 mdx-components.(tsx/js)\n  \u2514\u2500\u2500 package.json\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nCreate a new MDX page within the `/pages` directory:\n\n```txt\n  my-project\n  |\u2500\u2500 mdx-components.(tsx/js)\n  \u251c\u2500\u2500 pages\n  \u2502   \u2514\u2500\u2500 mdx-page.(mdx/md)\n  \u2514\u2500\u2500 package.json\n```\n\n</PagesOnly>\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\n```mdx\nimport { MyComponent } from 'my-component'\n\n# Welcome to my MDX page!\n\nThis is some **bold** and _italics_ text.\n\nThis is a list in markdown:\n\n- One\n- Two\n- Three\n\nCheckout my React component:\n\n<MyComponent />\n```\n\nNavigating to the `/mdx-page` route should display your rendered MDX page.\n\n### Using imports\n\n<AppOnly>\n\nCreate a new page within the `/app` directory and an MDX file wherever you'd like:\n\n```txt\n  my-project\n  \u251c\u2500\u2500 app\n  \u2502   \u2514\u2500\u2500 mdx-page\n  \u2502       \u2514\u2500\u2500 page.(tsx/js)\n  \u251c\u2500\u2500 markdown\n  \u2502   \u2514\u2500\u2500 welcome.(mdx/md)\n  |\u2500\u2500 mdx-components.(tsx/js)\n  \u2514\u2500\u2500 package.json\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nCreate a new page within the `/pages` directory and an MDX file wherever you'd like:\n\n```txt\n  my-project\n  \u251c\u2500\u2500 pages\n  \u2502   \u2514\u2500\u2500 mdx-page.(tsx/js)\n  \u251c\u2500\u2500 markdown\n  \u2502   \u2514\u2500\u2500 welcome.(mdx/md)\n  |\u2500\u2500 mdx-components.(tsx/js)\n  \u2514\u2500\u2500 package.json\n```\n\n</PagesOnly>\n\nYou can use MDX in these files, and even import React components, directly inside your MDX page:\n\n```mdx filename=\"markdown/welcome.mdx\" switcher\nimport { MyComponent } from 'my-component'\n\n# Welcome to my MDX page!\n\nThis is some **bold** and _italics_ text.\n\nThis is a list in markdown:\n\n- One\n- Two\n- Three\n\nCheckout my React component:\n\n<MyComponent />\n```\n\nImport the MDX file inside the page to display the content:\n\n<AppOnly>\n\n```tsx filename=\"app/mdx-page/page.tsx\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nexport default function Page() {\n  return <Welcome />\n}\n```\n\n```jsx filename=\"app/mdx-page/page.js\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nexport default function Page() {\n  return <Welcome />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/mdx-page.tsx\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nexport default function Page() {\n  return <Welcome />\n}\n```\n\n```jsx filename=\"pages/mdx-page.js\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nexport default function Page() {\n  return <Welcome />\n}\n```\n\n</PagesOnly>\n\nNavigating to the `/mdx-page` route should display your rendered MDX page.\n\n## Using custom styles and components\n\nMarkdown, when rendered, maps to native HTML elements. For example, writing the following markdown:\n\n```md\n## This is a heading\n\nThis is a list in markdown:\n\n- One\n- Two\n- Three\n```\n\nGenerates the following HTML:\n\n```html\n<h2>This is a heading</h2>\n\n<p>This is a list in markdown:</p>\n\n<ul>\n  <li>One</li>\n  <li>Two</li>\n  <li>Three</li>\n</ul>\n```\n\nTo style your markdown, you can provide custom components that map to the generated HTML elements. Styles and components can be implemented globally, locally, and with shared layouts.\n\n### Global styles and components\n\nAdding styles and components in `mdx-components.tsx` will affect _all_ MDX files in your application.\n\n```tsx filename=\"mdx-components.tsx\" switcher\nimport type { MDXComponents } from 'mdx/types'\nimport Image, { ImageProps } from 'next/image'\n\n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n\nexport function useMDXComponents(components: MDXComponents): MDXComponents {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...(props as ImageProps)}\n      />\n    ),\n    ...components,\n  }\n}\n```\n\n```js filename=\"mdx-components.js\" switcher\nimport Image from 'next/image'\n\n// This file allows you to provide custom React components\n// to be used in MDX files. You can import and use any\n// React component you want, including inline styles,\n// components from other libraries, and more.\n\nexport function useMDXComponents(components) {\n  return {\n    // Allows customizing built-in components, e.g. to add styling.\n    h1: ({ children }) => (\n      <h1 style={{ color: 'red', fontSize: '48px' }}>{children}</h1>\n    ),\n    img: (props) => (\n      <Image\n        sizes=\"100vw\"\n        style={{ width: '100%', height: 'auto' }}\n        {...props}\n      />\n    ),\n    ...components,\n  }\n}\n```\n\n### Local styles and components\n\nYou can apply local styles and components to specific pages by passing them into imported MDX components. These will merge with and override [global styles and components](#global-styles-and-components).\n\n<AppOnly>\n\n```tsx filename=\"app/mdx-page/page.tsx\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n```jsx filename=\"app/mdx-page/page.js\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/mdx-page.tsx\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n```jsx filename=\"pages/mdx-page.js\" switcher\nimport Welcome from '@/markdown/welcome.mdx'\n\nfunction CustomH1({ children }) {\n  return <h1 style={{ color: 'blue', fontSize: '100px' }}>{children}</h1>\n}\n\nconst overrideComponents = {\n  h1: CustomH1,\n}\n\nexport default function Page() {\n  return <Welcome components={overrideComponents} />\n}\n```\n\n</PagesOnly>\n\n### Shared layouts\n\n<AppOnly>\n\nTo share a layout across MDX pages, you can use the [built-in layouts support](/docs/app/building-your-application/routing/layouts-and-templates#layouts) with the App Router.\n\n```tsx filename=\"app/mdx-page/layout.tsx\" switcher\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n```jsx filename=\"app/mdx-page/layout.js\" switcher\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo share a layout around MDX pages, create a layout component:\n\n```tsx filename=\"components/mdx-layout.tsx\" switcher\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\n```jsx filename=\"components/mdx-layout.js\" switcher\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return <div style={{ color: 'blue' }}>{children}</div>\n}\n```\n\nThen, import the layout component into the MDX page, wrap the MDX content in the layout, and export it:\n\n```mdx\nimport MdxLayout from '../components/mdx-layout'\n\n# Welcome to my MDX page!\n\nexport default function MDXPage({ children }) {\n  return <MdxLayout>{children}</MdxLayout>\n\n}\n```\n\n</PagesOnly>\n\n### Using Tailwind typography plugin\n\nIf you are using [Tailwind](https://tailwindcss.com) to style your application, using the [`@tailwindcss/typography` plugin](https://tailwindcss.com/docs/plugins#typography) will allow you to reuse your Tailwind configuration and styles in your markdown files.\n\nThe plugin adds a set of `prose` classes that can be used to add typographic styles to content blocks that come from sources, like markdown.\n\n[Install Tailwind typography](https://github.com/tailwindlabs/tailwindcss-typography?tab=readme-ov-file#installation) and use with [shared layouts](#shared-layouts) to add the `prose` you want.\n\n<AppOnly>\n\n```tsx filename=\"app/mdx-page/layout.tsx\" switcher\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/mdx-page/layout.js\" switcher\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo share a layout around MDX pages, create a layout component:\n\n```tsx filename=\"components/mdx-layout.tsx\" switcher\nexport default function MdxLayout({ children }: { children: React.ReactNode }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\n```jsx filename=\"components/mdx-layout.js\" switcher\nexport default function MdxLayout({ children }) {\n  // Create any shared layout or styles here\n  return (\n    <div className=\"prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white\">\n      {children}\n    </div>\n  )\n}\n```\n\nThen, import the layout component into the MDX page, wrap the MDX content in the layout, and export it:\n\n```mdx\nimport MdxLayout from '../components/mdx-layout'\n\n# Welcome to my MDX page!\n\nexport default function MDXPage({ children }) {\n  return <MdxLayout>{children}</MdxLayout>\n\n}\n```\n\n</PagesOnly >\n\n## Frontmatter\n\nFrontmatter is a YAML like key/value pairing that can be used to store data about a page. `@next/mdx` does **not** support frontmatter by default, though there are many solutions for adding frontmatter to your MDX content, such as:\n\n- [remark-frontmatter](https://github.com/remarkjs/remark-frontmatter)\n- [remark-mdx-frontmatter](https://github.com/remcohaszing/remark-mdx-frontmatter)\n- [gray-matter](https://github.com/jonschlinkert/gray-matter)\n\n`@next/mdx` **does** allow you to use exports like any other JavaScript component:\n\n```mdx filename=\"content/blog-post.mdx\" switcher\nexport const metadata = {\n  author: 'John Doe',\n}\n\n# Blog post\n```\n\nMetadata can now be referenced outside of the MDX file:\n\n<AppOnly>\n\n```tsx filename=\"app/blog/page.tsx\" switcher\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata': metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\n```jsx filename=\"app/blog/page.js\" switcher\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata': metadata)\n  //=> { author: 'John Doe' }\n  return <Welcome />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/blog.tsx\" switcher\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata': metadata)\n  //=> { author: 'John Doe' }\n  return <BlogPost />\n}\n```\n\n```jsx filename=\"pages/blog.js\" switcher\nimport BlogPost, { metadata } from '@/content/blog-post.mdx'\n\nexport default function Page() {\n  console.log('metadata': metadata)\n  //=> { author: 'John Doe' }\n  return <Welcome />\n}\n```\n\n</PagesOnly>\n\nA common use case for this is when you want to iterate over a collection of MDX and extract data. For example, creating a blog index page from all blog posts. You can use packages like [Node's `fs` module](https://nodejs.org/api/fs.html) or [globby](https://www.npmjs.com/package/globby) to read a directory of posts and extract the metadata.\n\n> **Good to know**:\n>\n> - Using `fs`, `globby`, etc. can only be used server-side.\n> - View the [Portfolio Starter Kit](https://vercel.com/templates/next.js/portfolio-starter-kit) template for a complete working example.\n\n## Remark and Rehype Plugins\n\nYou can optionally provide `remark` and `rehype` plugins to transform the MDX content.\n\nFor example, you can use `remark-gfm` to support GitHub Flavored Markdown.\n\nSince the `remark` and `rehype` ecosystem is ESM only, you'll need to use `next.config.mjs` as the configuration file.\n\n```js filename=\"next.config.mjs\"\nimport remarkGfm from 'remark-gfm'\nimport createMDX from '@next/mdx'\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // Configure `pageExtensions`` to include MDX files\n  pageExtensions: ['js', 'jsx', 'md', 'mdx', 'ts', 'tsx'],\n  // Optionally, add any other Next.js config below\n}\n\nconst withMDX = createMDX({\n  // Add markdown plugins here, as desired\n  options: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [],\n  },\n})\n\n// Wrap MDX and Next.js config with each other\nexport default withMDX(nextConfig)\n```\n\n## Remote MDX\n\nIf your MDX files or content lives _somewhere else_, you can fetch it dynamically on the server. This is useful for content stored in a separate local folder, CMS, database, or anywhere else. A popular community package for this use is [`next-mdx-remote`](https://github.com/hashicorp/next-mdx-remote#react-server-components-rsc--nextjs-app-directory-support).\n\n> **Good to know**: Please proceed with caution. MDX compiles to JavaScript and is executed on the server. You should only fetch MDX content from a trusted source, otherwise this can lead to remote code execution (RCE).\n\nThe following example uses `next-mdx-remote`:\n\n<AppOnly>\n\n```tsx filename=\"app/mdx-page-remote/page.tsx\" switcher\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n\nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n```\n\n```jsx filename=\"app/mdx-page-remote/page.js\" switcher\nimport { MDXRemote } from 'next-mdx-remote/rsc'\n\nexport default async function RemoteMdxPage() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https://...')\n  const markdown = await res.text()\n  return <MDXRemote source={markdown} />\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/mdx-page-remote.tsx\" switcher\nimport { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote'\n\ninterface Props {\n  mdxSource: MDXRemoteSerializeResult\n}\n\nexport default function RemoteMdxPage({ mdxSource }: Props) {\n  return <MDXRemote {...mdxSource} />\n}\n\nexport async function getStaticProps() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https:...')\n  const mdxText = await res.text()\n  const mdxSource = await serialize(mdxText)\n  return { props: { mdxSource } }\n}\n```\n\n```jsx filename=\"pages/mdx-page-remote.js\" switcher\nimport { serialize } from 'next-mdx-remote/serialize'\nimport { MDXRemote } from 'next-mdx-remote'\n\nexport default function RemoteMdxPage({ mdxSource }) {\n  return <MDXRemote {...mdxSource} />\n}\n\nexport async function getStaticProps() {\n  // MDX text - can be from a local file, database, CMS, fetch, anywhere...\n  const res = await fetch('https:...')\n  const mdxText = await res.text()\n  const mdxSource = await serialize(mdxText)\n  return { props: { mdxSource } }\n}\n```\n\n</PagesOnly>\n\nNavigating to the `/mdx-page-remote` route should display your rendered MDX.\n\n## Deep Dive: How do you transform markdown into HTML?\n\nReact does not natively understand markdown. The markdown plaintext needs to first be transformed into HTML. This can be accomplished with `remark` and `rehype`.\n\n`remark` is an ecosystem of tools around markdown. `rehype` is the same, but for HTML. For example, the following code snippet transforms markdown into HTML:\n\n```js\nimport { unified } from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // Convert into markdown AST\n    .use(remarkRehype) // Transform to HTML AST\n    .use(rehypeSanitize) // Sanitize HTML input\n    .use(rehypeStringify) // Convert AST into serialized HTML\n    .process('Hello, Next.js!')\n\n  console.log(String(file)) // <p>Hello, Next.js!</p>\n}\n```\n\nThe `remark` and `rehype` ecosystem contains plugins for [syntax highlighting](https://github.com/atomiks/rehype-pretty-code), [linking headings](https://github.com/rehypejs/rehype-autolink-headings), [generating a table of contents](https://github.com/remarkjs/remark-toc), and more.\n\nWhen using `@next/mdx` as shown above, you **do not** need to use `remark` or `rehype` directly, as it is handled for you. We're describing it here for a deeper understanding of what the `@next/mdx` package is doing underneath.\n\n## Using the Rust-based MDX compiler (Experimental)\n\nNext.js supports a new MDX compiler written in Rust. This compiler is still experimental and is not recommended for production use. To use the new compiler, you need to configure `next.config.js` when you pass it to `withMDX`:\n\n```js filename=\"next.config.js\"\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: true,\n  },\n})\n```\n\n`mdxRs` also accepts an object to configure how to transform mdx files.\n\n```js filename=\"next.config.js\"\nmodule.exports = withMDX({\n  experimental: {\n    mdxRs: {\n      jsxRuntime?: string            // Custom jsx runtime\n      jsxImportSource?: string       // Custom jsx import source,\n      mdxType?: 'gfm' | 'commonmark' // Configure what kind of mdx syntax will be used to parse & transform\n    },\n  },\n})\n```\n\n## Helpful Links\n\n- [MDX](https://mdxjs.com)\n- [`@next/mdx`](https://www.npmjs.com/package/@next/mdx)\n- [remark](https://github.com/remarkjs/remark)\n- [rehype](https://github.com/rehypejs/rehype)\n- [Markdoc](https://markdoc.dev/docs/nextjs)\n", "01-building-your-application/07-configuring/03-environment-variables.mdx": "---\ntitle: Environment Variables\ndescription: Learn to add and access environment variables in your Next.js application.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<details>\n  <summary>Examples</summary>\n\n- [Environment Variables](https://github.com/vercel/next.js/tree/canary/examples/environment-variables)\n\n</details>\n\nNext.js comes with built-in support for environment variables, which allows you to do the following:\n\n- [Use `.env.local` to load environment variables](#loading-environment-variables)\n- [Bundle environment variables for the browser by prefixing with `NEXT_PUBLIC_`](#bundling-environment-variables-for-the-browser)\n\n## Loading Environment Variables\n\nNext.js has built-in support for loading environment variables from `.env.local` into `process.env`.\n\n```txt filename=\".env.local\"\nDB_HOST=localhost\nDB_USER=myuser\nDB_PASS=mypassword\n```\n\n<PagesOnly>\n\nThis loads `process.env.DB_HOST`, `process.env.DB_USER`, and `process.env.DB_PASS` into the Node.js environment automatically allowing you to use them in [Next.js data fetching methods](/docs/pages/building-your-application/data-fetching) and [API routes](/docs/pages/building-your-application/routing/api-routes).\n\nFor example, using [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props):\n\n```js filename=\"pages/index.js\"\nexport async function getStaticProps() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n</PagesOnly>\n\n<AppOnly>\n\n> **Note**: Next.js also supports multiline variables inside of your `.env*` files:\n>\n> ```bash\n> # .env.local\n>\n> # you can write with line breaks\n> PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\n> ...\n> Kh9NV...\n> ...\n> -----END DSA PRIVATE KEY-----\"\n>\n> # or with `\\n` inside double quotes\n> PRIVATE_KEY=\"-----BEGIN RSA PRIVATE KEY-----\\nKh9NV...\\n-----END DSA PRIVATE KEY-----\\n\"\n> ```\n\n> **Note**: If you are using a `/src` folder, please note that Next.js will load the .env files **only** from the parent folder and **not** from the `/src` folder.\n> This loads `process.env.DB_HOST`, `process.env.DB_USER`, and `process.env.DB_PASS` into the Node.js environment automatically allowing you to use them in [Route Handlers](/docs/app/building-your-application/routing/route-handlers).\n\nFor example:\n\n```js filename=\"app/api/route.js\"\nexport async function GET() {\n  const db = await myDB.connect({\n    host: process.env.DB_HOST,\n    username: process.env.DB_USER,\n    password: process.env.DB_PASS,\n  })\n  // ...\n}\n```\n\n</AppOnly>\n\n### Loading Environment Variables with `@next/env`\n\nIf you need to load environment variables outside of the Next.js runtime, such as in a root config file for an ORM or test runner, you can use the `@next/env` package.\n\nThis package is used internally by Next.js to load environment variables from `.env*` files.\n\nTo use it, install the package and use the `loadEnvConfig` function to load the environment variables:\n\n```bash\nnpm install @next/env\n```\n\n```tsx filename=\"envConfig.ts\" switcher\nimport { loadEnvConfig } from '@next/env'\n\nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n```\n\n```jsx filename=\"envConfig.js\" switcher\nimport { loadEnvConfig } from '@next/env'\n\nconst projectDir = process.cwd()\nloadEnvConfig(projectDir)\n```\n\nThen, you can import the configuration where needed. For example:\n\n```tsx filename=\"orm.config.ts\" switcher\nimport './envConfig.ts'\n\nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL!,\n  },\n})\n```\n\n```jsx filename=\"orm.config.js\" switcher\nimport './envConfig.js'\n\nexport default defineConfig({\n  dbCredentials: {\n    connectionString: process.env.DATABASE_URL,\n  },\n})\n```\n\n### Referencing Other Variables\n\nNext.js will automatically expand variables that use `$` to reference other variables e.g. `$VARIABLE` inside of your `.env*` files. This allows you to reference other secrets. For example:\n\n```txt filename=\".env\"\nTWITTER_USER=nextjs\nTWITTER_URL=https://twitter.com/$TWITTER_USER\n```\n\nIn the above example, `process.env.TWITTER_URL` would be set to `https://twitter.com/nextjs`.\n\n> **Good to know**: If you need to use variable with a `$` in the actual value, it needs to be escaped e.g. `\\$`.\n\n## Bundling Environment Variables for the Browser\n\nNon-`NEXT_PUBLIC_` environment variables are only available in the Node.js environment, meaning they aren't accessible to the browser (the client runs in a different _environment_).\n\nIn order to make the value of an environment variable accessible in the browser, Next.js can \"inline\" a value, at build time, into the js bundle that is delivered to the client, replacing all references to `process.env.[variable]` with a hard-coded value. To tell it to do this, you just have to prefix the variable with `NEXT_PUBLIC_`. For example:\n\n```txt filename=\"Terminal\"\nNEXT_PUBLIC_ANALYTICS_ID=abcdefghijk\n```\n\nThis will tell Next.js to replace all references to `process.env.NEXT_PUBLIC_ANALYTICS_ID` in the Node.js environment with the value from the environment in which you run `next build`, allowing you to use it anywhere in your code. It will be inlined into any JavaScript sent to the browser.\n\n> **Note**: After being built, your app will no longer respond to changes to these environment variables. For instance, if you use a Heroku pipeline to promote slugs built in one environment to another environment, or if you build and deploy a single Docker image to multiple environments, all `NEXT_PUBLIC_` variables will be frozen with the value evaluated at build time, so these values need to be set appropriately when the project is built. If you need access to runtime environment values, you'll have to setup your own API to provide them to the client (either on demand or during initialization).\n\n```js filename=\"pages/index.js\"\nimport setupAnalyticsService from '../lib/my-analytics-service'\n\n// 'NEXT_PUBLIC_ANALYTICS_ID' can be used here as it's prefixed by 'NEXT_PUBLIC_'.\n// It will be transformed at build time to `setupAnalyticsService('abcdefghijk')`.\nsetupAnalyticsService(process.env.NEXT_PUBLIC_ANALYTICS_ID)\n\nfunction HomePage() {\n  return <h1>Hello World</h1>\n}\n\nexport default HomePage\n```\n\nNote that dynamic lookups will _not_ be inlined, such as:\n\n```js\n// This will NOT be inlined, because it uses a variable\nconst varName = 'NEXT_PUBLIC_ANALYTICS_ID'\nsetupAnalyticsService(process.env[varName])\n\n// This will NOT be inlined, because it uses a variable\nconst env = process.env\nsetupAnalyticsService(env.NEXT_PUBLIC_ANALYTICS_ID)\n```\n\n### Runtime Environment Variables\n\nNext.js can support both build time and runtime environment variables.\n\n**By default, environment variables are only available on the server**. To expose an environment variable to the browser, it must be prefixed with `NEXT_PUBLIC_`. However, these public environment variables will be inlined into the JavaScript bundle during `next build`.\n\nTo read runtime environment variables, we recommend using `getServerSideProps` or [incrementally adopting the App Router](/docs/app/building-your-application/upgrading/app-router-migration). With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\n```jsx\nimport { unstable_noStore as noStore } from 'next/cache'\n\nexport default function Component() {\n  noStore()\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, meaning\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  // ...\n}\n```\n\n**Good to know:**\n\n- You can run code on server startup using the [`register` function](/docs/app/building-your-application/optimizing/instrumentation).\n- We do not recommend using the [runtimeConfig](/docs/pages/api-reference/next-config-js/runtime-configuration) option, as this does not work with the standalone output mode. Instead, we recommend [incrementally adopting](/docs/app/building-your-application/upgrading/app-router-migration) the App Router.\n\n## Default Environment Variables\n\nIn general only one `.env.local` file is needed. However, sometimes you might want to add some defaults for the `development` (`next dev`) or `production` (`next start`) environment.\n\nNext.js allows you to set defaults in `.env` (all environments), `.env.development` (development environment), and `.env.production` (production environment).\n\n`.env.local` always overrides the defaults set.\n\n> **Good to know**: `.env`, `.env.development`, and `.env.production` files should be included in your repository as they define defaults. **`.env*.local` should be added to `.gitignore`**, as those files are intended to be ignored. `.env.local` is where secrets can be stored.\n\n## Environment Variables on Vercel\n\nWhen deploying your Next.js application to [Vercel](https://vercel.com), Environment Variables can be configured [in the Project Settings](https://vercel.com/docs/projects/environment-variables?utm_medium=docs&utm_source=next-site&utm_campaign=next-website).\n\nAll types of Environment Variables should be configured there. Even Environment Variables used in Development \u2013 which can be [downloaded onto your local device](https://vercel.com/docs/concepts/projects/environment-variables#development-environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) afterwards.\n\nIf you've configured [Development Environment Variables](https://vercel.com/docs/concepts/projects/environment-variables#development-environment-variables?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) you can pull them into a `.env.local` for usage on your local machine using the following command:\n\n```bash filename=\"Terminal\"\nvercel env pull .env.local\n```\n\n> **Good to know**: When deploying your Next.js application to [Vercel](https://vercel.com), your environment variables in `.env*` files will not be made available to Edge Runtime, unless their name are prefixed with `NEXT_PUBLIC_`. We strongly recommend managing your environment variables in [Project Settings](https://vercel.com/docs/projects/environment-variables?utm_medium=docs&utm_source=next-site&utm_campaign=next-website) instead, from where all environment variables are available.\n\n## Test Environment Variables\n\nApart from `development` and `production` environments, there is a 3rd option available: `test`. In the same way you can set defaults for development or production environments, you can do the same with a `.env.test` file for the `testing` environment (though this one is not as common as the previous two). Next.js will not load environment variables from `.env.development` or `.env.production` in the `testing` environment.\n\nThis one is useful when running tests with tools like `jest` or `cypress` where you need to set specific environment vars only for testing purposes. Test default values will be loaded if `NODE_ENV` is set to `test`, though you usually don't need to do this manually as testing tools will address it for you.\n\nThere is a small difference between `test` environment, and both `development` and `production` that you need to bear in mind: `.env.local` won't be loaded, as you expect tests to produce the same results for everyone. This way every test execution will use the same env defaults across different executions by ignoring your `.env.local` (which is intended to override the default set).\n\n> **Good to know**: similar to Default Environment Variables, `.env.test` file should be included in your repository, but `.env.test.local` shouldn't, as `.env*.local` are intended to be ignored through `.gitignore`.\n\nWhile running unit tests you can make sure to load your environment variables the same way Next.js does by leveraging the `loadEnvConfig` function from the `@next/env` package.\n\n```js\n// The below can be used in a Jest global setup file or similar for your testing set-up\nimport { loadEnvConfig } from '@next/env'\n\nexport default async () => {\n  const projectDir = process.cwd()\n  loadEnvConfig(projectDir)\n}\n```\n\n## Environment Variable Load Order\n\nEnvironment variables are looked up in the following places, in order, stopping once the variable is found.\n\n1. `process.env`\n1. `.env.$(NODE_ENV).local`\n1. `.env.local` (Not checked when `NODE_ENV` is `test`.)\n1. `.env.$(NODE_ENV)`\n1. `.env`\n\nFor example, if `NODE_ENV` is `development` and you define a variable in both `.env.development.local` and `.env`, the value in `.env.development.local` will be used.\n\n> **Good to know**: The allowed values for `NODE_ENV` are `production`, `development` and `test`.\n\n## Good to know\n\n- If you are using a [`/src` directory](/docs/app/building-your-application/configuring/src-directory), `.env.*` files should remain in the root of your project.\n- If the environment variable `NODE_ENV` is unassigned, Next.js automatically assigns `development` when running the `next dev` command, or `production` for all other commands.\n\n## Version History\n\n| Version  | Changes                                       |\n| -------- | --------------------------------------------- |\n| `v9.4.0` | Support `.env` and `NEXT_PUBLIC_` introduced. |\n", "01-building-your-application/05-styling/02-tailwind-css.mdx": "---\ntitle: Tailwind CSS\ndescription: Style your Next.js Application using Tailwind CSS.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<PagesOnly>\n\n<details open>\n  <summary>Examples</summary>\n\n- [With Tailwind CSS](https://github.com/vercel/next.js/tree/canary/examples/with-tailwindcss)\n\n</details>\n\n</PagesOnly>\n\n[Tailwind CSS](https://tailwindcss.com/) is a utility-first CSS framework that works exceptionally well with Next.js.\n\n## Installing Tailwind\n\nInstall the Tailwind CSS packages and run the `init` command to generate both the `tailwind.config.js` and `postcss.config.js` files:\n\n```bash filename=\"Terminal\"\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\n## Configuring Tailwind\n\nInside `tailwind.config.js`, add paths to the files that will use Tailwind CSS class names:\n\n```js filename=\"tailwind.config.js\"\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}', // Note the addition of the `app` directory.\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n\n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n\nYou do not need to modify `postcss.config.js`.\n\n<AppOnly>\n\n## Importing Styles\n\nAdd the [Tailwind CSS directives](https://tailwindcss.com/docs/functions-and-directives#directives) that Tailwind will use to inject its generated styles to a [Global Stylesheet](/docs/app/building-your-application/styling/css-modules#global-styles) in your application, for example:\n\n```css filename=\"app/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nInside the [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required) (`app/layout.tsx`), import the `globals.css` stylesheet to apply the styles to every route in your application.\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport type { Metadata } from 'next'\n\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata: Metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\n// These styles apply to every route in the application\nimport './globals.css'\n\nexport const metadata = {\n  title: 'Create Next App',\n  description: 'Generated by create next app',\n}\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n## Using Classes\n\nAfter installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application.\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n## Importing Styles\n\nAdd the [Tailwind CSS directives](https://tailwindcss.com/docs/functions-and-directives#directives) that Tailwind will use to inject its generated styles to a [Global Stylesheet](/docs/pages/building-your-application/styling/css-modules#global-styles) in your application, for example:\n\n```css filename=\"styles/globals.css\"\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\nInside the [custom app file](/docs/pages/building-your-application/routing/custom-app) (`pages/_app.js`), import the `globals.css` stylesheet to apply the styles to every route in your application.\n\n```tsx filename=\"pages/_app.tsx\" switcher\n// These styles apply to every route in the application\nimport '@/styles/globals.css'\nimport type { AppProps } from 'next/app'\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n```\n\n```jsx filename=\"pages/_app.js\" switcher\n// These styles apply to every route in the application\nimport '@/styles/globals.css'\n\nexport default function App({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\n## Using Classes\n\nAfter installing Tailwind CSS and adding the global styles, you can use Tailwind's utility classes in your application.\n\n```tsx filename=\"pages/index.tsx\" switcher\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n```jsx filename=\"pages/index.js\" switcher\nexport default function Page() {\n  return <h1 className=\"text-3xl font-bold underline\">Hello, Next.js!</h1>\n}\n```\n\n</PagesOnly>\n\n## Usage with Turbopack\n\nAs of Next.js 13.1, Tailwind CSS and PostCSS are supported with [Turbopack](https://turbo.build/pack/docs/features/css#tailwind-css).\n", "01-building-your-application/05-styling/01-css-modules.mdx": "---\ntitle: CSS Modules and Global Styles\nnav_title: CSS Modules\ndescription: Style your Next.js Application with CSS Modules, Global Styles, and external stylesheets.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<PagesOnly>\n\n<details open>\n  <summary>Examples</summary>\n\n- [Basic CSS Example](https://github.com/vercel/next.js/tree/canary/examples/basic-css)\n\n</details>\n\n</PagesOnly>\n\nNext.js supports different types of stylesheets, including:\n\n- [CSS Modules](#css-modules)\n- [Global Styles](#global-styles)\n- [External Stylesheets](#external-stylesheets)\n\n## CSS Modules\n\nNext.js has built-in support for CSS Modules using the `.module.css` extension.\n\nCSS Modules locally scope CSS by automatically creating a unique class name. This allows you to use the same class name in different files without worrying about collisions. This behavior makes CSS Modules the ideal way to include component-level CSS.\n\n## Example\n\n<AppOnly>\nCSS Modules can be imported into any file inside the `app` directory:\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nimport styles from './styles.module.css'\n\nexport default function DashboardLayout({ children }) {\n  return <section className={styles.dashboard}>{children}</section>\n}\n```\n\n```css filename=\"app/dashboard/styles.module.css\"\n.dashboard {\n  padding: 24px;\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nFor example, consider a reusable `Button` component in the `components/` folder:\n\nFirst, create `components/Button.module.css` with the following content:\n\n```css filename=\"Button.module.css\"\n/*\nYou do not need to worry about .error {} colliding with any other `.css` or\n`.module.css` files!\n*/\n.error {\n  color: white;\n  background-color: red;\n}\n```\n\nThen, create `components/Button.js`, importing and using the above CSS file:\n\n```jsx filename=\"components/Button.js\"\nimport styles from './Button.module.css'\n\nexport function Button() {\n  return (\n    <button\n      type=\"button\"\n      // Note how the \"error\" class is accessed as a property on the imported\n      // `styles` object.\n      className={styles.error}\n    >\n      Destroy\n    </button>\n  )\n}\n```\n\n</PagesOnly>\n\nCSS Modules are **only enabled for files with the `.module.css` and `.module.sass` extensions**.\n\nIn production, all CSS Module files will be automatically concatenated into **many minified and code-split** `.css` files.\nThese `.css` files represent hot execution paths in your application, ensuring the minimal amount of CSS is loaded for your application to paint.\n\n## Global Styles\n\n<AppOnly>\nGlobal styles can be imported into any layout, page, or component inside the `app` directory.\n\n> **Good to know**: This is different from the `pages` directory, where you can only import global styles inside the `_app.js` file.\n\nFor example, consider a stylesheet named `app/global.css`:\n\n```css\nbody {\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\nInside the root layout (`app/layout.js`), import the `global.css` stylesheet to apply the styles to every route in your application:\n\n```tsx filename=\"app/layout.tsx\" switcher\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\n// These styles apply to every route in the application\nimport './global.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nTo add a stylesheet to your application, import the CSS file within `pages/_app.js`.\n\nFor example, consider the following stylesheet named `styles.css`:\n\n```css filename=\"styles.css\"\nbody {\n  font-family: 'SF Pro Text', 'SF Pro Icons', 'Helvetica Neue', 'Helvetica',\n    'Arial', sans-serif;\n  padding: 20px 20px 60px;\n  max-width: 680px;\n  margin: 0 auto;\n}\n```\n\nCreate a [`pages/_app.js` file](/docs/pages/building-your-application/routing/custom-app) if not already present.\nThen, [`import`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import) the `styles.css` file.\n\n```jsx filename=\"pages/_app.js\"\nimport '../styles.css'\n\n// This default export is required in a new `pages/_app.js` file.\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\nThese styles (`styles.css`) will apply to all pages and components in your application.\nDue to the global nature of stylesheets, and to avoid conflicts, you may **only import them inside [`pages/_app.js`](/docs/pages/building-your-application/routing/custom-app)**.\n\nIn development, expressing stylesheets this way allows your styles to be hot reloaded as you edit them\u2014meaning you can keep application state.\n\nIn production, all CSS files will be automatically concatenated into a single minified `.css` file. The order that the CSS is concatenated will match the order the CSS is imported into the `_app.js` file. Pay special attention to imported JS modules that include their own CSS; the JS module's CSS will be concatenated following the same ordering rules as imported CSS files. For example:\n\n```jsx\nimport '../styles.css'\n// The CSS in ErrorBoundary depends on the global CSS in styles.css,\n// so we import it after styles.css.\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <ErrorBoundary>\n      <Component {...pageProps} />\n    </ErrorBoundary>\n  )\n}\n```\n\n</PagesOnly>\n\n## External Stylesheets\n\n<AppOnly>\n\nStylesheets published by external packages can be imported anywhere in the `app` directory, including colocated components:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body className=\"container\">{children}</body>\n    </html>\n  )\n}\n```\n\n> **Good to know**: External stylesheets must be directly imported from an npm package or downloaded and colocated with your codebase. You cannot use `<link rel=\"stylesheet\" />`.\n\n</AppOnly>\n\n<PagesOnly>\n\nNext.js allows you to import CSS files from a JavaScript file.\nThis is possible because Next.js extends the concept of [`import`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/import) beyond JavaScript.\n\n### Import styles from `node_modules`\n\nSince Next.js **9.5.4**, importing a CSS file from `node_modules` is permitted anywhere in your application.\n\nFor global stylesheets, like `bootstrap` or `nprogress`, you should import the file inside `pages/_app.js`.\nFor example:\n\n```jsx filename=\"pages/_app.js\"\nimport 'bootstrap/dist/css/bootstrap.css'\n\nexport default function MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n}\n```\n\nFor importing CSS required by a third-party component, you can do so in your component. For example:\n\n```jsx filename=\"components/example-dialog.js\"\nimport { useState } from 'react'\nimport { Dialog } from '@reach/dialog'\nimport VisuallyHidden from '@reach/visually-hidden'\nimport '@reach/dialog/styles.css'\n\nfunction ExampleDialog(props) {\n  const [showDialog, setShowDialog] = useState(false)\n  const open = () => setShowDialog(true)\n  const close = () => setShowDialog(false)\n\n  return (\n    <div>\n      <button onClick={open}>Open Dialog</button>\n      <Dialog isOpen={showDialog} onDismiss={close}>\n        <button className=\"close-button\" onClick={close}>\n          <VisuallyHidden>Close</VisuallyHidden>\n          <span aria-hidden>\u00d7</span>\n        </button>\n        <p>Hello there. I am a dialog</p>\n      </Dialog>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n\n<AppOnly>\n\n## Ordering and Merging\n\nNext.js optimizes CSS during production builds by automatically chunking (merging) stylesheets. The CSS order is determined by the order in which you import the stylesheets into your application code.\n\nFor example, `base-button.module.css` will be ordered before `page.module.css` since `<BaseButton>` is imported first in `<Page>`:\n\n```tsx filename=\"base-button.tsx\" switcher\nimport styles from './base-button.module.css'\n\nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\n```\n\n```jsx filename=\"base-button.js\" switcher\nimport styles from './base-button.module.css'\n\nexport function BaseButton() {\n  return <button className={styles.primary} />\n}\n```\n\n```tsx filename=\"page.ts\" switcher\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n\nexport function Page() {\n  return <BaseButton className={styles.primary} />\n}\n```\n\n```jsx filename=\"page.js\" switcher\nimport { BaseButton } from './base-button'\nimport styles from './page.module.css'\n\nexport function Page() {\n  return <BaseButton className={styles.primary} />\n}\n```\n\nTo maintain a predictable order, we recommend the following:\n\n- Only import a CSS file in a single JS/TS file.\n  - If using global class names, import the global styles in the same file in the order you want them to be applied.\n- Prefer CSS Modules over global styles.\n  - Use a consistent naming convention for your CSS modules. For example, using `<name>.module.css` over `<name>.tsx`.\n- Extract shared styles into a separate shared component.\n- If using [Tailwind](/docs/app/building-your-application/styling/tailwind-css), import the stylesheet at the top of the file, preferably in the [Root Layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required).\n\n> **Good to know:** CSS ordering behaves differently in development mode, always ensure to check preview deployments to verify the final CSS order in your production build.\n\n</AppOnly>\n\n## Additional Features\n\nNext.js includes additional features to improve the authoring experience of adding styles:\n\n- When running locally with `next dev`, local stylesheets (either global or CSS modules) will take advantage of [Fast Refresh](/docs/architecture/fast-refresh) to instantly reflect changes as edits are saved.\n- When building for production with `next build`, CSS files will be bundled into fewer minified `.css` files to reduce the number of network requests needed to retrieve styles.\n- If you disable JavaScript, styles will still be loaded in the production build (`next start`). However, JavaScript is still required for `next dev` to enable [Fast Refresh](/docs/architecture/fast-refresh).\n", "01-building-your-application/05-styling/index.mdx": "---\ntitle: Styling\ndescription: Learn the different ways you can style your Next.js application.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js supports different ways of styling your application, including:\n\n- **Global CSS**: Simple to use and familiar for those experienced with traditional CSS, but can lead to larger CSS bundles and difficulty managing styles as the application grows.\n- **CSS Modules**: Create locally scoped CSS classes to avoid naming conflicts and improve maintainability.\n- **Tailwind CSS**: A utility-first CSS framework that allows for rapid custom designs by composing utility classes.\n- **Sass**: A popular CSS preprocessor that extends CSS with features like variables, nested rules, and mixins.\n- **CSS-in-JS**: Embed CSS directly in your JavaScript components, enabling dynamic and scoped styling.\n\nLearn more about each approach by exploring their respective documentation:\n", "01-building-your-application/05-styling/03-css-in-js.mdx": "---\ntitle: CSS-in-JS\ndescription: Use CSS-in-JS libraries with Next.js\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\n<AppOnly>\n\n> **Warning:** CSS-in-JS libraries which require runtime JavaScript are not currently supported in Server Components. Using CSS-in-JS with newer React features like Server Components and Streaming requires library authors to support the latest version of React, including [concurrent rendering](https://react.dev/blog/2022/03/29/react-v18#what-is-concurrent-react).\n>\n> We're working with the React team on upstream APIs to handle CSS and JavaScript assets with support for React Server Components and streaming architecture.\n\nThe following libraries are supported in Client Components in the `app` directory (alphabetical):\n\n- [`chakra-ui`](https://chakra-ui.com/getting-started/nextjs-app-guide)\n- [`@fluentui/react-components`](https://react.fluentui.dev/?path=/docs/concepts-developer-server-side-rendering-next-js-appdir-setup--page)\n- [`kuma-ui`](https://kuma-ui.com)\n- [`@mui/material`](https://mui.com/material-ui/guides/next-js-app-router/)\n- [`@mui/joy`](https://mui.com/joy-ui/integrations/next-js-app-router/)\n- [`pandacss`](https://panda-css.com)\n- [`styled-jsx`](#styled-jsx)\n- [`styled-components`](#styled-components)\n- [`stylex`](https://stylexjs.com)\n- [`tamagui`](https://tamagui.dev/docs/guides/next-js#server-components)\n- [`tss-react`](https://tss-react.dev/)\n- [`vanilla-extract`](https://vanilla-extract.style)\n- [`ant-design`](https://ant.design/docs/react/use-with-next#using-app-router)\n\nThe following are currently working on support:\n\n- [`emotion`](https://github.com/emotion-js/emotion/issues/2928)\n\n> **Good to know**: We're testing out different CSS-in-JS libraries and we'll be adding more examples for libraries that support React 18 features and/or the `app` directory.\n\nIf you want to style Server Components, we recommend using [CSS Modules](/docs/app/building-your-application/styling/css-modules) or other solutions that output CSS files, like PostCSS or [Tailwind CSS](/docs/app/building-your-application/styling/tailwind-css).\n\n## Configuring CSS-in-JS in `app`\n\nConfiguring CSS-in-JS is a three-step opt-in process that involves:\n\n1. A **style registry** to collect all CSS rules in a render.\n2. The new `useServerInsertedHTML` hook to inject rules before any content that might use them.\n3. A Client Component that wraps your app with the style registry during initial server-side rendering.\n\n### `styled-jsx`\n\nUsing `styled-jsx` in Client Components requires using `v5.1.0`. First, create a new registry:\n\n```tsx filename=\"app/registry.tsx\" switcher\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n```\n\n```jsx filename=\"app/registry.js\" switcher\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { StyleRegistry, createStyleRegistry } from 'styled-jsx'\n\nexport default function StyledJsxRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [jsxStyleRegistry] = useState(() => createStyleRegistry())\n\n  useServerInsertedHTML(() => {\n    const styles = jsxStyleRegistry.styles()\n    jsxStyleRegistry.flush()\n    return <>{styles}</>\n  })\n\n  return <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>\n}\n```\n\nThen, wrap your [root layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required) with the registry:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport StyledJsxRegistry from './registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport StyledJsxRegistry from './registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledJsxRegistry>{children}</StyledJsxRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n[View an example here](https://github.com/vercel/app-playground/tree/main/app/styling/styled-jsx).\n\n### Styled Components\n\nBelow is an example of how to configure `styled-components@6` or newer:\n\nFirst, enable styled-components in `next.config.js`.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  compiler: {\n    styledComponents: true,\n  },\n}\n```\n\nThen, use the `styled-components` API to create a global registry component to collect all CSS style rules generated during a render, and a function to return those rules. Then use the `useServerInsertedHTML` hook to inject the styles collected in the registry into the `<head>` HTML tag in the root layout.\n\n```tsx filename=\"lib/registry.tsx\" switcher\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n```\n\n```jsx filename=\"lib/registry.js\" switcher\n'use client'\n\nimport React, { useState } from 'react'\nimport { useServerInsertedHTML } from 'next/navigation'\nimport { ServerStyleSheet, StyleSheetManager } from 'styled-components'\n\nexport default function StyledComponentsRegistry({ children }) {\n  // Only create stylesheet once with lazy initial state\n  // x-ref: https://reactjs.org/docs/hooks-reference.html#lazy-initial-state\n  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())\n\n  useServerInsertedHTML(() => {\n    const styles = styledComponentsStyleSheet.getStyleElement()\n    styledComponentsStyleSheet.instance.clearTag()\n    return <>{styles}</>\n  })\n\n  if (typeof window !== 'undefined') return <>{children}</>\n\n  return (\n    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>\n      {children}\n    </StyleSheetManager>\n  )\n}\n```\n\nWrap the `children` of the root layout with the style registry component:\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport StyledComponentsRegistry from './lib/registry'\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        <StyledComponentsRegistry>{children}</StyledComponentsRegistry>\n      </body>\n    </html>\n  )\n}\n```\n\n[View an example here](https://github.com/vercel/app-playground/tree/main/app/styling/styled-components).\n\n> **Good to know**:\n>\n> - During server rendering, styles will be extracted to a global registry and flushed to the `<head>` of your HTML. This ensures the style rules are placed before any content that might use them. In the future, we may use an upcoming React feature to determine where to inject the styles.\n> - During streaming, styles from each chunk will be collected and appended to existing styles. After client-side hydration is complete, `styled-components` will take over as usual and inject any further dynamic styles.\n> - We specifically use a Client Component at the top level of the tree for the style registry because it's more efficient to extract CSS rules this way. It avoids re-generating styles on subsequent server renders, and prevents them from being sent in the Server Component payload.\n> - For advanced use cases where you need to configure individual properties of styled-components compilation, you can read our [Next.js styled-components API reference](/docs/architecture/nextjs-compiler#styled-components) to learn more.\n\n</AppOnly>\n\n<PagesOnly>\n\n<details>\n  <summary>Examples</summary>\n\n- [Styled JSX](https://github.com/vercel/next.js/tree/canary/examples/with-styled-jsx)\n- [Styled Components](https://github.com/vercel/next.js/tree/canary/examples/with-styled-components)\n- [Emotion](https://github.com/vercel/next.js/tree/canary/examples/with-emotion)\n- [Linaria](https://github.com/vercel/next.js/tree/canary/examples/with-linaria)\n- [Styletron](https://github.com/vercel/next.js/tree/canary/examples/with-styletron)\n- [Cxs](https://github.com/vercel/next.js/tree/canary/examples/with-cxs)\n- [Fela](https://github.com/vercel/next.js/tree/canary/examples/with-fela)\n- [Stitches](https://github.com/vercel/next.js/tree/canary/examples/with-stitches)\n\n</details>\n\nIt's possible to use any existing CSS-in-JS solution. The simplest one is inline styles:\n\n```jsx\nfunction HiThere() {\n  return <p style={{ color: 'red' }}>hi there</p>\n}\n\nexport default HiThere\n```\n\nWe bundle [styled-jsx](https://github.com/vercel/styled-jsx) to provide support for isolated scoped CSS.\nThe aim is to support \"shadow CSS\" similar to Web Components, which unfortunately [do not support server-rendering and are JS-only](https://github.com/w3c/webcomponents/issues/71).\n\nSee the above examples for other popular CSS-in-JS solutions (like Styled Components).\n\nA component using `styled-jsx` looks like this:\n\n```jsx\nfunction HelloWorld() {\n  return (\n    <div>\n      Hello world\n      <p>scoped!</p>\n      <style jsx>{`\n        p {\n          color: blue;\n        }\n        div {\n          background: red;\n        }\n        @media (max-width: 600px) {\n          div {\n            background: blue;\n          }\n        }\n      `}</style>\n      <style global jsx>{`\n        body {\n          background: black;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nexport default HelloWorld\n```\n\nPlease see the [styled-jsx documentation](https://github.com/vercel/styled-jsx) for more examples.\n\n### Disabling JavaScript\n\nYes, if you disable JavaScript the CSS will still be loaded in the production build (`next start`). During development, we require JavaScript to be enabled to provide the best developer experience with [Fast Refresh](https://nextjs.org/blog/next-9-4#fast-refresh).\n\n</PagesOnly>\n", "01-building-your-application/05-styling/04-sass.mdx": "---\ntitle: Sass\ndescription: Style your Next.js application using Sass.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js has built-in support for integrating with Sass after the package is installed using both the `.scss` and `.sass` extensions. You can use component-level Sass via CSS Modules and the `.module.scss`or `.module.sass` extension.\n\nFirst, install [`sass`](https://github.com/sass/sass):\n\n```bash filename=\"Terminal\"\nnpm install --save-dev sass\n```\n\n> **Good to know**:\n>\n> Sass supports [two different syntaxes](https://sass-lang.com/documentation/syntax), each with their own extension.\n> The `.scss` extension requires you use the [SCSS syntax](https://sass-lang.com/documentation/syntax#scss),\n> while the `.sass` extension requires you use the [Indented Syntax (\"Sass\")](https://sass-lang.com/documentation/syntax#the-indented-syntax).\n>\n> If you're not sure which to choose, start with the `.scss` extension which is a superset of CSS, and doesn't require you learn the\n> Indented Syntax (\"Sass\").\n\n### Customizing Sass Options\n\nIf you want to configure the Sass compiler, use `sassOptions` in `next.config.js`.\n\n```js filename=\"next.config.js\"\nconst path = require('path')\n\nmodule.exports = {\n  sassOptions: {\n    includePaths: [path.join(__dirname, 'styles')],\n  },\n}\n```\n\n### Sass Variables\n\nNext.js supports Sass variables exported from CSS Module files.\n\nFor example, using the exported `primaryColor` Sass variable:\n\n```scss filename=\"app/variables.module.scss\"\n$primary-color: #64ff00;\n\n:export {\n  primaryColor: $primary-color;\n}\n```\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\n// maps to root `/` URL\n\nimport variables from './variables.module.scss'\n\nexport default function Page() {\n  return <h1 style={{ color: variables.primaryColor }}>Hello, Next.js!</h1>\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/_app.js\"\nimport variables from '../styles/variables.module.scss'\n\nexport default function MyApp({ Component, pageProps }) {\n  return (\n    <Layout color={variables.primaryColor}>\n      <Component {...pageProps} />\n    </Layout>\n  )\n}\n```\n\n</PagesOnly>\n", "01-building-your-application/10-deploying/01-production-checklist.mdx": "---\ntitle: Production Checklist\ndescription: Recommendations to ensure the best performance and user experience before taking your Next.js application to production.\n---\n\nBefore taking your Next.js application to production, there are some optimizations and patterns you should consider implementing for the best user experience, performance, and security.\n\nThis page provides best practices that you can use as a reference when [building your application](#during-development), [before going to production](#before-going-to-production), and [after deployment](#after-deployment) - as well as the [automatic Next.js optimizations](#automatic-optimizations) you should be aware of.\n\n## Automatic optimizations\n\nThese Next.js optimizations are enabled by default and require no configuration:\n\n<AppOnly>\n\n- **[Server Components](/docs/app/building-your-application/rendering/server-components):** Next.js uses Server Components by default. Server Components run on the server, and don't require JavaScript to render on the client. As such, they have no impact on the size of your client-side JavaScript bundles. You can then use [Client Components](/docs/app/building-your-application/rendering/client-components) as needed for interactivity.\n- **[Code-splitting](/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works):** Server Components enable automatic code-splitting by route segments. You may also consider [lazy loading](/docs/app/building-your-application/optimizing/lazy-loading) Client Components and third-party libraries, where appropriate.\n- **[Prefetching](/docs/app/building-your-application/routing/linking-and-navigating#2-prefetching):** When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.\n- **[Static Rendering](/docs/app/building-your-application/rendering/server-components#static-rendering-default):** Next.js statically renders Server and Client Components on the server at build time and caches the rendered result to improve your application's performance. You can opt into [Dynamic Rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering) for specific routes, where appropriate. {/* TODO: Update when PPR is stable */}\n- **[Caching](/docs/app/building-your-application/caching):** Next.js caches data requests, the rendered result of Server and Client Components, static assets, and more, to reduce the number of network requests to your server, database, and backend services. You may opt out of caching, where appropriate.\n\n</AppOnly>\n\n<PagesOnly>\n\n- **[Code-splitting](/docs/pages/building-your-application/routing/pages-and-layouts):** Next.js automatically code-splits your application code by pages. This means only the code needed for the current page is loaded on navigation. You may also consider [lazy loading](/docs/pages/building-your-application/optimizing/lazy-loading) third-party libraries, where appropriate.\n- **[Prefetching](/docs/pages/api-reference/components/link#prefetch):** When a link to a new route enters the user's viewport, Next.js prefetches the route in background. This makes navigation to new routes almost instant. You can opt out of prefetching, where appropriate.\n- **[Automatic Static Optimization](/docs/pages/building-your-application/rendering/automatic-static-optimization):** Next.js automatically determines that a page is static (can be pre-rendered) if it has no blocking data requirements. Optimized pages can be cached, and served to the end-user from multiple CDN locations. You may opt into [Server-side Rendering](/docs/pages/building-your-application/data-fetching/get-server-side-props), where appropriate.\n\n</PagesOnly>\n\nThese defaults aim to improve your application's performance, and reduce the cost and amount of data transferred on each network request.\n\n## During development\n\nWhile building your application, we recommend using the following features to ensure the best performance and user experience:\n\n### Routing and rendering\n\n<AppOnly>\n\n- **[Layouts](/docs/app/building-your-application/routing/layouts-and-templates#layouts):** Use layouts to share UI across pages and enable [partial rendering](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering) on navigation.\n- **[`<Link>` component](/docs/app/building-your-application/routing/linking-and-navigating#link-component):** Use the `<Link>` component for [client-side navigation and prefetching](/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works).\n- **[Error Handling](/docs/app/building-your-application/routing/error-handling):** Gracefully handle [catch-all errors](/docs/app/building-your-application/routing/error-handling) and [404 errors](/docs/app/api-reference/file-conventions/not-found) in production by creating custom error pages.\n- **[Composition Patterns](/docs/app/building-your-application/rendering/composition-patterns):** Follow the recommended composition patterns for Server and Client Components, and check the placement of your [`\"use client\"` boundaries](/docs/app/building-your-application/rendering/composition-patterns#moving-client-components-down-the-tree) to avoid unnecessarily increasing your client-side JavaScript bundle.\n- **[Dynamic Functions](/docs/app/building-your-application/rendering/server-components#dynamic-functions):** Be aware that dynamic functions like [`cookies()`](/docs/app/api-reference/functions/cookies) and the [`searchParams`](/docs/app/api-reference/file-conventions/page#searchparams-optional) prop will opt the entire route into [Dynamic Rendering](/docs/app/building-your-application/rendering/server-components#dynamic-rendering) (or your whole application if used in the [Root Layout](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required)). Ensure dynamic function usage is intentional and wrap them in `<Suspense>` boundaries where appropriate.\n\n> **Good to know**: [Partial Prerendering (Experimental)](/blog/next-14#partial-prerendering-preview) will allow parts of a route to be dynamic without opting the whole route into dynamic rendering.\n\n</AppOnly>\n\n<PagesOnly>\n\n- **[`<Link>` component](/docs/pages/building-your-application/routing/linking-and-navigating):** Use the `<Link>` component for client-side navigation and prefetching.\n- **[Custom Errors](/docs/pages/building-your-application/routing/custom-error):** Gracefully handle [500](/docs/pages/building-your-application/routing/custom-error#500-page) and [404 errors](/docs/pages/building-your-application/routing/custom-error#404-page)\n\n</PagesOnly>\n\n### Data fetching and caching\n\n<AppOnly>\n\n- **[Server Components](/docs/app/building-your-application/data-fetching/patterns#fetching-data-on-the-server):** Leverage the benefits of fetching data on the server using Server Components.\n- **[Route Handlers](/docs/app/building-your-application/routing/route-handlers):** Use Route Handlers to access your backend resources from Client Components. But do not call Route Handlers from Server Components to avoid an additional server request.\n- **[Streaming](/docs/app/building-your-application/routing/loading-ui-and-streaming):** Use Loading UI and React Suspense to progressively send UI from the server to the client, and prevent the whole route from blocking while data is being fetched.\n- **[Parallel Data Fetching](/docs/app/building-your-application/data-fetching/patterns#parallel-and-sequential-data-fetching):** Reduce network waterfalls by fetching data in parallel, where appropriate. Also, consider [preloading data](/docs/app/building-your-application/data-fetching/patterns#preloading-data) where appropriate.\n- **[Data Caching](/docs/app/building-your-application/caching#data-cache):** Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't use `fetch` are [cached](/docs/app/api-reference/functions/unstable_cache).\n- **[Static Images](/docs/app/building-your-application/optimizing/static-assets):** Use the `public` directory to automatically cache your application's static assets, e.g. images.\n\n</AppOnly>\n\n<PagesOnly>\n\n- **[API Routes](/docs/pages/building-your-application/routing/api-routes):** Use Route Handlers to access your backend resources, and prevent sensitive secrets from being exposed to the client.\n- **[Data Caching](/docs/pages/building-your-application/data-fetching/get-static-props):** Verify whether your data requests are being cached or not, and opt into caching, where appropriate. Ensure requests that don't use `getStaticProps` are cached where appropriate.\n- **[Incremental Static Regeneration](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration):** Use Incremental Static Regeneration to update static pages after they've been built, without rebuilding your entire site.\n- **[Static Images](/docs/pages/building-your-application/optimizing/static-assets):** Use the `public` directory to automatically cache your application's static assets, e.g. images.\n\n</PagesOnly>\n\n### UI and accessibility\n\n<AppOnly>\n\n- **[Forms and Validation](/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms):** Use Server Actions to handle form submissions, server-side validation, and handle errors.\n\n</AppOnly>\n\n- **[Font Module](/docs/app/building-your-application/optimizing/fonts):** Optimize fonts by using the Font Module, which automatically hosts your font files with other static assets, removes external network requests, and reduces [layout shift](https://web.dev/articles/cls).\n- **[`<Image>` Component](/docs/app/building-your-application/optimizing/images):** Optimize images by using the Image Component, which automatically optimizes images, prevents layout shift, and serves them in modern formats like WebP or AVIF.\n- **[`<Script>` Component](/docs/app/building-your-application/optimizing/scripts):** Optimize third-party scripts by using the Script Component, which automatically defers scripts and prevents them from blocking the main thread.\n- **[ESLint](/docs/architecture/accessibility#linting):** Use the built-in `eslint-plugin-jsx-a11y` plugin to catch accessibility issues early.\n\n### Security\n\n<AppOnly>\n\n- **[Tainting](/docs/app/building-your-application/data-fetching/patterns#preventing-sensitive-data-from-being-exposed-to-the-client):** Prevent sensitive data from being exposed to the client by tainting data objects and/or specific values.\n- **[Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations#authentication-and-authorization):** Ensure users are authorized to call Server Actions. Review the the recommended [security practices](/blog/security-nextjs-server-components-actions).\n\n</AppOnly>\n\n- **[Environment Variables](/docs/app/building-your-application/configuring/environment-variables):** Ensure your `.env.*` files are added to `.gitignore` and only public variables are prefixed with `NEXT_PUBLIC_`.\n- **[Content Security Policy](/docs/app/building-your-application/configuring/content-security-policy):** Consider adding a Content Security Policy to protect your application against various security threats such as cross-site scripting, clickjacking, and other code injection attacks.\n\n### Metadata and SEO\n\n<AppOnly>\n\n- **[Metadata API](/docs/app/building-your-application/optimizing/metadata):** Use the Metadata API to improve your application's Search Engine Optimization (SEO) by adding page titles, descriptions, and more.\n- **[Open Graph (OG) images](/docs/app/api-reference/file-conventions/metadata/opengraph-image):** Create OG images to prepare your application for social sharing.\n- **[Sitemaps](/docs/app/api-reference/functions/generate-sitemaps) and [Robots](/docs/app/api-reference/file-conventions/metadata/robots):** Help Search Engines crawl and index your pages by generating sitemaps and robots files.\n\n</AppOnly>\n\n<PagesOnly>\n\n- **[`<Head>` Component](/docs/pages/api-reference/components/head):** Use the `next/head` component to add page titles, descriptions, and more.\n\n</PagesOnly>\n\n### Type safety\n\n- **TypeScript and [TS Plugin](/docs/app/building-your-application/configuring/typescript):** Use TypeScript and the TypeScript plugin for better type-safety, and to help you catch errors early.\n\n## Before going to production\n\nBefore going to production, you can run `next build` to build your application locally and catch any build errors, then run `next start` to measure the performance of your application in a production-like environment.\n\n### Core Web Vitals\n\n- **[Lighthouse](https://developers.google.com/web/tools/lighthouse):** Run lighthouse in incognito to gain a better understanding of how your users will experience your site, and to identify areas for improvement. This is a simulated test and should be paired with looking at field data (such as Core Web Vitals).\n\n<AppOnly>\n\n- **[`useReportWebVitals` hook](/docs/app/api-reference/functions/use-report-web-vitals):** Use this hook to send [Core Web Vitals](https://web.dev/articles/vitals) data to analytics tools.\n\n</AppOnly>\n\n### Analyzing bundles\n\nUse the [`@next/bundle-analyzer` plugin](/docs/app/building-your-application/optimizing/bundle-analyzer) to analyze the size of your JavaScript bundles and identify large modules and dependencies that might be impacting your application's performance.\n\nAdditionally, the following tools can you understand the impact of adding new dependencies to your application:\n\n- [Import Cost](https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost)\n- [Package Phobia](https://packagephobia.com/)\n- [Bundle Phobia](https://bundlephobia.com/)\n- [bundlejs](https://bundlejs.com/)\n\n## After deployment\n\nDepending on where you deploy your application, you might have access to additional tools and integrations to help you monitor and improve your application's performance.\n\nFor Vercel deployments, we recommend the following:\n\n- **[Analytics](https://vercel.com/analytics?utm_source=next-site&utm_campaign=nextjs-docs&utm_medium=docs):** A built-in analytics dashboard to help you understand your application's traffic, including the number of unique visitors, page views, and more.\n- **[Speed Insights](https://vercel.com/docs/speed-insights?utm_source=next-site&utm_campaign=nextjs-docs&utm_medium=docs):** Real-world performance insights based on visitor data, offering a practical view of how your website is performing in the field.\n- **[Logging](https://vercel.com/docs/observability/runtime-logs?utm_source=next-site&utm_campaign=nextjs-docs&utm_medium=docs):** Runtime and Activity logs to help you debug issues and monitor your application in production. Alternatively, see the [integrations page](https://vercel.com/integrations?utm_source=next-site&utm_campaign=nextjs-docs&utm_medium=docs) for a list of third-party tools and services.\n\n> **Good to know:**\n>\n> To get a comprehensive understanding of the best practices for production deployments on Vercel, including detailed strategies for improving website performance, refer to the [Vercel Production Checklist](https://vercel.com/docs/production-checklist?utm_source=next-site&utm_campaign=nextjs-docs&utm_medium=docs).\n\nFollowing these recommendations will help you build a faster, more reliable, and secure application for your users.\n", "01-building-your-application/10-deploying/index.mdx": "---\ntitle: Deploying\ndescription: Learn how to deploy your Next.js app to production, either managed or self-hosted.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nCongratulations, it's time to ship to production.\n\nYou can deploy [managed Next.js with Vercel](#managed-nextjs-with-vercel), or self-host on a Node.js server, Docker image, or even static HTML files. When deploying using `next start`, all Next.js features are supported.\n\n## Production Builds\n\nRunning `next build` generates an optimized version of your application for production. HTML, CSS, and JavaScript files are created based on your pages. JavaScript is **compiled** and browser bundles are **minified** using the [Next.js Compiler](/docs/architecture/nextjs-compiler) to help achieve the best performance and support [all modern browsers](/docs/architecture/supported-browsers).\n\nNext.js produces a standard deployment output used by managed and self-hosted Next.js. This ensures all features are supported across both methods of deployment. In the next major version, we will be transforming this output into our [Build Output API specification](https://vercel.com/docs/build-output-api/v3?utm_source=next-site&utm_medium=docs&utm_campaign=next-website).\n\n## Managed Next.js with Vercel\n\n[Vercel](https://vercel.com/docs/frameworks/nextjs?utm_source=next-site&utm_medium=docs&utm_campaign=next-website), the creators and maintainers of Next.js, provide managed infrastructure and a developer experience platform for your Next.js applications.\n\nDeploying to Vercel is zero-configuration and provides additional enhancements for scalability, availability, and performance globally. However, all Next.js features are still supported when self-hosted.\n\nLearn more about [Next.js on Vercel](https://vercel.com/docs/frameworks/nextjs?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) or [deploy a template for free](https://vercel.com/templates/next.js?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) to try it out.\n\n## Self-Hosting\n\nYou can self-host Next.js in three different ways:\n\n- [A Node.js server](#nodejs-server)\n- [A Docker container](#docker-image)\n- [A static export](#static-html-export)\n\n### Node.js Server\n\nNext.js can be deployed to any hosting provider that supports Node.js. Ensure your `package.json` has the `\"build\"` and `\"start\"` scripts:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\nThen, run `npm run build` to build your application. Finally, run `npm run start` to start the Node.js server. This server supports all Next.js features.\n\n### Docker Image\n\nNext.js can be deployed to any hosting provider that supports [Docker](https://www.docker.com/) containers. You can use this approach when deploying to container orchestrators such as [Kubernetes](https://kubernetes.io/) or when running inside a container in any cloud provider.\n\n1. [Install Docker](https://docs.docker.com/get-docker/) on your machine\n2. [Clone our example](https://github.com/vercel/next.js/tree/canary/examples/with-docker) (or the [multi-environment example](https://github.com/vercel/next.js/tree/canary/examples/with-docker-multi-env))\n3. Build your container: `docker build -t nextjs-docker .`\n4. Run your container: `docker run -p 3000:3000 nextjs-docker`\n\nNext.js through Docker supports all Next.js features.\n\n### Static HTML Export\n\nNext.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n\nSince Next.js supports this [static export](/docs/app/building-your-application/deploying/static-exports), it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets. This includes tools like AWS S3, Nginx, or Apache.\n\nRunning as a [static export](/docs/app/building-your-application/deploying/static-exports) does not support Next.js features that require a server. [Learn more](/docs/app/building-your-application/deploying/static-exports#unsupported-features).\n\n> **Good to know:**\n>\n> - [Server Components](/docs/app/building-your-application/rendering/server-components) are supported with static exports.\n\n## Features\n\n### Image Optimization\n\n[Image Optimization](/docs/app/building-your-application/optimizing/images) through `next/image` works self-hosted with zero configuration when deploying using `next start`. If you would prefer to have a separate service to optimize images, you can [configure an image loader](/docs/app/building-your-application/optimizing/images#loaders).\n\nImage Optimization can be used with a [static export](/docs/app/building-your-application/deploying/static-exports#image-optimization) by defining a custom image loader in `next.config.js`. Note that images are optimized at runtime, not during the build.\n\n> **Good to know:**\n>\n> - When self-hosting, consider installing `sharp` for more performant [Image Optimization](/docs/pages/building-your-application/optimizing/images) in your production environment by running `npm install sharp` in your project directory. On Linux platforms, `sharp` may require [additional configuration](https://sharp.pixelplumbing.com/install#linux-memory-allocator) to prevent excessive memory usage.\n> - Learn more about the [caching behavior of optimized images](/docs/app/api-reference/components/image#caching-behavior) and how to configure the TTL.\n> - You can also [disable Image Optimization](/docs/app/api-reference/components/image#unoptimized) and still retain other benefits of using `next/image` if you prefer. For example, if you are optimizing images yourself separately.\n\n### Middleware\n\n[Middleware](/docs/app/building-your-application/routing/middleware) works self-hosted with zero configuration when deploying using `next start`. Since it requires access to the incoming request, it is not supported when using a [static export](/docs/app/building-your-application/deploying/static-exports).\n\nMiddleware uses a [runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes) that is a subset of all available Node.js APIs to help ensure low latency, since it may run in front of every route or asset in your application. This runtime does not require running \u201cat the edge\u201d and works in a single-region server. Additional configuration and infrastructure are required to run Middleware in multiple regions.\n\nIf you are looking to add logic (or use an external package) that requires all Node.js APIs, you might be able to move this logic to a [layout](/docs/app/building-your-application/routing/layouts-and-templates#layouts) as a [Server Component](/docs/app/building-your-application/rendering/server-components). For example, checking [headers](/docs/app/api-reference/functions/headers) and [redirecting](/docs/app/api-reference/functions/redirect). You can also use headers, cookies, or query parameters to [redirect](/docs/app/api-reference/next-config-js/redirects#header-cookie-and-query-matching) or [rewrite](/docs/app/api-reference/next-config-js/rewrites#header-cookie-and-query-matching) through `next.config.js`. If that does not work, you can also use a [custom server](/docs/pages/building-your-application/configuring/custom-server).\n\n### Environment Variables\n\nNext.js can support both build time and runtime environment variables.\n\n**By default, environment variables are only available on the server**. To expose an environment variable to the browser, it must be prefixed with `NEXT_PUBLIC_`. However, these public environment variables will be inlined into the JavaScript bundle during `next build`.\n\nTo read runtime environment variables, we recommend using `getServerSideProps` or [incrementally adopting the App Router](/docs/app/building-your-application/upgrading/app-router-migration). With the App Router, we can safely read environment variables on the server during dynamic rendering. This allows you to use a singular Docker image that can be promoted through multiple environments with different values.\n\n```jsx\nimport { unstable_noStore as noStore } from 'next/cache';\n\nexport default function Component() {\n  noStore();\n  // cookies(), headers(), and other dynamic functions\n  // will also opt into dynamic rendering, making\n  // this env variable is evaluated at runtime\n  const value = process.env.MY_VALUE\n  ...\n}\n```\n\n> **Good to know:**\n>\n> - You can run code on server startup using the [`register` function](/docs/app/building-your-application/optimizing/instrumentation).\n> - We do not recommend using the [runtimeConfig](/docs/pages/api-reference/next-config-js/runtime-configuration) option, as this does not work with the standalone output mode. Instead, we recommend [incrementally adopting](/docs/app/building-your-application/upgrading/app-router-migration) the App Router.\n\n### Caching and ISR\n\nNext.js can cache responses, generated static pages, build outputs, and other static assets like images, fonts, and scripts.\n\nCaching and revalidating pages (using Incremental Static Regeneration (ISR) or newer functions in the App Router) use the **same shared cache**. By default, this cache is stored to the filesystem (on disk) on your Next.js server. **This works automatically when self-hosting** using both the Pages and App Router.\n\nYou can configure the Next.js cache location if you want to persist cached pages and data to durable storage, or share the cache across multiple containers or instances of your Next.js application.\n\n#### Automatic Caching\n\n- Next.js sets the `Cache-Control` header of `public, max-age=31536000, immutable` to truly immutable assets. It cannot be overridden. These immutable files contain a SHA-hash in the file name, so they can be safely cached indefinitely. For example, [Static Image Imports](/docs/app/building-your-application/optimizing/images#local-images). You can [configure the TTL](/docs/app/api-reference/components/image#caching-behavior) for images.\n- Incremental Static Regeneration (ISR) sets the `Cache-Control` header of `s-maxage: <revalidate in getStaticProps>, stale-while-revalidate`. This revalidation time is defined in your [`getStaticProps` function](/docs/pages/building-your-application/data-fetching/get-static-props) in seconds. If you set `revalidate: false`, it will default to a one-year cache duration.\n- Dynamically rendered pages set a `Cache-Control` header of `private, no-cache, no-store, max-age=0, must-revalidate` to prevent user-specific data from being cached. This applies to both the App Router and Pages Router. This also includes [Draft Mode](/docs/app/building-your-application/configuring/draft-mode).\n\n#### Static Assets\n\nIf you want to host static assets on a different domain or CDN, you can use the `assetPrefix` [configuration](/docs/app/api-reference/next-config-js/assetPrefix) in `next.config.js`. Next.js will use this asset prefix when retrieving JavaScript or CSS files. Separating your assets to a different domain does come with the downside of extra time spent on DNS and TLS resolution.\n\n[Learn more about `assetPrefix`](/docs/app/api-reference/next-config-js/assetPrefix).\n\n#### Configuring Caching\n\nBy default, generated cache assets will be stored in memory (defaults to 50mb) and on disk. If you are hosting Next.js using a container orchestration platform like Kubernetes, each pod will have a copy of the cache. To prevent stale data from being shown since the cache is not shared between pods by default, you can configure the Next.js cache to provide a cache handler and disable in-memory caching.\n\nTo configure the ISR/Data Cache location when self-hosting, you can configure a custom handler in your `next.config.js` file:\n\n```jsx filename=\"next.config.js\"\nmodule.exports = {\n  cacheHandler: require.resolve('./cache-handler.js'),\n  cacheMaxMemorySize: 0, // disable default in-memory caching\n}\n```\n\nThen, create `cache-handler.js` in the root of your project, for example:\n\n```jsx filename=\"cache-handler.js\"\nconst cache = new Map()\n\nmodule.exports = class CacheHandler {\n  constructor(options) {\n    this.options = options\n  }\n\n  async get(key) {\n    // This could be stored anywhere, like durable storage\n    return cache.get(key)\n  }\n\n  async set(key, data, ctx) {\n    // This could be stored anywhere, like durable storage\n    cache.set(key, {\n      value: data,\n      lastModified: Date.now(),\n      tags: ctx.tags,\n    })\n  }\n\n  async revalidateTag(tag) {\n    // Iterate over all entries in the cache\n    for (let [key, value] of cache) {\n      // If the value's tags include the specified tag, delete this entry\n      if (value.tags.includes(tag)) {\n        cache.delete(key)\n      }\n    }\n  }\n}\n```\n\nUsing a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application. For instance, you can save the cached values anywhere, like [Redis](https://github.com/vercel/next.js/tree/canary/examples/cache-handler-redis) or AWS S3.\n\n> **Good to know:**\n>\n> - `revalidatePath` is a convenience layer on top of cache tags. Calling `revalidatePath` will call the `revalidateTag` function with a special default tag for the provided page.\n\n### Build Cache\n\nNext.js generates an ID during `next build` to identify which version of your application is being served. The same build should be used and boot up multiple containers.\n\nIf you are rebuilding for each stage of your environment, you will need to generate a consistent build ID to use between containers. Use the `generateBuildId` command in `next.config.js`:\n\n```jsx filename=\"next.config.js\"\nmodule.exports = {\n  generateBuildId: async () => {\n    // This could be anything, using the latest git hash\n    return process.env.GIT_HASH\n  },\n}\n```\n\n### Version Skew\n\nNext.js will automatically mitigate most instances of [version skew](https://www.industrialempathy.com/posts/version-skew/) and automatically reload the application to retrieve new assets when detected. For example, if there is a mismatch in the `deploymentId`, transitions between pages will perform a hard navigation versus using a prefetched value.\n\nWhen the application is reloaded, there may be a loss of application state if it's not designed to persist between page navigations. For example, using URL state or local storage would persist state after a page refresh. However, component state like `useState` would be lost in such navigations.\n\nVercel provides additional [skew protection](https://vercel.com/docs/deployments/skew-protection?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) for Next.js applications to ensure assets and functions from the previous version are still available to older clients, even after the new version is deployed.\n\nYou can manually configure the `deploymentId` property in your `next.config.js` file to ensure each request uses either `?dpl` query string or `x-deployment-id` header.\n\n<AppOnly>\n\n### Streaming and Suspense\n\nThe Next.js App Router supports [streaming responses](/docs/app/building-your-application/routing/loading-ui-and-streaming) when self-hosting. If you are using Nginx or a similar proxy, you will need to configure it to disable buffering to enable streaming.\n\nFor example, you can disable buffering in Nginx by setting `X-Accel-Buffering` to `no`:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async headers() {\n    return [\n      {\n        source: '/:path*{/}?',\n        headers: [\n          {\n            key: 'X-Accel-Buffering',\n            value: 'no',\n          },\n        ],\n      },\n    ]\n  },\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n## Manual Graceful Shutdowns\n\nWhen self-hosting, you might want to run code when the server shuts down on `SIGTERM` or `SIGINT` signals.\n\nYou can set the env variable `NEXT_MANUAL_SIG_HANDLE` to `true` and then register a handler for that signal inside your `_document.js` file. You will need to register the environment variable directly in the `package.json` script, and not in the `.env` file.\n\n> **Good to know**: Manual signal handling is not available in `next dev`.\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"NEXT_MANUAL_SIG_HANDLE=true next start\"\n  }\n}\n```\n\n```js filename=\"pages/_document.js\"\nif (process.env.NEXT_MANUAL_SIG_HANDLE) {\n  process.on('SIGTERM', () => {\n    console.log('Received SIGTERM: cleaning up')\n    process.exit(0)\n  })\n  process.on('SIGINT', () => {\n    console.log('Received SIGINT: cleaning up')\n    process.exit(0)\n  })\n}\n```\n\n</PagesOnly>\n", "01-building-your-application/10-deploying/02-static-exports.mdx": "---\ntitle: Static Exports\ndescription: Next.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nNext.js enables starting as a static site or Single-Page Application (SPA), then later optionally upgrading to use features that require a server.\n\nWhen running `next build`, Next.js generates an HTML file per route. By breaking a strict SPA into individual HTML files, Next.js can avoid loading unnecessary JavaScript code on the client-side, reducing the bundle size and enabling faster page loads.\n\nSince Next.js supports this static export, it can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets.\n\n<PagesOnly>\n\n> **Good to know**: We recommend using the App Router for enhanced static export support.\n\n</PagesOnly>\n\n## Configuration\n\nTo enable a static export, change the output mode inside `next.config.js`:\n\n```js filename=\"next.config.js\" highlight={5}\n/**\n * @type {import('next').NextConfig}\n */\nconst nextConfig = {\n  output: 'export',\n\n  // Optional: Change links `/me` -> `/me/` and emit `/me.html` -> `/me/index.html`\n  // trailingSlash: true,\n\n  // Optional: Prevent automatic `/me` -> `/me/`, instead preserve `href`\n  // skipTrailingSlashRedirect: true,\n\n  // Optional: Change the output directory `out` -> `dist`\n  // distDir: 'dist',\n}\n\nmodule.exports = nextConfig\n```\n\nAfter running `next build`, Next.js will produce an `out` folder which contains the HTML/CSS/JS assets for your application.\n\n<PagesOnly>\n\nYou can utilize [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props) and [`getStaticPaths`](/docs/pages/building-your-application/data-fetching/get-static-paths) to generate an HTML file for each page in your `pages` directory (or more for [dynamic routes](/docs/app/building-your-application/routing/dynamic-routes)).\n\n</PagesOnly>\n\n<AppOnly>\n\n## Supported Features\n\nThe core of Next.js has been designed to support static exports.\n\n### Server Components\n\nWhen you run `next build` to generate a static export, Server Components consumed inside the `app` directory will run during the build, similar to traditional static-site generation.\n\nThe resulting component will be rendered into static HTML for the initial page load and a static payload for client navigation between routes. No changes are required for your Server Components when using the static export, unless they consume [dynamic server functions](#unsupported-features).\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default async function Page() {\n  // This fetch will run on the server during `next build`\n  const res = await fetch('https://api.example.com/...')\n  const data = await res.json()\n\n  return <main>...</main>\n}\n```\n\n### Client Components\n\nIf you want to perform data fetching on the client, you can use a Client Component with [SWR](https://github.com/vercel/swr) to memoize requests.\n\n```tsx filename=\"app/other/page.tsx\" switcher\n'use client'\n\nimport useSWR from 'swr'\n\nconst fetcher = (url: string) => fetch(url).then((r) => r.json())\n\nexport default function Page() {\n  const { data, error } = useSWR(\n    `https://jsonplaceholder.typicode.com/posts/1`,\n    fetcher\n  )\n  if (error) return 'Failed to load'\n  if (!data) return 'Loading...'\n\n  return data.title\n}\n```\n\n```jsx filename=\"app/other/page.js\" switcher\n'use client'\n\nimport useSWR from 'swr'\n\nconst fetcher = (url) => fetch(url).then((r) => r.json())\n\nexport default function Page() {\n  const { data, error } = useSWR(\n    `https://jsonplaceholder.typicode.com/posts/1`,\n    fetcher\n  )\n  if (error) return 'Failed to load'\n  if (!data) return 'Loading...'\n\n  return data.title\n}\n```\n\nSince route transitions happen client-side, this behaves like a traditional SPA. For example, the following index route allows you to navigate to different posts on the client:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <>\n      <h1>Index Page</h1>\n      <hr />\n      <ul>\n        <li>\n          <Link href=\"/post/1\">Post 1</Link>\n        </li>\n        <li>\n          <Link href=\"/post/2\">Post 2</Link>\n        </li>\n      </ul>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <>\n      <h1>Index Page</h1>\n      <p>\n        <Link href=\"/other\">Other Page</Link>\n      </p>\n    </>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n## Supported Features\n\nThe majority of core Next.js features needed to build a static site are supported, including:\n\n- [Dynamic Routes when using `getStaticPaths`](/docs/app/building-your-application/routing/dynamic-routes)\n- Prefetching with `next/link`\n- Preloading JavaScript\n- [Dynamic Imports](/docs/pages/building-your-application/optimizing/lazy-loading)\n- Any styling options (e.g. CSS Modules, styled-jsx)\n- [Client-side data fetching](/docs/pages/building-your-application/data-fetching/client-side)\n- [`getStaticProps`](/docs/pages/building-your-application/data-fetching/get-static-props)\n- [`getStaticPaths`](/docs/pages/building-your-application/data-fetching/get-static-paths)\n\n</PagesOnly>\n\n### Image Optimization\n\n[Image Optimization](/docs/app/building-your-application/optimizing/images) through `next/image` can be used with a static export by defining a custom image loader in `next.config.js`. For example, you can optimize images with a service like Cloudinary:\n\n```js filename=\"next.config.js\"\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'export',\n  images: {\n    loader: 'custom',\n    loaderFile: './my-loader.ts',\n  },\n}\n\nmodule.exports = nextConfig\n```\n\nThis custom loader will define how to fetch images from a remote source. For example, the following loader will construct the URL for Cloudinary:\n\n```ts filename=\"my-loader.ts\" switcher\nexport default function cloudinaryLoader({\n  src,\n  width,\n  quality,\n}: {\n  src: string\n  width: number\n  quality?: number\n}) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n```\n\n```js filename=\"my-loader.js\" switcher\nexport default function cloudinaryLoader({ src, width, quality }) {\n  const params = ['f_auto', 'c_limit', `w_${width}`, `q_${quality || 'auto'}`]\n  return `https://res.cloudinary.com/demo/image/upload/${params.join(\n    ','\n  )}${src}`\n}\n```\n\nYou can then use `next/image` in your application, defining relative paths to the image in Cloudinary:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Image from 'next/image'\n\nexport default function Page() {\n  return <Image alt=\"turtles\" src=\"/turtles.jpg\" width={300} height={300} />\n}\n```\n\n<AppOnly>\n\n### Route Handlers\n\nRoute Handlers will render a static response when running `next build`. Only the `GET` HTTP verb is supported. This can be used to generate static HTML, JSON, TXT, or other files from cached or uncached data. For example:\n\n```ts filename=\"app/data.json/route.ts\" switcher\nexport async function GET() {\n  return Response.json({ name: 'Lee' })\n}\n```\n\n```js filename=\"app/data.json/route.js\" switcher\nexport async function GET() {\n  return Response.json({ name: 'Lee' })\n}\n```\n\nThe above file `app/data.json/route.ts` will render to a static file during `next build`, producing `data.json` containing `{ name: 'Lee' }`.\n\nIf you need to read dynamic values from the incoming request, you cannot use a static export.\n\n### Browser APIs\n\nClient Components are pre-rendered to HTML during `next build`. Because [Web APIs](https://developer.mozilla.org/docs/Web/API) like `window`, `localStorage`, and `navigator` are not available on the server, you need to safely access these APIs only when running in the browser. For example:\n\n```jsx\n'use client';\n\nimport { useEffect } from 'react';\n\nexport default function ClientComponent() {\n  useEffect(() => {\n    // You now have access to `window`\n    console.log(window.innerHeight);\n  }, [])\n\n  return ...;\n}\n```\n\n</AppOnly>\n\n## Unsupported Features\n\nFeatures that require a Node.js server, or dynamic logic that cannot be computed during the build process, are **not** supported:\n\n<AppOnly>\n\n- [Dynamic Routes](/docs/app/building-your-application/routing/dynamic-routes) with `dynamicParams: true`\n- [Dynamic Routes](/docs/app/building-your-application/routing/dynamic-routes) without `generateStaticParams()`\n- [Route Handlers](/docs/app/building-your-application/routing/route-handlers) that rely on Request\n- [Cookies](/docs/app/api-reference/functions/cookies)\n- [Rewrites](/docs/app/api-reference/next-config-js/rewrites)\n- [Redirects](/docs/app/api-reference/next-config-js/redirects)\n- [Headers](/docs/app/api-reference/next-config-js/headers)\n- [Middleware](/docs/app/building-your-application/routing/middleware)\n- [Incremental Static Regeneration](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating)\n- [Image Optimization](/docs/app/building-your-application/optimizing/images) with the default `loader`\n- [Draft Mode](/docs/app/building-your-application/configuring/draft-mode)\n\nAttempting to use any of these features with `next dev` will result in an error, similar to setting the [`dynamic`](/docs/app/api-reference/file-conventions/route-segment-config#dynamic) option to `error` in the root layout.\n\n```jsx\nexport const dynamic = 'error'\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n- [Internationalized Routing](/docs/pages/building-your-application/routing/internationalization)\n- [API Routes](/docs/pages/building-your-application/routing/api-routes)\n- [Rewrites](/docs/pages/api-reference/next-config-js/rewrites)\n- [Redirects](/docs/pages/api-reference/next-config-js/redirects)\n- [Headers](/docs/pages/api-reference/next-config-js/headers)\n- [Middleware](/docs/pages/building-your-application/routing/middleware)\n- [Incremental Static Regeneration](/docs/pages/building-your-application/data-fetching/incremental-static-regeneration)\n- [Image Optimization](/docs/pages/building-your-application/optimizing/images) with the default `loader`\n- [Draft Mode](/docs/pages/building-your-application/configuring/draft-mode)\n- [`getStaticPaths` with `fallback: true`](/docs/pages/api-reference/functions/get-static-paths#fallback-true)\n- [`getStaticPaths` with `fallback: 'blocking'`](/docs/pages/api-reference/functions/get-static-paths#fallback-blocking)\n- [`getServerSideProps`](/docs/pages/building-your-application/data-fetching/get-server-side-props)\n\n</PagesOnly>\n\n## Deploying\n\nWith a static export, Next.js can be deployed and hosted on any web server that can serve HTML/CSS/JS static assets.\n\nWhen running `next build`, Next.js generates the static export into the `out` folder. For example, let's say you have the following routes:\n\n- `/`\n- `/blog/[id]`\n\nAfter running `next build`, Next.js will generate the following files:\n\n- `/out/index.html`\n- `/out/404.html`\n- `/out/blog/post-1.html`\n- `/out/blog/post-2.html`\n\nIf you are using a static host like Nginx, you can configure rewrites from incoming requests to the correct files:\n\n```nginx filename=\"nginx.conf\"\nserver {\n  listen 80;\n  server_name acme.com;\n\n  root /var/www/out;\n\n  location / {\n      try_files $uri $uri.html $uri/ =404;\n  }\n\n  # This is necessary when `trailingSlash: false`.\n  # You can omit this when `trailingSlash: true`.\n  location /blog/ {\n      rewrite ^/blog/(.*)$ /blog/$1.html break;\n  }\n\n  error_page 404 /404.html;\n  location = /404.html {\n      internal;\n  }\n}\n```\n\n## Version History\n\n| Version   | Changes                                                                                                              |\n| --------- | -------------------------------------------------------------------------------------------------------------------- |\n| `v14.0.0` | `next export` has been removed in favor of `\"output\": \"export\"`                                                      |\n| `v13.4.0` | App Router (Stable) adds enhanced static export support, including using React Server Components and Route Handlers. |\n| `v13.3.0` | `next export` is deprecated and replaced with `\"output\": \"export\"`                                                   |\n", "01-building-your-application/08-testing/03-playwright.mdx": "---\ntitle: Setting up Playwright with Next.js\nnav_title: Playwright\ndescription: Learn how to set up Playwright with Next.js for End-to-End (E2E) testing.\n---\n\nPlaywright is a testing framework that lets you automate Chromium, Firefox, and WebKit with a single API. You can use it to write **End-to-End (E2E)** testing. This guide will show you how to set up Playwright with Next.js and write your first tests.\n\n## Quickstart\n\nThe fastest way to get started is to use `create-next-app` with the [with-playwright example](https://github.com/vercel/next.js/tree/canary/examples/with-playwright). This will create a Next.js project complete with Playwright configured.\n\n```bash filename=\"Terminal\"\nnpx create-next-app@latest --example with-playwright with-playwright-app\n```\n\n## Manual setup\n\nTo install Playwright, run the following command:\n\n```bash filename=\"Terminal\"\nnpm init playwright\n# or\nyarn create playwright\n# or\npnpm create playwright\n```\n\nThis will take you through a series of prompts to setup and configure Playwright for your project, including adding a `playwright.config.ts` file. Please refer to the [Playwright installation guide](https://playwright.dev/docs/intro#installation) for the step-by-step guide.\n\n## Creating your first Playwright E2E test\n\nCreate two new Next.js pages:\n\n<AppOnly>\n\n```tsx filename=\"app/page.tsx\"\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```tsx filename=\"app/about/page.tsx\"\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/index.ts\"\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```tsx filename=\"pages/about.ts\"\nimport Link from 'next/link'\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n\nThen, add a test to verify that your navigation is working correctly:\n\n```ts filename=\"tests/example.spec.ts\"\nimport { test, expect } from '@playwright/test'\n\ntest('should navigate to the about page', async ({ page }) => {\n  // Start from the index page (the baseURL is set via the webServer in the playwright.config.ts)\n  await page.goto('http://localhost:3000/')\n  // Find an element with the text 'About' and click on it\n  await page.click('text=About')\n  // The new URL should be \"/about\" (baseURL is used there)\n  await expect(page).toHaveURL('http://localhost:3000/about')\n  // The new page should contain an h1 with \"About\"\n  await expect(page.locator('h1')).toContainText('About')\n})\n```\n\n> **Good to know**:\n>\n> You can use `page.goto(\"/\")` instead of `page.goto(\"http://localhost:3000/\")`, if you add [`\"baseURL\": \"http://localhost:3000\"`](https://playwright.dev/docs/api/class-testoptions#test-options-base-url) to the `playwright.config.ts` [configuration file](https://playwright.dev/docs/test-configuration).\n\n### Running your Playwright tests\n\nPlaywright will simulate a user navigating your application using three browsers: Chromium, Firefox and Webkit, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.\n\nRun `npm run build` and `npm run start`, then run `npx playwright test` in another terminal window to run the Playwright tests.\n\n> **Good to know**: Alternatively, you can use the [`webServer`](https://playwright.dev/docs/test-webserver/) feature to let Playwright start the development server and wait until it's fully available.\n\n### Running Playwright on Continuous Integration (CI)\n\nPlaywright will by default run your tests in the [headless mode](https://playwright.dev/docs/ci#running-headed). To install all the Playwright dependencies, run `npx playwright install-deps`.\n\nYou can learn more about Playwright and Continuous Integration from these resources:\n\n- [Next.js with Playwright example](https://github.com/vercel/next.js/tree/canary/examples/with-playwright)\n- [Playwright on your CI provider](https://playwright.dev/docs/ci)\n- [Playwright Discord](https://discord.com/invite/playwright-807756831384403968)\n", "01-building-your-application/08-testing/index.mdx": "---\ntitle: Testing\ndescription: Learn how to set up Next.js with four commonly used testing tools \u2014 Cypress, Playwright, Vitest, and Jest.\n---\n\nIn React and Next.js, there are a few different types of tests you can write, each with its own purpose and use cases. This page provides an overview of types and commonly used tools you can use to test your application.\n\n## Types of tests\n\n- **Unit testing** involves testing individual units (or blocks of code) in isolation. In React, a unit can be a single function, hook, or component.\n  - **Component testing** is a more focused version of unit testing where the primary subject of the tests is React components. This may involve testing how components are rendered, their interaction with props, and their behavior in response to user events.\n  - **Integration testing** involves testing how multiple units work together. This can be a combination of components, hooks, and functions.\n- **End-to-End (E2E) Testing** involves testing user flows in an environment that simulates real user scenarios, like the browser. This means testing specific tasks (e.g. signup flow) in a production-like environment.\n- **Snapshot testing** involves capturing the rendered output of a component and saving it to a snapshot file. When tests run, the current rendered output of the component is compared against the saved snapshot. Changes in the snapshot are used to indicate unexpected changes in behavior.\n\n<AppOnly>\n\n## Async Server Components\n\nSince `async` Server Components are new to the React ecosystem, some tools do not fully support them. In the meantime, we recommend using **End-to-End Testing** over **Unit Testing** for `async` components.\n\n</AppOnly>\n\n## Guides\n\nSee the guides below to learn how to set up Next.js with these commonly used testing tools:\n", "01-building-your-application/08-testing/02-jest.mdx": "---\ntitle: Setting up Jest with Next.js\nnav_title: Jest\ndescription: Learn how to set up Jest with Next.js for Unit Testing and Snapshot Testing.\n---\n\nJest and React Testing Library are frequently used together for **Unit Testing** and **Snapshot Testing**. This guide will show you how to set up Jest with Next.js and write your first tests.\n\n> **Good to know:** Since `async` Server Components are new to the React ecosystem, Jest currently does not support them. While you can still run **unit tests** for synchronous Server and Client Components, we recommend using an **E2E tests** for `async` components.\n\n## Quickstart\n\nYou can use `create-next-app` with the Next.js [with-jest](https://github.com/vercel/next.js/tree/canary/examples/with-jest) example to quickly get started:\n\n```bash filename=\"Terminal\"\nnpx create-next-app@latest --example with-jest with-jest-app\n```\n\n## Manual setup\n\nSince the release of [Next.js 12](https://nextjs.org/blog/next-12), Next.js now has built-in configuration for Jest.\n\nTo set up Jest, install `jest` and the following packages as dev dependencies:\n\n```bash filename=\"Terminal\"\nnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom\n# or\nyarn add -D jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom\n# or\npnpm install -D jest jest-environment-jsdom @testing-library/react @testing-library/jest-dom\n```\n\nGenerate a basic Jest configuration file by running the following command:\n\n```bash filename=\"Terminal\"\nnpm init jest@latest\n# or\nyarn create jest@latest\n# or\npnpm create jest@latest\n```\n\nThis will take you through a series of prompts to setup Jest for your project, including automatically creating a `jest.config.ts|js` file.\n\nUpdate your config file to use `next/jest`. This transformer has all the necessary configuration options for Jest to work with Next.js:\n\n```ts filename=\"jest.config.ts\" switcher\nimport type { Config } from 'jest'\nimport nextJest from 'next/jest.js'\n\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n\n// Add any custom config to be passed to Jest\nconst config: Config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nexport default createJestConfig(config)\n```\n\n```js filename=\"jest.config.js\" switcher\nconst nextJest = require('next/jest')\n\n/** @type {import('jest').Config} */\nconst createJestConfig = nextJest({\n  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment\n  dir: './',\n})\n\n// Add any custom config to be passed to Jest\nconst config = {\n  coverageProvider: 'v8',\n  testEnvironment: 'jsdom',\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.ts'],\n}\n\n// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async\nmodule.exports = createJestConfig(config)\n```\n\nUnder the hood, `next/jest` is automatically configuring Jest for you, including:\n\n- Setting up `transform` using the [Next.js Compiler](/docs/architecture/nextjs-compiler)\n- Auto mocking stylesheets (`.css`, `.module.css`, and their scss variants), image imports and [`next/font`](/docs/pages/building-your-application/optimizing/fonts)\n- Loading `.env` (and all variants) into `process.env`\n- Ignoring `node_modules` from test resolving and transforms\n- Ignoring `.next` from test resolving\n- Loading `next.config.js` for flags that enable SWC transforms\n\n> **Good to know**: To test environment variables directly, load them manually in a separate setup script or in your `jest.config.ts` file. For more information, please see [Test Environment Variables](/docs/pages/building-your-application/configuring/environment-variables#test-environment-variables).\n\n<PagesOnly>\n\n## Setting up Jest (with Babel)\n\nIf you opt out of the [Next.js Compiler](/docs/architecture/nextjs-compiler) and use Babel instead, you will need to manually configure Jest and install `babel-jest` and `identity-obj-proxy` in addition to the packages above.\n\nHere are the recommended options to configure Jest for Next.js:\n\n```js filename=\"jest.config.js\"\nmodule.exports = {\n  collectCoverage: true,\n  // on node 14.x coverage provider v8 offers good speed and more or less good report\n  coverageProvider: 'v8',\n  collectCoverageFrom: [\n    '**/*.{js,jsx,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**',\n    '!<rootDir>/out/**',\n    '!<rootDir>/.next/**',\n    '!<rootDir>/*.config.js',\n    '!<rootDir>/coverage/**',\n  ],\n  moduleNameMapper: {\n    // Handle CSS imports (with CSS modules)\n    // https://jestjs.io/docs/webpack#mocking-css-modules\n    '^.+\\\\.module\\\\.(css|sass|scss)$': 'identity-obj-proxy',\n\n    // Handle CSS imports (without CSS modules)\n    '^.+\\\\.(css|sass|scss)$': '<rootDir>/__mocks__/styleMock.js',\n\n    // Handle image imports\n    // https://jestjs.io/docs/webpack#handling-static-assets\n    '^.+\\\\.(png|jpg|jpeg|gif|webp|avif|ico|bmp|svg)$/i': `<rootDir>/__mocks__/fileMock.js`,\n\n    // Handle module aliases\n    '^@/components/(.*)$': '<rootDir>/components/$1',\n\n    // Handle @next/font\n    '@next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Handle next/font\n    'next/font/(.*)': `<rootDir>/__mocks__/nextFontMock.js`,\n    // Disable server-only\n    'server-only': `<rootDir>/__mocks__/empty.js`,\n  },\n  // Add more setup options before each test is run\n  // setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],\n  testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/'],\n  testEnvironment: 'jsdom',\n  transform: {\n    // Use babel-jest to transpile tests with the next/babel preset\n    // https://jestjs.io/docs/configuration#transform-objectstring-pathtotransformer--pathtotransformer-object\n    '^.+\\\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }],\n  },\n  transformIgnorePatterns: [\n    '/node_modules/',\n    '^.+\\\\.module\\\\.(css|sass|scss)$',\n  ],\n}\n```\n\nYou can learn more about each configuration option in the [Jest docs](https://jestjs.io/docs/configuration). We also recommend reviewing [`next/jest` configuration](https://github.com/vercel/next.js/blob/e02fe314dcd0ae614c65b505c6daafbdeebb920e/packages/next/src/build/jest/jest.ts) to see how Next.js configures Jest.\n\n### Handling stylesheets and image imports\n\nStylesheets and images aren't used in the tests but importing them may cause errors, so they will need to be mocked.\n\nCreate the mock files referenced in the configuration above - `fileMock.js` and `styleMock.js` - inside a `__mocks__` directory:\n\n```js filename=\"__mocks__/fileMock.js\"\nmodule.exports = 'test-file-stub'\n```\n\n```js filename=\"__mocks__/styleMock.js\"\nmodule.exports = {}\n```\n\nFor more information on handling static assets, please refer to the [Jest Docs](https://jestjs.io/docs/webpack#handling-static-assets).\n\n## Handling Fonts\n\nTo handle fonts, create the `nextFontMock.js` file inside the `__mocks__` directory, and add the following configuration:\n\n```js filename=\"__mocks__/nextFontMock.js\"\nmodule.exports = new Proxy(\n  {},\n  {\n    get: function getter() {\n      return () => ({\n        className: 'className',\n        variable: 'variable',\n        style: { fontFamily: 'fontFamily' },\n      })\n    },\n  }\n)\n```\n\n</PagesOnly>\n\n## Optional: Handling Absolute Imports and Module Path Aliases\n\nIf your project is using [Module Path Aliases](/docs/pages/building-your-application/configuring/absolute-imports-and-module-aliases), you will need to configure Jest to resolve the imports by matching the paths option in the `jsconfig.json` file with the `moduleNameMapper` option in the `jest.config.js` file. For example:\n\n```json filename=\"tsconfig.json or jsconfig.json\"\n{\n  \"compilerOptions\": {\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"baseUrl\": \"./\",\n    \"paths\": {\n      \"@/components/*\": [\"components/*\"]\n    }\n  }\n}\n```\n\n```js filename=\"jest.config.js\"\nmoduleNameMapper: {\n  // ...\n  '^@/components/(.*)$': '<rootDir>/components/$1',\n}\n```\n\n## Optional: Extend Jest with custom matchers\n\n`@testing-library/jest-dom` includes a set of convenient [custom matchers](https://github.com/testing-library/jest-dom#custom-matchers) such as `.toBeInTheDocument()` making it easier to write tests. You can import the custom matchers for every test by adding the following option to the Jest configuration file:\n\n```ts filename=\"jest.config.ts\" switcher\nsetupFilesAfterEnv: ['<rootDir>/jest.setup.ts']\n```\n\n```js filename=\"jest.config.js\" switcher\nsetupFilesAfterEnv: ['<rootDir>/jest.setup.js']\n```\n\nThen, inside `jest.setup.ts`, add the following import:\n\n```ts filename=\"jest.setup.ts\" switcher\nimport '@testing-library/jest-dom'\n```\n\n```js filename=\"jest.setup.js\" switcher\nimport '@testing-library/jest-dom'\n```\n\n> **Good to know:**[`extend-expect` was removed in `v6.0`](https://github.com/testing-library/jest-dom/releases/tag/v6.0.0), so if you are using `@testing-library/jest-dom` before version 6, you will need to import `@testing-library/jest-dom/extend-expect` instead.\n\nIf you need to add more setup options before each test, you can add them to the `jest.setup.js` file above.\n\n## Add a test script to `package.json`:\n\nFinally, add a Jest `test` script to your `package.json` file:\n\n```json filename=\"package.json\" highlight={6-7}\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\"\n  }\n}\n```\n\n`jest --watch` will re-run tests when a file is changed. For more Jest CLI options, please refer to the [Jest Docs](https://jestjs.io/docs/cli#reference).\n\n### Creating your first test:\n\nYour project is now ready to run tests. Create a folder called `__tests__` in your project's root directory.\n\n<PagesOnly>\n\nFor example, we can add a test to check if the `<Home />` component successfully renders a heading:\n\n```jsx filename=\"pages/index.js\nexport default function Home() {\n  return <h1>Home</h1>\n}\n```\n\n```jsx filename=\"__tests__/index.test.js\"\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Home from '../pages/index'\n\ndescribe('Home', () => {\n  it('renders a heading', () => {\n    render(<Home />)\n\n    const heading = screen.getByRole('heading', { level: 1 })\n\n    expect(heading).toBeInTheDocument()\n  })\n})\n```\n\n</PagesOnly>\n\n<AppOnly>\n\nFor example, we can add a test to check if the `<Page />` component successfully renders a heading:\n\n```jsx filename=\"app/page.js\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"__tests__/page.test.jsx\"\nimport '@testing-library/jest-dom'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ndescribe('Page', () => {\n  it('renders a heading', () => {\n    render(<Page />)\n\n    const heading = screen.getByRole('heading', { level: 1 })\n\n    expect(heading).toBeInTheDocument()\n  })\n})\n```\n\n</AppOnly>\n\nOptionally, add a [snapshot test](https://jestjs.io/docs/snapshot-testing) to keep track of any unexpected changes in your component:\n\n<PagesOnly>\n\n```jsx filename=\"__tests__/snapshot.js\"\nimport { render } from '@testing-library/react'\nimport Home from '../pages/index'\n\nit('renders homepage unchanged', () => {\n  const { container } = render(<Home />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n> **Good to know**: Test files should not be included inside the Pages Router because any files inside the Pages Router are considered routes.\n\n</PagesOnly>\n\n<AppOnly>\n\n```jsx filename=\"__tests__/snapshot.js\"\nimport { render } from '@testing-library/react'\nimport Page from '../app/page'\n\nit('renders homepage unchanged', () => {\n  const { container } = render(<Page />)\n  expect(container).toMatchSnapshot()\n})\n```\n\n</AppOnly>\n\n## Running your tests\n\nThen, run the following command to run your tests:\n\n```bash filename=\"Terminal\"\nnpm run test\n# or\nyarn test\n# or\npnpm test\n```\n\n## Additional Resources\n\nFor further reading, you may find these resources helpful:\n\n- [Next.js with Jest example](https://github.com/vercel/next.js/tree/canary/examples/with-jest)\n- [Jest Docs](https://jestjs.io/docs/getting-started)\n- [React Testing Library Docs](https://testing-library.com/docs/react-testing-library/intro/)\n- [Testing Playground](https://testing-playground.com/) - use good testing practices to match elements.\n", "01-building-your-application/08-testing/04-cypress.mdx": "---\ntitle: Setting up Cypress with Next.js\nnav_title: Cypress\ndescription: Learn how to set up Cypress with Next.js for End-to-End (E2E) and Component Testing.\n---\n\n[Cypress](https://www.cypress.io/) is a test runner used for **End-to-End (E2E)** and **Component Testing**. This page will show you how to set up Cypress with Next.js and write your first tests.\n\n> **Warning:**\n>\n> - For **component testing**, Cypress currently does not support [Next.js version 14](https://github.com/cypress-io/cypress/issues/28185) and `async` Server Components. These issues are being tracked. For now, component testing works with Next.js version 13, and we recommend E2E testing for `async` Server Components.\n> - Cypress versions below 13.6.3 do not support [TypeScript version 5](https://github.com/cypress-io/cypress/issues/27731) with `moduleResolution:\"bundler\"`. However, this issue has been resolved in Cypress version 13.6.3 and later. [cypress v13.6.3](https://docs.cypress.io/guides/references/changelog#13-6-3)\n\n<AppOnly>\n\n## Quickstart\n\nYou can use `create-next-app` with the [with-cypress example](https://github.com/vercel/next.js/tree/canary/examples/with-cypress) to quickly get started.\n\n```bash filename=\"Terminal\"\nnpx create-next-app@latest --example with-cypress with-cypress-app\n```\n\n</AppOnly>\n\n## Manual setup\n\nTo manually set up Cypress, install `cypress` as a dev dependency:\n\n```bash filename=\"Terminal\"\nnpm install -D cypress\n# or\nyarn add -D cypress\n# or\npnpm install -D cypress\n```\n\nAdd the Cypress `open` command to the `package.json` scripts field:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\",\n    \"cypress:open\": \"cypress open\"\n  }\n}\n```\n\nRun Cypress for the first time to open the Cypress testing suite:\n\n```bash filename=\"Terminal\"\nnpm run cypress:open\n```\n\nYou can choose to configure **E2E Testing** and/or **Component Testing**. Selecting any of these options will automatically create a `cypress.config.js` file and a `cypress` folder in your project.\n\n## Creating your first Cypress E2E test\n\nEnsure your `cypress.config.js` file has the following configuration:\n\n```ts filename=\"cypress.config.ts\"\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n```\n\n```js filename=\"cypress.config.js\"\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  e2e: {\n    setupNodeEvents(on, config) {},\n  },\n})\n```\n\nThen, create two new Next.js files:\n\n<AppOnly>\n\n```jsx filename=\"app/page.js\"\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/about/page.js\"\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"pages/index.js\"\nimport Link from 'next/link'\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"pages/about.js\"\nimport Link from 'next/link'\n\nexport default function About() {\n  return (\n    <div>\n      <h1>About</h1>\n      <Link href=\"/\">Home</Link>\n    </div>\n  )\n}\n```\n\n</PagesOnly>\n\nAdd a test to check your navigation is working correctly:\n\n```js filename=\"cypress/e2e/app.cy.js\"\ndescribe('Navigation', () => {\n  it('should navigate to the about page', () => {\n    // Start from the index page\n    cy.visit('http://localhost:3000/')\n\n    // Find a link with an href attribute containing \"about\" and click it\n    cy.get('a[href*=\"about\"]').click()\n\n    // The new url should include \"/about\"\n    cy.url().should('include', '/about')\n\n    // The new page should contain an h1 with \"About\"\n    cy.get('h1').contains('About')\n  })\n})\n```\n\n### Running E2E Tests\n\nCypress will simulate a user navigating your application, this requires your Next.js server to be running. We recommend running your tests against your production code to more closely resemble how your application will behave.\n\nRun `npm run build && npm run start` to build your Next.js application, then run `npm run cypress:open` in another terminal window to start Cypress and run your E2E testing suite.\n\n> **Good to know:**\n>\n> - You can use `cy.visit(\"/\")` instead of `cy.visit(\"http://localhost:3000/\")` by adding `baseUrl: 'http://localhost:3000'` to the `cypress.config.js` configuration file.\n> - Alternatively, you can install the `start-server-and-test` package to run the Next.js production server in conjunction with Cypress. After installation, add `\"test\": \"start-server-and-test start http://localhost:3000 cypress\"` to your `package.json` scripts field. Remember to rebuild your application after new changes.\n\n## Creating your first Cypress component test\n\nComponent tests build and mount a specific component without having to bundle your whole application or start a server.\n\nSelect **Component Testing** in the Cypress app, then select **Next.js** as your front-end framework. A `cypress/component` folder will be created in your project, and a `cypress.config.js` file will be updated to enable component testing.\n\nEnsure your `cypress.config.js` file has the following configuration:\n\n```ts filename=\"cypress.config.ts\"\nimport { defineConfig } from 'cypress'\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n```\n\n```js filename=\"cypress.config.js\"\nconst { defineConfig } = require('cypress')\n\nmodule.exports = defineConfig({\n  component: {\n    devServer: {\n      framework: 'next',\n      bundler: 'webpack',\n    },\n  },\n})\n```\n\nAssuming the same components from the previous section, add a test to validate a component is rendering the expected output:\n\n<AppOnly>\n\n```tsx filename=\"cypress/component/about.cy.tsx\"\nimport Page from '../../app/page'\n\ndescribe('<Page />', () => {\n  it('should render and display expected content', () => {\n    // Mount the React component for the Home page\n    cy.mount(<Page />)\n\n    // The new page should contain an h1 with \"Home\"\n    cy.get('h1').contains('Home')\n\n    // Validate that a link with the expected URL is present\n    // Following the link is better suited to an E2E test\n    cy.get('a[href=\"/about\"]').should('be.visible')\n  })\n})\n```\n\n</AppOnly>\n\n<PagesOnly>\n\n```jsx filename=\"cypress/component/about.cy.js\"\nimport AboutPage from '../../pages/about'\n\ndescribe('<AboutPage />', () => {\n  it('should render and display expected content', () => {\n    // Mount the React component for the About page\n    cy.mount(<AboutPage />)\n\n    // The new page should contain an h1 with \"About page\"\n    cy.get('h1').contains('About')\n\n    // Validate that a link with the expected URL is present\n    // *Following* the link is better suited to an E2E test\n    cy.get('a[href=\"/\"]').should('be.visible')\n  })\n})\n```\n\n</PagesOnly>\n\n> **Good to know**:\n>\n> - Cypress currently doesn't support component testing for `async` Server Components. We recommend using E2E testing.\n> - Since component tests do not require a Next.js server, features like `<Image />` that rely on a server being available may not function out-of-the-box.\n\n### Running Component Tests\n\nRun `npm run cypress:open` in your terminal to start Cypress and run your component testing suite.\n\n## Continuous Integration (CI)\n\nIn addition to interactive testing, you can also run Cypress headlessly using the `cypress run` command, which is better suited for CI environments:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    //...\n    \"e2e\": \"start-server-and-test dev http://localhost:3000 \\\"cypress open --e2e\\\"\",\n    \"e2e:headless\": \"start-server-and-test dev http://localhost:3000 \\\"cypress run --e2e\\\"\",\n    \"component\": \"cypress open --component\",\n    \"component:headless\": \"cypress run --component\"\n  }\n}\n```\n\nYou can learn more about Cypress and Continuous Integration from these resources:\n\n- [Next.js with Cypress example](https://github.com/vercel/next.js/tree/canary/examples/with-cypress)\n- [Cypress Continuous Integration Docs](https://docs.cypress.io/guides/continuous-integration/introduction)\n- [Cypress GitHub Actions Guide](https://on.cypress.io/github-actions)\n- [Official Cypress GitHub Action](https://github.com/cypress-io/github-action)\n- [Cypress Discord](https://discord.com/invite/cypress)\n", "01-building-your-application/08-testing/01-vitest.mdx": "---\ntitle: Setting up Vitest with Next.js\nnav_title: Vitest\ndescription: Learn how to set up Vitest with Next.js for Unit Testing.\n---\n\nVite and React Testing Library are frequently used together for **Unit Testing**. This guide will show you how to setup Vitest with Next.js and write your first tests.\n\n> **Good to know:** Since `async` Server Components are new to the React ecosystem, Vitest currently does not support them. While you can still run **unit tests** for synchronous Server and Client Components, we recommend using an **E2E tests** for `async` components.\n\n## Quickstart\n\nYou can use `create-next-app` with the Next.js [with-vitest](https://github.com/vercel/next.js/tree/canary/examples/with-vitest) example to quickly get started:\n\n```bash filename=\"Terminal\"\nnpx create-next-app@latest --example with-vitest with-vitest-app\n```\n\n## Manual Setup\n\nTo manually set up Vitest, install `vitest` and the following packages as dev dependencies:\n\n```bash filename=\"Terminal\"\nnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react\n# or\nyarn add -D vitest @vitejs/plugin-react jsdom @testing-library/react\n# or\npnpm install -D vitest @vitejs/plugin-react jsdom @testing-library/react\n# or\nbun add -D vitest @vitejs/plugin-react jsdom @testing-library/react\n```\n\nCreate a `vitest.config.ts|js` file in the root of your project, and add the following options:\n\n```ts filename=\"vitest.config.ts\" switcher\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n```\n\n```js filename=\"vitest.config.js\" switcher\nimport { defineConfig } from 'vitest/config'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n  },\n})\n```\n\nFor more information on configuring Vitest, please refer to the [Vitest Configuration](https://vitest.dev/config/#configuration) docs.\n\nThen, add a `test` script to your `package.json`:\n\n```json filename=\"package.json\"\n{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"test\": \"vitest\"\n  }\n}\n```\n\nWhen you run `npm run test`, Vitest will **watch** for changes in your project by default.\n\n## Creating your first Vitest Unit Test\n\nCheck that everything is working by creating a test to check if the `<Page />` component successfully renders a heading:\n\n<AppOnly>\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/page.jsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```tsx filename=\"__tests__/page.test.tsx\" switcher\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n```jsx filename=\"__tests__/page.test.jsx\" switcher\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../app/page'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n> **Good to know**: The example above uses the common `__tests__` convention, but test files can also be colocated inside the `app` router.\n\n</AppOnly>\n\n<PagesOnly>\n\n```tsx filename=\"pages/index.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"pages/index.jsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  )\n}\n```\n\n```tsx filename=\"__tests__/index.test.tsx\" switcher\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../pages/index'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n```jsx filename=\"__tests__/index.test.jsx\" switcher\nimport { expect, test } from 'vitest'\nimport { render, screen } from '@testing-library/react'\nimport Page from '../pages/index'\n\ntest('Page', () => {\n  render(<Page />)\n  expect(screen.getByRole('heading', { level: 1, name: 'Home' })).toBeDefined()\n})\n```\n\n</PagesOnly>\n\n## Running your tests\n\nThen, run the following command to run your tests:\n\n```bash filename=\"Terminal\"\nnpm run test\n# or\nyarn test\n# or\npnpm test\n# or\nbun test\n```\n\n## Additional Resources\n\nYou may find these resources helpful:\n\n- [Next.js with Vitest example](https://github.com/vercel/next.js/tree/canary/examples/with-vitest)\n- [Vitest Docs](https://vitest.dev/guide/)\n- [React Testing Library Docs](https://testing-library.com/docs/react-testing-library/intro/)\n", "01-building-your-application/01-routing/02-pages.mdx": "---\ntitle: Pages\ndescription: Create your first page in Next.js\nrelated:\n  links:\n    - app/building-your-application/routing/layouts-and-templates\n    - app/building-your-application/routing/linking-and-navigating\n---\n\nA page is UI that is **unique** to a route. You can define a page by default exporting a component from a `page.js` file.\n\nFor example, to create your `index` page, add the `page.js` file inside the `app` directory:\n\n<Image\n  alt=\"page.js special file\"\n  srcLight=\"/docs/light/page-special-file.png\"\n  srcDark=\"/docs/dark/page-special-file.png\"\n  width=\"1600\"\n  height=\"444\"\n/>\n\n```tsx filename=\"app/page.tsx\" switcher\n// `app/page.tsx` is the UI for the `/` URL\nexport default function Page() {\n  return <h1>Hello, Home page!</h1>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n// `app/page.js` is the UI for the `/` URL\nexport default function Page() {\n  return <h1>Hello, Home page!</h1>\n}\n```\n\nThen, to create further pages, create a new folder and add the `page.js` file inside it. For example, to create a page for the `/dashboard` route, create a new folder called `dashboard`, and add the `page.js` file inside it:\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\n// `app/dashboard/page.tsx` is the UI for the `/dashboard` URL\nexport default function Page() {\n  return <h1>Hello, Dashboard Page!</h1>\n}\n```\n\n```jsx filename=\"app/dashboard/page.js\" switcher\n// `app/dashboard/page.js` is the UI for the `/dashboard` URL\nexport default function Page() {\n  return <h1>Hello, Dashboard Page!</h1>\n}\n```\n\n> **Good to know**:\n>\n> - The `.js`, `.jsx`, or `.tsx` file extensions can be used for Pages.\n> - A page is always the [leaf](/docs/app/building-your-application/routing#terminology) of the [route subtree](/docs/app/building-your-application/routing#terminology).\n> - A `page.js` file is required to make a route segment publicly accessible.\n> - Pages are [Server Components](/docs/app/building-your-application/rendering/server-components) by default, but can be set to a [Client Component](/docs/app/building-your-application/rendering/client-components).\n> - Pages can fetch data. View the [Data Fetching](/docs/app/building-your-application/data-fetching) section for more information.\n", "01-building-your-application/01-routing/15-internationalization.mdx": "---\ntitle: Internationalization\ndescription: Add support for multiple languages with internationalized routing and localized content.\n---\n\nNext.js enables you to configure the routing and rendering of content to support multiple languages. Making your site adaptive to different locales includes translated content (localization) and internationalized routes.\n\n## Terminology\n\n- **Locale:** An identifier for a set of language and formatting preferences. This usually includes the preferred language of the user and possibly their geographic region.\n  - `en-US`: English as spoken in the United States\n  - `nl-NL`: Dutch as spoken in the Netherlands\n  - `nl`: Dutch, no specific region\n\n## Routing Overview\n\nIt\u2019s recommended to use the user\u2019s language preferences in the browser to select which locale to use. Changing your preferred language will modify the incoming `Accept-Language` header to your application.\n\nFor example, using the following libraries, you can look at an incoming `Request` to determine which locale to select, based on the `Headers`, locales you plan to support, and the default locale.\n\n```js filename=\"middleware.js\"\nimport { match } from '@formatjs/intl-localematcher'\nimport Negotiator from 'negotiator'\n\nlet headers = { 'accept-language': 'en-US,en;q=0.5' }\nlet languages = new Negotiator({ headers }).languages()\nlet locales = ['en-US', 'nl-NL', 'nl']\nlet defaultLocale = 'en-US'\n\nmatch(languages, locales, defaultLocale) // -> 'en-US'\n```\n\nRouting can be internationalized by either the sub-path (`/fr/products`) or domain (`my-site.fr/products`). With this information, you can now redirect the user based on the locale inside [Middleware](/docs/app/building-your-application/routing/middleware).\n\n```js filename=\"middleware.js\"\nimport { NextResponse } from \"next/server\";\n\nlet locales = ['en-US', 'nl-NL', 'nl']\n\n// Get the preferred locale, similar to the above or using a library\nfunction getLocale(request) { ... }\n\nexport function middleware(request) {\n  // Check if there is any supported locale in the pathname\n  const { pathname } = request.nextUrl\n  const pathnameHasLocale = locales.some(\n    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`\n  )\n\n  if (pathnameHasLocale) return\n\n  // Redirect if there is no locale\n  const locale = getLocale(request)\n  request.nextUrl.pathname = `/${locale}${pathname}`\n  // e.g. incoming request is /products\n  // The new URL is now /en-US/products\n  return NextResponse.redirect(request.nextUrl)\n}\n\nexport const config = {\n  matcher: [\n    // Skip all internal paths (_next)\n    '/((?!_next).*)',\n    // Optional: only run on root (/) URL\n    // '/'\n  ],\n}\n```\n\nFinally, ensure all special files inside `app/` are nested under `app/[lang]`. This enables the Next.js router to dynamically handle different locales in the route, and forward the `lang` parameter to every layout and page. For example:\n\n```jsx filename=\"app/[lang]/page.js\"\n// You now have access to the current locale\n// e.g. /en-US/products -> `lang` is \"en-US\"\nexport default async function Page({ params: { lang } }) {\n  return ...\n}\n```\n\nThe root layout can also be nested in the new folder (e.g. `app/[lang]/layout.js`).\n\n## Localization\n\nChanging displayed content based on the user\u2019s preferred locale, or localization, is not something specific to Next.js. The patterns described below would work the same with any web application.\n\nLet\u2019s assume we want to support both English and Dutch content inside our application. We might maintain two different \u201cdictionaries\u201d, which are objects that give us a mapping from some key to a localized string. For example:\n\n```json filename=\"dictionaries/en.json\"\n{\n  \"products\": {\n    \"cart\": \"Add to Cart\"\n  }\n}\n```\n\n```json filename=\"dictionaries/nl.json\"\n{\n  \"products\": {\n    \"cart\": \"Toevoegen aan Winkelwagen\"\n  }\n}\n```\n\nWe can then create a `getDictionary` function to load the translations for the requested locale:\n\n```jsx filename=\"app/[lang]/dictionaries.js\"\nimport 'server-only'\n\nconst dictionaries = {\n  en: () => import('./dictionaries/en.json').then((module) => module.default),\n  nl: () => import('./dictionaries/nl.json').then((module) => module.default),\n}\n\nexport const getDictionary = async (locale) => dictionaries[locale]()\n```\n\nGiven the currently selected language, we can fetch the dictionary inside of a layout or page.\n\n```jsx filename=\"app/[lang]/page.js\"\nimport { getDictionary } from './dictionaries'\n\nexport default async function Page({ params: { lang } }) {\n  const dict = await getDictionary(lang) // en\n  return <button>{dict.products.cart}</button> // Add to Cart\n}\n```\n\nBecause all layouts and pages in the `app/` directory default to [Server Components](/docs/app/building-your-application/rendering/server-components), we do not need to worry about the size of the translation files affecting our client-side JavaScript bundle size. This code will **only run on the server**, and only the resulting HTML will be sent to the browser.\n\n## Static Generation\n\nTo generate static routes for a given set of locales, we can use `generateStaticParams` with any page or layout. This can be global, for example, in the root layout:\n\n```jsx filename=\"app/[lang]/layout.js\"\nexport async function generateStaticParams() {\n  return [{ lang: 'en-US' }, { lang: 'de' }]\n}\n\nexport default function Root({ children, params }) {\n  return (\n    <html lang={params.lang}>\n      <body>{children}</body>\n    </html>\n  )\n}\n```\n\n## Resources\n\n- [Minimal i18n routing and translations](https://github.com/vercel/next.js/tree/canary/examples/app-dir-i18n-routing)\n- [`next-intl`](https://next-intl-docs.vercel.app/docs/next-13)\n- [`next-international`](https://github.com/QuiiBz/next-international)\n- [`next-i18n-router`](https://github.com/i18nexus/next-i18n-router)\n- [`inlang`](https://inlang.com/c/nextjs)\n", "01-building-your-application/01-routing/01-defining-routes.mdx": "---\ntitle: Defining Routes\ndescription: Learn how to create your first route in Next.js.\nrelated:\n  description: Learn more about creating pages and layouts.\n  links:\n    - app/building-your-application/routing/pages\n---\n\n> We recommend reading the [Routing Fundamentals](/docs/app/building-your-application/routing) page before continuing.\n\nThis page will guide you through how to define and organize routes in your Next.js application.\n\n## Creating Routes\n\nNext.js uses a file-system based router where **folders** are used to define routes.\n\nEach folder represents a [**route** segment](/docs/app/building-your-application/routing#route-segments) that maps to a **URL** segment. To create a [nested route](/docs/app/building-your-application/routing#nested-routes), you can nest folders inside each other.\n\n<Image\n  alt=\"Route segments to path segments\"\n  srcLight=\"/docs/light/route-segments-to-path-segments.png\"\n  srcDark=\"/docs/dark/route-segments-to-path-segments.png\"\n  width=\"1600\"\n  height=\"594\"\n/>\n\nA special [`page.js` file](/docs/app/building-your-application/routing/pages) is used to make route segments publicly accessible.\n\n<Image\n  alt=\"Defining Routes\"\n  srcLight=\"/docs/light/defining-routes.png\"\n  srcDark=\"/docs/dark/defining-routes.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nIn this example, the `/dashboard/analytics` URL path is _not_ publicly accessible because it does not have a corresponding `page.js` file. This folder could be used to store components, stylesheets, images, or other colocated files.\n\n> **Good to know**: `.js`, `.jsx`, or `.tsx` file extensions can be used for special files.\n\n## Creating UI\n\n[Special file conventions](/docs/app/building-your-application/routing#file-conventions) are used to create UI for each route segment. The most common are [pages](/docs/app/building-your-application/routing/pages) to show UI unique to a route, and [layouts](/docs/app/building-your-application/routing/layouts-and-templates#layouts) to show UI that is shared across multiple routes.\n\nFor example, to create your first page, add a `page.js` file inside the `app` directory and export a React component:\n\n```tsx filename=\"app/page.tsx\" switcher\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n```\n", "01-building-your-application/01-routing/14-middleware.mdx": "---\ntitle: Middleware\ndescription: Learn how to use Middleware to run code before a request is completed.\n---\n\n{/* The content of this doc is shared between the app and pages router. You can use the `<PagesOnly>Content</PagesOnly>` component to add content that is specific to the Pages Router. Any shared content should not be wrapped in a component. */}\n\nMiddleware allows you to run code before a request is completed. Then, based on the incoming request, you can modify the response by rewriting, redirecting, modifying the request or response headers, or responding directly.\n\nMiddleware runs before cached content and routes are matched. See [Matching Paths](#matching-paths) for more details.\n\n## Use Cases\n\nIntegrating Middleware into your application can lead to significant improvements in performance, security, and user experience. Some common scenarios where Middleware is particularly effective include:\n\n- Authentication and Authorization: Ensure user identity and check session cookies before granting access to specific pages or API routes.\n- Server-Side Redirects: Redirect users at the server level based on certain conditions (e.g., locale, user role).\n- Path Rewriting: Support A/B testing, feature rollouts, or legacy paths by dynamically rewriting paths to API routes or pages based on request properties.\n- Bot Detection: Protect your resources by detecting and blocking bot traffic.\n- Logging and Analytics: Capture and analyze request data for insights before processing by the page or API.\n- Feature Flagging: Enable or disable features dynamically for seamless feature rollouts or testing.\n\nRecognizing situations where middleware may not be the optimal approach is just as crucial. Here are some scenarios to be mindful of:\n\n- Complex Data Fetching and Manipulation: Middleware is not designed for direct data fetching or manipulation, this should be done within Route Handlers or server-side utilities instead.\n- Heavy Computational Tasks: Middleware should be lightweight and respond quickly or it can cause delays in page load. Heavy computational tasks or long-running processes should be done within dedicated Route Handlers.\n- Extensive Session Management: While Middleware can manage basic session tasks, extensive session management should be managed by dedicated authentication services or within Route Handlers.\n- Direct Database Operations: Performing direct database operations within Middleware is not recommended. Database interactions should done within Route Handlers or server-side utilities.\n\n## Convention\n\nUse the file `middleware.ts` (or `.js`) in the root of your project to define Middleware. For example, at the same level as `pages` or `app`, or inside `src` if applicable.\n\n> **Note**: While only one `middleware.ts` file is supported per project, you can still organize your middleware logic modularly. Break out middleware functionalities into separate `.ts` or `.js` files and import them into your main `middleware.ts` file. This allows for cleaner management of route-specific middleware, aggregated in the `middleware.ts` for centralized control. By enforcing a single middleware file, it simplifies configuration, prevents potential conflicts, and optimizes performance by avoiding multiple middleware layers.\n\n## Example\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request: NextRequest) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\n// This function can be marked `async` if using `await` inside\nexport function middleware(request) {\n  return NextResponse.redirect(new URL('/home', request.url))\n}\n\n// See \"Matching Paths\" below to learn more\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\n## Matching Paths\n\nMiddleware will be invoked for **every route in your project**. Given this, it's crucial to use matchers to precisely target or exclude specific routes. The following is the execution order:\n\n1. `headers` from `next.config.js`\n2. `redirects` from `next.config.js`\n3. Middleware (`rewrites`, `redirects`, etc.)\n4. `beforeFiles` (`rewrites`) from `next.config.js`\n5. Filesystem routes (`public/`, `_next/static/`, `pages/`, `app/`, etc.)\n6. `afterFiles` (`rewrites`) from `next.config.js`\n7. Dynamic Routes (`/blog/[slug]`)\n8. `fallback` (`rewrites`) from `next.config.js`\n\nThere are two ways to define which paths Middleware will run on:\n\n1. [Custom matcher config](#matcher)\n2. [Conditional statements](#conditional-statements)\n\n### Matcher\n\n`matcher` allows you to filter Middleware to run on specific paths.\n\n```js filename=\"middleware.js\"\nexport const config = {\n  matcher: '/about/:path*',\n}\n```\n\nYou can match a single path or multiple paths with an array syntax:\n\n```js filename=\"middleware.js\"\nexport const config = {\n  matcher: ['/about/:path*', '/dashboard/:path*'],\n}\n```\n\nThe `matcher` config allows full regex so matching like negative lookaheads or character matching is supported. An example of a negative lookahead to match all except specific paths can be seen here:\n\n```js filename=\"middleware.js\"\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n}\n```\n\nYou can also bypass Middleware for certain requests by using the `missing` or `has` arrays, or a combination of both:\n\n```js filename=\"middleware.js\"\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     */\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      missing: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      has: [\n        { type: 'header', key: 'next-router-prefetch' },\n        { type: 'header', key: 'purpose', value: 'prefetch' },\n      ],\n    },\n\n    {\n      source: '/((?!api|_next/static|_next/image|favicon.ico).*)',\n      has: [{ type: 'header', key: 'x-present' }],\n      missing: [{ type: 'header', key: 'x-missing', value: 'prefetch' }],\n    },\n  ],\n}\n```\n\n> **Good to know**: The `matcher` values need to be constants so they can be statically analyzed at build-time. Dynamic values such as variables will be ignored.\n\nConfigured matchers:\n\n1. MUST start with `/`\n2. Can include named parameters: `/about/:path` matches `/about/a` and `/about/b` but not `/about/a/c`\n3. Can have modifiers on named parameters (starting with `:`): `/about/:path*` matches `/about/a/b/c` because `*` is _zero or more_. `?` is _zero or one_ and `+` _one or more_\n4. Can use regular expression enclosed in parenthesis: `/about/(.*)` is the same as `/about/:path*`\n\nRead more details on [path-to-regexp](https://github.com/pillarjs/path-to-regexp#path-to-regexp-1) documentation.\n\n> **Good to know**: For backward compatibility, Next.js always considers `/public` as `/public/index`. Therefore, a matcher of `/public/:path` will match.\n\n### Conditional Statements\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  if (request.nextUrl.pathname.startsWith('/about')) {\n    return NextResponse.rewrite(new URL('/about-2', request.url))\n  }\n\n  if (request.nextUrl.pathname.startsWith('/dashboard')) {\n    return NextResponse.rewrite(new URL('/dashboard/user', request.url))\n  }\n}\n```\n\n## NextResponse\n\nThe `NextResponse` API allows you to:\n\n- `redirect` the incoming request to a different URL\n- `rewrite` the response by displaying a given URL\n- Set request headers for API Routes, `getServerSideProps`, and `rewrite` destinations\n- Set response cookies\n- Set response headers\n\n<AppOnly>\n\nTo produce a response from Middleware, you can:\n\n1. `rewrite` to a route ([Page](/docs/app/building-your-application/routing/layouts-and-templates) or [Route Handler](/docs/app/building-your-application/routing/route-handlers)) that produces a response\n2. return a `NextResponse` directly. See [Producing a Response](#producing-a-response)\n\n</AppOnly>\n\n<PagesOnly>\n\nTo produce a response from Middleware, you can:\n\n1. `rewrite` to a route ([Page](/docs/pages/building-your-application/routing/pages-and-layouts) or [Edge API Route](/docs/pages/building-your-application/routing/api-routes)) that produces a response\n2. return a `NextResponse` directly. See [Producing a Response](#producing-a-response)\n\n</PagesOnly>\n\n## Using Cookies\n\nCookies are regular headers. On a `Request`, they are stored in the `Cookie` header. On a `Response` they are in the `Set-Cookie` header. Next.js provides a convenient way to access and manipulate these cookies through the `cookies` extension on `NextRequest` and `NextResponse`.\n\n1. For incoming requests, `cookies` comes with the following methods: `get`, `getAll`, `set`, and `delete` cookies. You can check for the existence of a cookie with `has` or remove all cookies with `clear`.\n2. For outgoing responses, `cookies` have the following methods `get`, `getAll`, `set`, and `delete`.\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request\n  // Getting cookies from the request using the `RequestCookies` API\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]\n\n  request.cookies.has('nextjs') // => true\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs') // => false\n\n  // Setting cookies on the response using the `ResponseCookies` API\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }\n  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/` header.\n\n  return response\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  // Assume a \"Cookie:nextjs=fast\" header to be present on the incoming request\n  // Getting cookies from the request using the `RequestCookies` API\n  let cookie = request.cookies.get('nextjs')\n  console.log(cookie) // => { name: 'nextjs', value: 'fast', Path: '/' }\n  const allCookies = request.cookies.getAll()\n  console.log(allCookies) // => [{ name: 'nextjs', value: 'fast' }]\n\n  request.cookies.has('nextjs') // => true\n  request.cookies.delete('nextjs')\n  request.cookies.has('nextjs') // => false\n\n  // Setting cookies on the response using the `ResponseCookies` API\n  const response = NextResponse.next()\n  response.cookies.set('vercel', 'fast')\n  response.cookies.set({\n    name: 'vercel',\n    value: 'fast',\n    path: '/',\n  })\n  cookie = response.cookies.get('vercel')\n  console.log(cookie) // => { name: 'vercel', value: 'fast', Path: '/' }\n  // The outgoing response will have a `Set-Cookie:vercel=fast;path=/test` header.\n\n  return response\n}\n```\n\n## Setting Headers\n\nYou can set request and response headers using the `NextResponse` API (setting _request_ headers is available since Next.js v13.0.0).\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  // Clone the request headers and set a new header `x-hello-from-middleware1`\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n\n  // You can also set request headers in NextResponse.rewrite\n  const response = NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  })\n\n  // Set a new response header `x-hello-from-middleware2`\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\nexport function middleware(request) {\n  // Clone the request headers and set a new header `x-hello-from-middleware1`\n  const requestHeaders = new Headers(request.headers)\n  requestHeaders.set('x-hello-from-middleware1', 'hello')\n\n  // You can also set request headers in NextResponse.rewrite\n  const response = NextResponse.next({\n    request: {\n      // New request headers\n      headers: requestHeaders,\n    },\n  })\n\n  // Set a new response header `x-hello-from-middleware2`\n  response.headers.set('x-hello-from-middleware2', 'hello')\n  return response\n}\n```\n\n> **Good to know**: Avoid setting large headers as it might cause [431 Request Header Fields Too Large](https://developer.mozilla.org/docs/Web/HTTP/Status/431) error depending on your backend web server configuration.\n\n### CORS\n\nYou can set CORS headers in Middleware to allow cross-origin requests, including [simple](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests) and [preflighted](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#preflighted_requests) requests.\n\n```tsx filename=\"middleware.ts\" switcher\nimport { NextRequest, NextResponse } from 'next/server'\n\nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n\nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n\nexport function middleware(request: NextRequest) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n\n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n\n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n\n  // Handle simple requests\n  const response = NextResponse.next()\n\n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n\n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n\n  return response\n}\n\nexport const config = {\n  matcher: '/api/:path*',\n}\n```\n\n```jsx filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\n\nconst allowedOrigins = ['https://acme.com', 'https://my-app.org']\n\nconst corsOptions = {\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n}\n\nexport function middleware(request) {\n  // Check the origin from the request\n  const origin = request.headers.get('origin') ?? ''\n  const isAllowedOrigin = allowedOrigins.includes(origin)\n\n  // Handle preflighted requests\n  const isPreflight = request.method === 'OPTIONS'\n\n  if (isPreflight) {\n    const preflightHeaders = {\n      ...(isAllowedOrigin && { 'Access-Control-Allow-Origin': origin }),\n      ...corsOptions,\n    }\n    return NextResponse.json({}, { headers: preflightHeaders })\n  }\n\n  // Handle simple requests\n  const response = NextResponse.next()\n\n  if (isAllowedOrigin) {\n    response.headers.set('Access-Control-Allow-Origin', origin)\n  }\n\n  Object.entries(corsOptions).forEach(([key, value]) => {\n    response.headers.set(key, value)\n  })\n\n  return response\n}\n\nexport const config = {\n  matcher: '/api/:path*',\n}\n```\n\n<AppOnly>\n\n> **Good to know:** You can configure CORS headers for individual routes in [Route Handlers](/docs/app/building-your-application/routing/route-handlers#cors).\n\n</AppOnly>\n\n## Producing a Response\n\nYou can respond from Middleware directly by returning a `Response` or `NextResponse` instance. (This is available since [Next.js v13.1.0](https://nextjs.org/blog/next-13-1#nextjs-advanced-middleware))\n\n```ts filename=\"middleware.ts\" switcher\nimport { NextRequest } from 'next/server'\nimport { isAuthenticated } from '@lib/auth'\n\n// Limit the middleware to paths starting with `/api/`\nexport const config = {\n  matcher: '/api/:function*',\n}\n\nexport function middleware(request: NextRequest) {\n  // Call our authentication function to check the request\n  if (!isAuthenticated(request)) {\n    // Respond with JSON indicating an error message\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { isAuthenticated } from '@lib/auth'\n\n// Limit the middleware to paths starting with `/api/`\nexport const config = {\n  matcher: '/api/:function*',\n}\n\nexport function middleware(request) {\n  // Call our authentication function to check the request\n  if (!isAuthenticated(request)) {\n    // Respond with JSON indicating an error message\n    return Response.json(\n      { success: false, message: 'authentication failed' },\n      { status: 401 }\n    )\n  }\n}\n```\n\n### `waitUntil` and `NextFetchEvent`\n\nThe `NextFetchEvent` object extends the native [`FetchEvent`](https://developer.mozilla.org/docs/Web/API/FetchEvent) object, and includes the [`waitUntil()`](https://developer.mozilla.org/docs/Web/API/ExtendableEvent/waitUntil) method.\n\nThe `waitUntil()` method takes a promise as an argument, and extends the lifetime of the Middleware until the promise settles. This is useful for performing work in the background.\n\n```ts filename=\"middleware.ts\"\nimport { NextResponse } from 'next/server'\nimport type { NextFetchEvent, NextRequest } from 'next/server'\n\nexport function middleware(req: NextRequest, event: NextFetchEvent) {\n  event.waitUntil(\n    fetch('https://my-analytics-platform.com', {\n      method: 'POST',\n      body: JSON.stringify({ pathname: req.nextUrl.pathname }),\n    })\n  )\n\n  return NextResponse.next()\n}\n```\n\n## Advanced Middleware Flags\n\nIn `v13.1` of Next.js two additional flags were introduced for middleware, `skipMiddlewareUrlNormalize` and `skipTrailingSlashRedirect` to handle advanced use cases.\n\n`skipTrailingSlashRedirect` disables Next.js redirects for adding or removing trailing slashes. This allows custom handling inside middleware to maintain the trailing slash for some paths but not others, which can make incremental migrations easier.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  skipTrailingSlashRedirect: true,\n}\n```\n\n```js filename=\"middleware.js\"\nconst legacyPrefixes = ['/docs', '/blog']\n\nexport default async function middleware(req) {\n  const { pathname } = req.nextUrl\n\n  if (legacyPrefixes.some((prefix) => pathname.startsWith(prefix))) {\n    return NextResponse.next()\n  }\n\n  // apply trailing slash handling\n  if (\n    !pathname.endsWith('/') &&\n    !pathname.match(/((?!\\.well-known(?:\\/.*)?)(?:[^/]+\\/)*[^/]+\\.\\w+)/)\n  ) {\n    return NextResponse.redirect(\n      new URL(`${req.nextUrl.pathname}/`, req.nextUrl)\n    )\n  }\n}\n```\n\n`skipMiddlewareUrlNormalize` allows for disabling the URL normalization in Next.js to make handling direct visits and client-transitions the same. In some advanced cases, this option provides full control by using the original URL.\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  skipMiddlewareUrlNormalize: true,\n}\n```\n\n```js filename=\"middleware.js\"\nexport default async function middleware(req) {\n  const { pathname } = req.nextUrl\n\n  // GET /_next/data/build-id/hello.json\n\n  console.log(pathname)\n  // with the flag this now /_next/data/build-id/hello.json\n  // without the flag this would be normalized to /hello\n}\n```\n\n## Runtime\n\nMiddleware currently only supports the [Edge runtime](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes). The Node.js runtime can not be used.\n\n## Version History\n\n| Version   | Changes                                                                                       |\n| --------- | --------------------------------------------------------------------------------------------- |\n| `v13.1.0` | Advanced Middleware flags added                                                               |\n| `v13.0.0` | Middleware can modify request headers, response headers, and send responses                   |\n| `v12.2.0` | Middleware is stable, please see the [upgrade guide](/docs/messages/middleware-upgrade-guide) |\n| `v12.0.9` | Enforce absolute URLs in Edge Runtime ([PR](https://github.com/vercel/next.js/pull/33410))    |\n| `v12.0.0` | Middleware (Beta) added                                                                       |\n", "01-building-your-application/01-routing/index.mdx": "---\ntitle: Routing Fundamentals\nnav_title: Routing\ndescription: Learn the fundamentals of routing for front-end applications.\n---\n\nThe skeleton of every application is routing. This page will introduce you to the **fundamental concepts** of routing for the web and how to handle routing in Next.js.\n\n## Terminology\n\nFirst, you will see these terms being used throughout the documentation. Here's a quick reference:\n\n<Image\n  alt=\"Terminology for Component Tree\"\n  srcLight=\"/docs/light/terminology-component-tree.png\"\n  srcDark=\"/docs/dark/terminology-component-tree.png\"\n  width=\"1600\"\n  height=\"832\"\n/>\n\n- **Tree:** A convention for visualizing a hierarchical structure. For example, a component tree with parent and children components, a folder structure, etc.\n- **Subtree:** Part of a tree, starting at a new root (first) and ending at the leaves (last).\n- **Root**: The first node in a tree or subtree, such as a root layout.\n- **Leaf:** Nodes in a subtree that have no children, such as the last segment in a URL path.\n\n<Image\n  alt=\"Terminology for URL Anatomy\"\n  srcLight=\"/docs/light/terminology-url-anatomy.png\"\n  srcDark=\"/docs/dark/terminology-url-anatomy.png\"\n  width=\"1600\"\n  height=\"371\"\n/>\n\n- **URL Segment:** Part of the URL path delimited by slashes.\n- **URL Path:** Part of the URL that comes after the domain (composed of segments).\n\n## The `app` Router\n\nIn version 13, Next.js introduced a new **App Router** built on [React Server Components](/docs/app/building-your-application/rendering/server-components), which supports shared layouts, nested routing, loading states, error handling, and more.\n\nThe App Router works in a new directory named `app`. The `app` directory works alongside the `pages` directory to allow for incremental adoption. This allows you to opt some routes of your application into the new behavior while keeping other routes in the `pages` directory for previous behavior. If your application uses the `pages` directory, please also see the [Pages Router](/docs/pages/building-your-application/routing) documentation.\n\n> **Good to know**: The App Router takes priority over the Pages Router. Routes across directories should not resolve to the same URL path and will cause a build-time error to prevent a conflict.\n\n<Image\n  alt=\"Next.js App Directory\"\n  srcLight=\"/docs/light/next-router-directories.png\"\n  srcDark=\"/docs/dark/next-router-directories.png\"\n  width=\"1600\"\n  height=\"444\"\n/>\n\nBy default, components inside `app` are [React Server Components](/docs/app/building-your-application/rendering/server-components). This is a performance optimization and allows you to easily adopt them, and you can also use [Client Components](/docs/app/building-your-application/rendering/client-components).\n\n> **Recommendation:** Check out the [Server](/docs/app/building-your-application/rendering/server-components) page if you're new to Server Components.\n\n## Roles of Folders and Files\n\nNext.js uses a file-system based router where:\n\n- **Folders** are used to define routes. A route is a single path of nested folders, following the file-system hierarchy from the **root folder** down to a final **leaf folder** that includes a `page.js` file. See [Defining Routes](/docs/app/building-your-application/routing/defining-routes).\n- **Files** are used to create UI that is shown for a route segment. See [special files](#file-conventions).\n\n## Route Segments\n\nEach folder in a route represents a **route segment**. Each route segment is mapped to a corresponding **segment** in a **URL path**.\n\n<Image\n  alt=\"How Route Segments Map to URL Segments\"\n  srcLight=\"/docs/light/route-segments-to-path-segments.png\"\n  srcDark=\"/docs/dark/route-segments-to-path-segments.png\"\n  width=\"1600\"\n  height=\"594\"\n/>\n\n## Nested Routes\n\nTo create a nested route, you can nest folders inside each other. For example, you can add a new `/dashboard/settings` route by nesting two new folders in the `app` directory.\n\nThe `/dashboard/settings` route is composed of three segments:\n\n- `/` (Root segment)\n- `dashboard` (Segment)\n- `settings` (Leaf segment)\n\n## File Conventions\n\nNext.js provides a set of special files to create UI with specific behavior in nested routes:\n\n|                                                                                           |                                                                                                |\n| ----------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------- |\n| [`layout`](/docs/app/building-your-application/routing/layouts-and-templates#layouts)     | Shared UI for a segment and its children                                                       |\n| [`page`](/docs/app/building-your-application/routing/pages)                               | Unique UI of a route and make routes publicly accessible                                       |\n| [`loading`](/docs/app/building-your-application/routing/loading-ui-and-streaming)         | Loading UI for a segment and its children                                                      |\n| [`not-found`](/docs/app/api-reference/file-conventions/not-found)                         | Not found UI for a segment and its children                                                    |\n| [`error`](/docs/app/building-your-application/routing/error-handling)                     | Error UI for a segment and its children                                                        |\n| [`global-error`](/docs/app/building-your-application/routing/error-handling)              | Global Error UI                                                                                |\n| [`route`](/docs/app/building-your-application/routing/route-handlers)                     | Server-side API endpoint                                                                       |\n| [`template`](/docs/app/building-your-application/routing/layouts-and-templates#templates) | Specialized re-rendered Layout UI                                                              |\n| [`default`](/docs/app/api-reference/file-conventions/default)                             | Fallback UI for [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes) |\n\n> **Good to know**: `.js`, `.jsx`, or `.tsx` file extensions can be used for special files.\n\n## Component Hierarchy\n\nThe React components defined in special files of a route segment are rendered in a specific hierarchy:\n\n- `layout.js`\n- `template.js`\n- `error.js` (React error boundary)\n- `loading.js` (React suspense boundary)\n- `not-found.js` (React error boundary)\n- `page.js` or nested `layout.js`\n\n<Image\n  alt=\"Component Hierarchy for File Conventions\"\n  srcLight=\"/docs/light/file-conventions-component-hierarchy.png\"\n  srcDark=\"/docs/dark/file-conventions-component-hierarchy.png\"\n  width=\"1600\"\n  height=\"643\"\n/>\n\nIn a nested route, the components of a segment will be nested **inside** the components of its parent segment.\n\n<Image\n  alt=\"Nested File Conventions Component Hierarchy\"\n  srcLight=\"/docs/light/nested-file-conventions-component-hierarchy.png\"\n  srcDark=\"/docs/dark/nested-file-conventions-component-hierarchy.png\"\n  width=\"1600\"\n  height=\"863\"\n/>\n\n## Colocation\n\nIn addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc) inside folders in the `app` directory.\n\nThis is because while folders define routes, only the contents returned by `page.js` or `route.js` are publicly addressable.\n\n<Image\n  alt=\"An example folder structure with colocated files\"\n  srcLight=\"/docs/light/project-organization-colocation.png\"\n  srcDark=\"/docs/dark/project-organization-colocation.png\"\n  width=\"1600\"\n  height=\"1011\"\n/>\n\nLearn more about [Project Organization and Colocation](/docs/app/building-your-application/routing/colocation).\n\n## Advanced Routing Patterns\n\nThe App Router also provides a set of conventions to help you implement more advanced routing patterns. These include:\n\n- [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes): Allow you to simultaneously show two or more pages in the same view that can be navigated independently. You can use them for split views that have their own sub-navigation. E.g. Dashboards.\n- [Intercepting Routes](/docs/app/building-your-application/routing/intercepting-routes): Allow you to intercept a route and show it in the context of another route. You can use these when keeping the context for the current page is important. E.g. Seeing all tasks while editing one task or expanding a photo in a feed.\n\nThese patterns allow you to build richer and more complex UIs, democratizing features that were historically complex for small teams and individual developers to implement.\n\n## Next Steps\n\nNow that you understand the fundamentals of routing in Next.js, follow the links below to create your first routes:\n", "01-building-your-application/01-routing/12-intercepting-routes.mdx": "---\ntitle: Intercepting Routes\ndescription: Use intercepting routes to load a new route within the current layout while masking the browser URL, useful for advanced routing patterns such as modals.\nrelated:\n  title: Next Steps\n  description: Learn how to use modals with Intercepted and Parallel Routes.\n  links:\n    - app/building-your-application/routing/parallel-routes\n---\n\nIntercepting routes allows you to load a route from another part of your application within the current layout. This routing paradigm can be useful when you want to display the content of a route without the user switching to a different context.\n\nFor example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the `/photo/123` route, masks the URL, and overlays it over `/feed`.\n\n<Image\n  alt=\"Intercepting routes soft navigation\"\n  srcLight=\"/docs/light/intercepting-routes-soft-navigate.png\"\n  srcDark=\"/docs/dark/intercepting-routes-soft-navigate.png\"\n  width=\"1600\"\n  height=\"617\"\n/>\n\nHowever, when navigating to the photo by clicking a shareable URL or by refreshing the page, the entire photo page should render instead of the modal. No route interception should occur.\n\n<Image\n  alt=\"Intercepting routes hard navigation\"\n  srcLight=\"/docs/light/intercepting-routes-hard-navigate.png\"\n  srcDark=\"/docs/dark/intercepting-routes-hard-navigate.png\"\n  width=\"1600\"\n  height=\"604\"\n/>\n\n## Convention\n\nIntercepting routes can be defined with the `(..)` convention, which is similar to relative path convention `../` but for segments.\n\nYou can use:\n\n- `(.)` to match segments on the **same level**\n- `(..)` to match segments **one level above**\n- `(..)(..)` to match segments **two levels above**\n- `(...)` to match segments from the **root** `app` directory\n\nFor example, you can intercept the `photo` segment from within the `feed` segment by creating a `(..)photo` directory.\n\n<Image\n  alt=\"Intercepting routes folder structure\"\n  srcLight=\"/docs/light/intercepted-routes-files.png\"\n  srcDark=\"/docs/dark/intercepted-routes-files.png\"\n  width=\"1600\"\n  height=\"604\"\n/>\n\n> Note that the `(..)` convention is based on _route segments_, not the file-system.\n\n## Examples\n\n### Modals\n\nIntercepting Routes can be used together with [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes) to create modals. This allows you to solve common challenges when building modals, such as:\n\n- Making the modal content **shareable through a URL**.\n- **Preserving context** when the page is refreshed, instead of closing the modal.\n- **Closing the modal on backwards navigation** rather than going to the previous route.\n- **Reopening the modal on forwards navigation**.\n\nConsider the following UI pattern, where a user can open a photo modal from a gallery using client-side navigation, or navigate to the photo page directly from a shareable URL:\n\n<Image\n  alt=\"Intercepting routes modal example\"\n  srcLight=\"/docs/light/intercepted-routes-modal-example.png\"\n  srcDark=\"/docs/dark/intercepted-routes-modal-example.png\"\n  width=\"1600\"\n  height=\"976\"\n/>\n\nIn the above example, the path to the `photo` segment can use the `(..)` matcher since `@modal` is a slot and **not** a segment. This means that the `photo` route is only one segment level higher, despite being two file-system levels higher.\n\nSee the [Parallel Routes](/docs/app/building-your-application/routing/parallel-routes#modals) documentation for a step-by-step example, or see our [image gallery example](https://github.com/vercel-labs/nextgram).\n\n> **Good to know:**\n>\n> - Other examples could include opening a login modal in a top navbar while also having a dedicated `/login` page, or opening a shopping cart in a side modal.\n", "01-building-your-application/01-routing/08-route-groups.mdx": "---\ntitle: Route Groups\ndescription: Route Groups can be used to partition your Next.js application into different sections.\n---\n\nIn the `app` directory, nested folders are normally mapped to URL paths. However, you can mark a folder as a **Route Group** to prevent the folder from being included in the route's URL path.\n\nThis allows you to organize your route segments and project files into logical groups without affecting the URL path structure.\n\nRoute groups are useful for:\n\n- [Organizing routes into groups](#organize-routes-without-affecting-the-url-path) e.g. by site section, intent, or team.\n- Enabling [nested layouts](/docs/app/building-your-application/routing/layouts-and-templates) in the same route segment level:\n  - [Creating multiple nested layouts in the same segment, including multiple root layouts](#creating-multiple-root-layouts)\n  - [Adding a layout to a subset of routes in a common segment](#opting-specific-segments-into-a-layout)\n\n## Convention\n\nA route group can be created by wrapping a folder's name in parenthesis: `(folderName)`\n\n## Examples\n\n### Organize routes without affecting the URL path\n\nTo organize routes without affecting the URL, create a group to keep related routes together. The folders in parenthesis will be omitted from the URL (e.g. `(marketing)` or `(shop)`.\n\n<Image\n  alt=\"Organizing Routes with Route Groups\"\n  srcLight=\"/docs/light/route-group-organisation.png\"\n  srcDark=\"/docs/dark/route-group-organisation.png\"\n  width=\"1600\"\n  height=\"930\"\n/>\n\nEven though routes inside `(marketing)` and `(shop)` share the same URL hierarchy, you can create a different layout for each group by adding a `layout.js` file inside their folders.\n\n<Image\n  alt=\"Route Groups with Multiple Layouts\"\n  srcLight=\"/docs/light/route-group-multiple-layouts.png\"\n  srcDark=\"/docs/dark/route-group-multiple-layouts.png\"\n  width=\"1600\"\n  height=\"768\"\n/>\n\n### Opting specific segments into a layout\n\nTo opt specific routes into a layout, create a new route group (e.g. `(shop)`) and move the routes that share the same layout into the group (e.g. `account` and `cart`). The routes outside of the group will not share the layout (e.g. `checkout`).\n\n<Image\n  alt=\"Route Groups with Opt-in Layouts\"\n  srcLight=\"/docs/light/route-group-opt-in-layouts.png\"\n  srcDark=\"/docs/dark/route-group-opt-in-layouts.png\"\n  width=\"1600\"\n  height=\"930\"\n/>\n\n### Creating multiple root layouts\n\nTo create multiple [root layouts](/docs/app/building-your-application/routing/layouts-and-templates#root-layout-required), remove the top-level `layout.js` file, and add a `layout.js` file inside each route group. This is useful for partitioning an application into sections that have a completely different UI or experience. The `<html>` and `<body>` tags need to be added to each root layout.\n\n<Image\n  alt=\"Route Groups with Multiple Root Layouts\"\n  srcLight=\"/docs/light/route-group-multiple-root-layouts.png\"\n  srcDark=\"/docs/dark/route-group-multiple-root-layouts.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nIn the example above, both `(marketing)` and `(shop)` have their own root layout.\n\n---\n\n> **Good to know**:\n>\n> - The naming of route groups has no special significance other than for organization. They do not affect the URL path.\n> - Routes that include a route group **should not** resolve to the same URL path as other routes. For example, since route groups don't affect URL structure, `(marketing)/about/page.js` and `(shop)/about/page.js` would both resolve to `/about` and cause an error.\n> - If you use multiple root layouts without a top-level `layout.js` file, your home `page.js` file should be defined in one of the route groups, For example: `app/(marketing)/page.js`.\n> - Navigating **across multiple root layouts** will cause a **full page load** (as opposed to a client-side navigation). For example, navigating from `/cart` that uses `app/(shop)/layout.js` to `/blog` that uses `app/(marketing)/layout.js` will cause a full page load. This **only** applies to multiple root layouts.\n", "01-building-your-application/01-routing/03-layouts-and-templates.mdx": "---\ntitle: Layouts and Templates\ndescription: Create your first shared layout in Next.js.\n---\n\nThe special files [layout.js](#layouts) and [template.js](#templates) allow you to create UI that is shared between [routes](/docs/app/building-your-application/routing/defining-routes#creating-routes). This page will guide you through how and when to use these special files.\n\n## Layouts\n\nA layout is UI that is **shared** between multiple routes. On navigation, layouts preserve state, remain interactive, and do not re-render. Layouts can also be [nested](#nesting-layouts).\n\nYou can define a layout by default exporting a React component from a `layout.js` file. The component should accept a `children` prop that will be populated with a child layout (if it exists) or a page during rendering.\n\nFor example, the layout will be shared with the `/dashboard` and `/dashboard/settings` pages:\n\n<Image\n  alt=\"layout.js special file\"\n  srcLight=\"/docs/light/layout-special-file.png\"\n  srcDark=\"/docs/dark/layout-special-file.png\"\n  width=\"1600\"\n  height=\"606\"\n/>\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n\n      {children}\n    </section>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nexport default function DashboardLayout({\n  children, // will be a page or nested layout\n}) {\n  return (\n    <section>\n      {/* Include shared UI here e.g. a header or sidebar */}\n      <nav></nav>\n\n      {children}\n    </section>\n  )\n}\n```\n\n### Root Layout (Required)\n\nThe root layout is defined at the top level of the `app` directory and applies to all routes. This layout is **required** and must contain `html` and `body` tags, allowing you to modify the initial HTML returned from the server.\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function RootLayout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        {/* Layout UI */}\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n### Nesting Layouts\n\nBy default, layouts in the folder hierarchy are **nested**, which means they wrap child layouts via their `children` prop. You can nest layouts by adding `layout.js` inside specific route segments (folders).\n\nFor example, to create a layout for the `/dashboard` route, add a new `layout.js` file inside the `dashboard` folder:\n\n<Image\n  alt=\"Nested Layout\"\n  srcLight=\"/docs/light/nested-layout.png\"\n  srcDark=\"/docs/dark/nested-layout.png\"\n  width=\"1600\"\n  height=\"606\"\n/>\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nexport default function DashboardLayout({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  return <section>{children}</section>\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nexport default function DashboardLayout({ children }) {\n  return <section>{children}</section>\n}\n```\n\nIf you were to combine the two layouts above, the root layout (`app/layout.js`) would wrap the dashboard layout (`app/dashboard/layout.js`), which would wrap route segments inside `app/dashboard/*`.\n\nThe two layouts would be nested as such:\n\n<Image\n  alt=\"Nested Layouts\"\n  srcLight=\"/docs/light/nested-layouts-ui.png\"\n  srcDark=\"/docs/dark/nested-layouts-ui.png\"\n  width=\"1600\"\n  height=\"1026\"\n/>\n\n> **Good to know**:\n>\n> - `.js`, `.jsx`, or `.tsx` file extensions can be used for Layouts.\n> - Only the root layout can contain `<html>` and `<body>` tags.\n> - When a `layout.js` and `page.js` file are defined in the same folder, the layout will wrap the page.\n> - Layouts are [Server Components](/docs/app/building-your-application/rendering/server-components) by default but can be set to a [Client Component](/docs/app/building-your-application/rendering/client-components).\n> - Layouts can fetch data. View the [Data Fetching](/docs/app/building-your-application/data-fetching) section for more information.\n> - Passing data between a parent layout and its children is not possible. However, you can fetch the same data in a route more than once, and React will [automatically dedupe the requests](/docs/app/building-your-application/caching#request-memoization) without affecting performance.\n> - Layouts do not have access to `pathname` ([learn more](/docs/app/api-reference/file-conventions/layout)). But imported Client Components can access the pathname using [`usePathname`](/docs/app/api-reference/functions/use-pathname) hook.\n> - Layouts do not have access to the route segments below itself. To access all route segments, you can use [`useSelectedLayoutSegment`](/docs/app/api-reference/functions/use-selected-layout-segment) or [`useSelectedLayoutSegments`](/docs/app/api-reference/functions/use-selected-layout-segments) in a Client Component.\n> - You can use [Route Groups](/docs/app/building-your-application/routing/route-groups) to opt specific route segments in and out of shared layouts.\n> - You can use [Route Groups](/docs/app/building-your-application/routing/route-groups) to create multiple root layouts. See an [example here](/docs/app/building-your-application/routing/route-groups#creating-multiple-root-layouts).\n> - **Migrating from the `pages` directory:** The root layout replaces the [`_app.js`](/docs/pages/building-your-application/routing/custom-app) and [`_document.js`](/docs/pages/building-your-application/routing/custom-document) files. [View the migration guide](/docs/app/building-your-application/upgrading/app-router-migration#migrating-_documentjs-and-_appjs).\n\n## Templates\n\nTemplates are similar to layouts in that they wrap a child layout or page. Unlike layouts that persist across routes and maintain state, templates create a new instance for each of their children on navigation. This means that when a user navigates between routes that share a template, a new instance of the child is mounted, DOM elements are recreated, state is **not** preserved in Client Components, and effects are re-synchronized.\n\nThere may be cases where you need those specific behaviors, and templates would be a more suitable option than layouts. For example:\n\n- To resynchronize `useEffect` on navigation.\n- To reset the state of a child Client Components on navigation.\n\nA template can be defined by exporting a default React component from a `template.js` file. The component should accept a `children` prop.\n\n<Image\n  alt=\"template.js special file\"\n  srcLight=\"/docs/light/template-special-file.png\"\n  srcDark=\"/docs/dark/template-special-file.png\"\n  width=\"1600\"\n  height=\"444\"\n/>\n\n```tsx filename=\"app/template.tsx\" switcher\nexport default function Template({ children }: { children: React.ReactNode }) {\n  return <div>{children}</div>\n}\n```\n\n```jsx filename=\"app/template.js\" switcher\nexport default function Template({ children }) {\n  return <div>{children}</div>\n}\n```\n\nIn terms of nesting, `template.js` is rendered between a layout and its children. Here's a simplified output:\n\n```jsx filename=\"Output\"\n<Layout>\n  {/* Note that the template is given a unique key. */}\n  <Template key={routeParam}>{children}</Template>\n</Layout>\n```\n\n## Examples\n\n### Metadata\n\nYou can modify the `<head>` HTML elements such as `title` and `meta` using the [Metadata APIs](/docs/app/building-your-application/optimizing/metadata).\n\nMetadata can be defined by exporting a [`metadata` object](/docs/app/api-reference/functions/generate-metadata#the-metadata-object) or [`generateMetadata` function](/docs/app/api-reference/functions/generate-metadata#generatemetadata-function) in a [`layout.js`](/docs/app/api-reference/file-conventions/layout) or [`page.js`](/docs/app/api-reference/file-conventions/page) file.\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { Metadata } from 'next'\n\nexport const metadata: Metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nexport const metadata = {\n  title: 'Next.js',\n}\n\nexport default function Page() {\n  return '...'\n}\n```\n\n> **Good to know**: You should **not** manually add `<head>` tags such as `<title>` and `<meta>` to root layouts. Instead, use the [Metadata API](/docs/app/api-reference/functions/generate-metadata) which automatically handles advanced requirements such as streaming and de-duplicating `<head>` elements.\n\nLearn more about available metadata options in the [API reference](/docs/app/api-reference/functions/generate-metadata).\n\n### Active Nav Links\n\nYou can use the [usePathname()](/docs/app/api-reference/functions/use-pathname) hook to determine if a nav link is active.\n\nSince `usePathname()` is a client hook, you need to extract the nav links into a Client Component, which can be imported into your layout or template:\n\n```tsx filename=\"app/ui/nav-links.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function NavLinks() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n```\n\n```jsx filename=\"app/ui/nav-links.js\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n```\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport { NavLinks } from '@/app/ui/nav-links'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavLinks />\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport { NavLinks } from '@/app/ui/nav-links'\n\nexport default function Layout({ children }) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <NavLinks />\n        <main>{children}</main>\n      </body>\n    </html>\n  )\n}\n```\n", "01-building-your-application/01-routing/04-linking-and-navigating.mdx": "---\ntitle: Linking and Navigating\ndescription: Learn how navigation works in Next.js, and how to use the Link Component and `useRouter` hook.\nrelated:\n  links:\n    - app/building-your-application/caching\n    - app/building-your-application/configuring/typescript\n---\n\nThere are four ways to navigate between routes in Next.js:\n\n- Using the [`<Link>` Component](#link-component)\n- Using the [`useRouter` hook](#userouter-hook) ([Client Components](/docs/app/building-your-application/rendering/client-components))\n- Using the [`redirect` function](#redirect-function) ([Server Components](/docs/app/building-your-application/rendering/server-components))\n- Using the native [History API](#using-the-native-history-api)\n\nThis page will go through how to use each of these options, and dive deeper into how navigation works.\n\n## `<Link>` Component\n\n`<Link>` is a built-in component that extends the HTML `<a>` tag to provide [prefetching](#2-prefetching) and client-side navigation between routes. It is the primary and recommended way to navigate between routes in Next.js.\n\nYou can use it by importing it from `next/link`, and passing a `href` prop to the component:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport Link from 'next/link'\n\nexport default function Page() {\n  return <Link href=\"/dashboard\">Dashboard</Link>\n}\n```\n\nThere are other optional props you can pass to `<Link>`. See the [API reference](/docs/app/api-reference/components/link) for more.\n\n### Examples\n\n#### Linking to Dynamic Segments\n\nWhen linking to [dynamic segments](/docs/app/building-your-application/routing/dynamic-routes), you can use [template literals and interpolation](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals) to generate a list of links. For example, to generate a list of blog posts:\n\n```jsx filename=\"app/blog/PostList.js\"\nimport Link from 'next/link'\n\nexport default function PostList({ posts }) {\n  return (\n    <ul>\n      {posts.map((post) => (\n        <li key={post.id}>\n          <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n#### Checking Active Links\n\nYou can use [`usePathname()`](/docs/app/api-reference/functions/use-pathname) to determine if a link is active. For example, to add a class to the active link, you can check if the current `pathname` matches the `href` of the link:\n\n```tsx filename=\"@/app/ui/nav-links.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n```\n\n```jsx filename=\"@/app/ui/nav-links.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\nimport Link from 'next/link'\n\nexport function Links() {\n  const pathname = usePathname()\n\n  return (\n    <nav>\n      <Link className={`link ${pathname === '/' ? 'active' : ''}`} href=\"/\">\n        Home\n      </Link>\n\n      <Link\n        className={`link ${pathname === '/about' ? 'active' : ''}`}\n        href=\"/about\"\n      >\n        About\n      </Link>\n    </nav>\n  )\n}\n```\n\n#### Scrolling to an `id`\n\nThe default behavior of the Next.js App Router is to **scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.**\n\nIf you'd like to scroll to a specific `id` on navigation, you can append your URL with a `#` hash link or just pass a hash link to the `href` prop. This is possible since `<Link>` renders to an `<a>` element.\n\n```jsx\n<Link href=\"/dashboard#settings\">Settings</Link>\n\n// Output\n<a href=\"/dashboard#settings\">Settings</a>\n```\n\n> **Good to know**:\n>\n> - Next.js will scroll to the [Page](/docs/app/building-your-application/routing/pages) if it is not visible in the viewport upon navigation.\n\n#### Disabling scroll restoration\n\nThe default behavior of the Next.js App Router is to **scroll to the top of a new route or to maintain the scroll position for backwards and forwards navigation.** If you'd like to disable this behavior, you can pass `scroll={false}` to the `<Link>` component, or `scroll: false` to `router.push()` or `router.replace()`.\n\n```jsx\n// next/link\n<Link href=\"/dashboard\" scroll={false}>\n  Dashboard\n</Link>\n```\n\n```jsx\n// useRouter\nimport { useRouter } from 'next/navigation'\n\nconst router = useRouter()\n\nrouter.push('/dashboard', { scroll: false })\n```\n\n## `useRouter()` hook\n\nThe `useRouter` hook allows you to programmatically change routes from [Client Components](/docs/app/building-your-application/rendering/client-components).\n\n```jsx filename=\"app/page.js\"\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\nFor a full list of `useRouter` methods, see the [API reference](/docs/app/api-reference/functions/use-router).\n\n> **Recommendation:** Use the `<Link>` component to navigate between routes unless you have a specific requirement for using `useRouter`.\n\n## `redirect` function\n\nFor [Server Components](/docs/app/building-your-application/rendering/server-components), use the `redirect` function instead.\n\n```tsx filename=\"app/team/[id]/page.tsx\" switcher\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id: string) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }: { params: { id: string } }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n```jsx filename=\"app/team/[id]/page.js\" switcher\nimport { redirect } from 'next/navigation'\n\nasync function fetchTeam(id) {\n  const res = await fetch('https://...')\n  if (!res.ok) return undefined\n  return res.json()\n}\n\nexport default async function Profile({ params }) {\n  const team = await fetchTeam(params.id)\n  if (!team) {\n    redirect('/login')\n  }\n\n  // ...\n}\n```\n\n> **Good to know**:\n>\n> - `redirect` returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.\n> - `redirect` internally throws an error so it should be called outside of `try/catch` blocks.\n> - `redirect` can be called in Client Components during the rendering process but not in event handlers. You can use the [`useRouter` hook](#userouter-hook) instead.\n> - `redirect` also accepts absolute URLs and can be used to redirect to external links.\n> - If you'd like to redirect before the render process, use [`next.config.js`](/docs/app/building-your-application/routing/redirecting#redirects-in-nextconfigjs) or [Middleware](/docs/app/building-your-application/routing/redirecting#nextresponseredirect-in-middleware).\n\nSee the [`redirect` API reference](/docs/app/api-reference/functions/redirect) for more information.\n\n## Using the native History API\n\nNext.js allows you to use the native [`window.history.pushState`](https://developer.mozilla.org/en-US/docs/Web/API/History/pushState) and [`window.history.replaceState`](https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState) methods to update the browser's history stack without reloading the page.\n\n`pushState` and `replaceState` calls integrate into the Next.js Router, allowing you to sync with [`usePathname`](/docs/app/api-reference/functions/use-pathname) and [`useSearchParams`](/docs/app/api-reference/functions/use-search-params).\n\n### `window.history.pushState`\n\nUse it to add a new entry to the browser's history stack. The user can navigate back to the previous state. For example, to sort a list of products:\n\n```tsx fileName=\"app/ui/sort-products.tsx\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder: string) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n\n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\n```jsx fileName=\"app/ui/sort-products.js\" switcher\n'use client'\n\nimport { useSearchParams } from 'next/navigation'\n\nexport default function SortProducts() {\n  const searchParams = useSearchParams()\n\n  function updateSorting(sortOrder) {\n    const params = new URLSearchParams(searchParams.toString())\n    params.set('sort', sortOrder)\n    window.history.pushState(null, '', `?${params.toString()}`)\n  }\n\n  return (\n    <>\n      <button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n      <button onClick={() => updateSorting('desc')}>Sort Descending</button>\n    </>\n  )\n}\n```\n\n### `window.history.replaceState`\n\nUse it to replace the current entry on the browser's history stack. The user is not able to navigate back to the previous state. For example, to switch the application's locale:\n\n```tsx fileName=\"app/ui/locale-switcher.tsx\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n\n  function switchLocale(locale: string) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n\n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n```\n\n```jsx fileName=\"app/ui/locale-switcher.js\" switcher\n'use client'\n\nimport { usePathname } from 'next/navigation'\n\nexport function LocaleSwitcher() {\n  const pathname = usePathname()\n\n  function switchLocale(locale) {\n    // e.g. '/en/about' or '/fr/contact'\n    const newPath = `/${locale}${pathname}`\n    window.history.replaceState(null, '', newPath)\n  }\n\n  return (\n    <>\n      <button onClick={() => switchLocale('en')}>English</button>\n      <button onClick={() => switchLocale('fr')}>French</button>\n    </>\n  )\n}\n```\n\n## How Routing and Navigation Works\n\nThe App Router uses a hybrid approach for routing and navigation. On the server, your application code is automatically [code-split](#1-code-splitting) by route segments. And on the client, Next.js [prefetches](#2-prefetching) and [caches](#3-caching) the route segments. This means, when a user navigates to a new route, the browser doesn't reload the page, and only the route segments that change re-render - improving the navigation experience and performance.\n\n### 1. Code Splitting\n\nCode splitting allows you to split your application code into smaller bundles to be downloaded and executed by the browser. This reduces the amount of data transferred and execution time for each request, leading to improved performance.\n\n[Server Components](/docs/app/building-your-application/rendering/server-components) allow your application code to be automatically code-split by route segments. This means only the code needed for the current route is loaded on navigation.\n\n### 2. Prefetching\n\nPrefetching is a way to preload a route in the background before the user visits it.\n\nThere are two ways routes are prefetched in Next.js:\n\n- **`<Link>` component**: Routes are automatically prefetched as they become visible in the user's viewport. Prefetching happens when the page first loads or when it comes into view through scrolling.\n- **`router.prefetch()`**: The `useRouter` hook can be used to prefetch routes programmatically.\n\nThe `<Link>`'s default prefetching behavior (i.e. when the `prefetch` prop is left unspecified or set to `null`) is different depending on your usage of [`loading.js`](/docs/app/api-reference/file-conventions/loading). Only the shared layout, down the rendered \"tree\" of components until the first `loading.js` file, is prefetched and cached for `30s`. This reduces the cost of fetching an entire dynamic route, and it means you can show an [instant loading state](/docs/app/building-your-application/routing/loading-ui-and-streaming#instant-loading-states) for better visual feedback to users.\n\nYou can disable prefetching by setting the `prefetch` prop to `false`. Alternatively, you can prefetch the full page data beyond the loading boundaries by setting the `prefetch` prop to `true`.\n\nSee the [`<Link>` API reference](/docs/app/api-reference/components/link) for more information.\n\n> **Good to know**:\n>\n> - Prefetching is not enabled in development, only in production.\n\n### 3. Caching\n\nNext.js has an **in-memory client-side cache** called the [Router Cache](/docs/app/building-your-application/caching#router-cache). As users navigate around the app, the React Server Component Payload of [prefetched](#2-prefetching) route segments and visited routes are stored in the cache.\n\nThis means on navigation, the cache is reused as much as possible, instead of making a new request to the server - improving performance by reducing the number of requests and data transferred.\n\nLearn more about how the [Router Cache](/docs/app/building-your-application/caching#router-cache) works and how to configure it.\n\n### 4. Partial Rendering\n\nPartial rendering means only the route segments that change on navigation re-render on the client, and any shared segments are preserved.\n\nFor example, when navigating between two sibling routes, `/dashboard/settings` and `/dashboard/analytics`, the `settings` and `analytics` pages will be rendered, and the shared `dashboard` layout will be preserved.\n\n<Image\n  alt=\"How partial rendering works\"\n  srcLight=\"/docs/light/partial-rendering.png\"\n  srcDark=\"/docs/dark/partial-rendering.png\"\n  width=\"1600\"\n  height=\"945\"\n/>\n\nWithout partial rendering, each navigation would cause the full page to re-render on the client. Rendering only the segment that changes reduces the amount of data transferred and execution time, leading to improved performance.\n\n### 5. Soft Navigation\n\nBrowsers perform a \"hard navigation\" when navigating between pages. The Next.js App Router enables \"soft navigation\" between pages, ensuring only the route segments that have changed are re-rendered (partial rendering). This enables client React state to be preserved during navigation.\n\n### 6. Back and Forward Navigation\n\nBy default, Next.js will maintain the scroll position for backwards and forwards navigation, and re-use route segments in the [Router Cache](/docs/app/building-your-application/caching#router-cache).\n\n### 7. Routing between `pages/` and `app/`\n\nWhen incrementally migrating from `pages/` to `app/`, the Next.js router will automatically handle hard navigation between the two. To detect transitions from `pages/` to `app/`, there is a client router filter that leverages probabilistic checking of app routes, which can occasionally result in false positives. By default, such occurrences should be very rare, as we configure the false positive likelihood to be 0.01%. This likelihood can be customized via the `experimental.clientRouterFilterAllowedRate` option in `next.config.js`. It's important to note that lowering the false positive rate will increase the size of the generated filter in the client bundle.\n\nAlternatively, if you prefer to disable this handling completely and manage the routing between `pages/` and `app/` manually, you can set `experimental.clientRouterFilter` to false in `next.config.js`. When this feature is disabled, any dynamic routes in pages that overlap with app routes won't be navigated to properly by default.\n", "01-building-your-application/01-routing/05-error-handling.mdx": "---\ntitle: Error Handling\ndescription: Handle runtime errors by automatically wrapping route segments and their nested children in a React Error Boundary.\nrelated:\n  links:\n    - app/api-reference/file-conventions/error\n---\n\nThe `error.js` file convention allows you to gracefully handle unexpected runtime errors in [nested routes](/docs/app/building-your-application/routing#nested-routes).\n\n- Automatically wrap a route segment and its nested children in a [React Error Boundary](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary).\n- Create error UI tailored to specific segments using the file-system hierarchy to adjust granularity.\n- Isolate errors to affected segments while keeping the rest of the application functional.\n- Add functionality to attempt to recover from an error without a full page reload.\n\nCreate error UI by adding an `error.js` file inside a route segment and exporting a React component:\n\n<Image\n  alt=\"error.js special file\"\n  srcLight=\"/docs/light/error-special-file.png\"\n  srcDark=\"/docs/dark/error-special-file.png\"\n  width=\"1600\"\n  height=\"606\"\n/>\n\n```tsx filename=\"app/dashboard/error.tsx\" switcher\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/error.js\" switcher\n'use client' // Error components must be Client Components\n\nimport { useEffect } from 'react'\n\nexport default function Error({ error, reset }) {\n  useEffect(() => {\n    // Log the error to an error reporting service\n    console.error(error)\n  }, [error])\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  )\n}\n```\n\n### How `error.js` Works\n\n<Image\n  alt=\"How error.js works\"\n  srcLight=\"/docs/light/error-overview.png\"\n  srcDark=\"/docs/dark/error-overview.png\"\n  width=\"1600\"\n  height=\"903\"\n/>\n\n- `error.js` automatically creates a [React Error Boundary](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary) that **wraps** a nested child segment or `page.js` component.\n- The React component exported from the `error.js` file is used as the **fallback** component.\n- If an error is thrown within the error boundary, the error is **contained**, and the fallback component is **rendered**.\n- When the fallback error component is active, layouts **above** the error boundary **maintain** their state and **remain** interactive, and the error component can display functionality to recover from the error.\n\n### Recovering From Errors\n\nThe cause of an error can sometimes be temporary. In these cases, simply trying again might resolve the issue.\n\nAn error component can use the `reset()` function to prompt the user to attempt to recover from the error. When executed, the function will try to re-render the Error boundary's contents. If successful, the fallback error component is replaced with the result of the re-render.\n\n```tsx filename=\"app/dashboard/error.tsx\" switcher\n'use client'\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/error.js\" switcher\n'use client'\n\nexport default function Error({ error, reset }) {\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button onClick={() => reset()}>Try again</button>\n    </div>\n  )\n}\n```\n\n### Nested Routes\n\nReact components created through [special files](/docs/app/building-your-application/routing#file-conventions) are rendered in a [specific nested hierarchy](/docs/app/building-your-application/routing#component-hierarchy).\n\nFor example, a nested route with two segments that both include `layout.js` and `error.js` files are rendered in the following _simplified_ component hierarchy:\n\n<Image\n  alt=\"Nested Error Component Hierarchy\"\n  srcLight=\"/docs/light/nested-error-component-hierarchy.png\"\n  srcDark=\"/docs/dark/nested-error-component-hierarchy.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nThe nested component hierarchy has implications for the behavior of `error.js` files across a nested route:\n\n- Errors bubble up to the nearest parent error boundary. This means an `error.js` file will handle errors for all its nested child segments. More or less granular error UI can be achieved by placing `error.js` files at different levels in the nested folders of a route.\n- An `error.js` boundary will **not** handle errors thrown in a `layout.js` component in the **same** segment because the error boundary is nested **inside** that layout's component.\n\n### Handling Errors in Layouts\n\n`error.js` boundaries do **not** catch errors thrown in `layout.js` or `template.js` components of the **same segment**. This [intentional hierarchy](#nested-routes) keeps important UI that is shared between sibling routes (such as navigation) visible and functional when an error occurs.\n\nTo handle errors within a specific layout or template, place an `error.js` file in the layout's parent segment.\n\nTo handle errors within the root layout or template, use a variation of `error.js` called `global-error.js`.\n\n### Handling Errors in Root Layouts\n\nThe root `app/error.js` boundary does **not** catch errors thrown in the root `app/layout.js` or `app/template.js` component.\n\nTo specifically handle errors in these root components, use a variation of `error.js` called `app/global-error.js` located in the root `app` directory.\n\nUnlike the root `error.js`, the `global-error.js` error boundary wraps the **entire** application, and its fallback component replaces the root layout when active. Because of this, it is important to note that `global-error.js` **must** define its own `<html>` and `<body>` tags.\n\n`global-error.js` is the least granular error UI and can be considered \"catch-all\" error handling for the whole application. It is unlikely to be triggered often as root components are typically less dynamic, and other `error.js` boundaries will catch most errors.\n\nEven if a `global-error.js` is defined, it is still recommended to define a root `error.js` whose fallback component will be rendered **within** the root layout, which includes globally shared UI and branding.\n\n```tsx filename=\"app/global-error.tsx\" switcher\n'use client'\n\nexport default function GlobalError({\n  error,\n  reset,\n}: {\n  error: Error & { digest?: string }\n  reset: () => void\n}) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n```jsx filename=\"app/global-error.js\" switcher\n'use client'\n\nexport default function GlobalError({ error, reset }) {\n  return (\n    <html>\n      <body>\n        <h2>Something went wrong!</h2>\n        <button onClick={() => reset()}>Try again</button>\n      </body>\n    </html>\n  )\n}\n```\n\n> **Good to know**:\n>\n> - `global-error.js` is only enabled in production. In development, our error overlay will show instead.\n\n### Handling Server Errors\n\nIf an error is thrown inside a Server Component, Next.js will forward an `Error` object (stripped of sensitive error information in production) to the nearest `error.js` file as the `error` prop.\n\n#### Securing Sensitive Error Information\n\nDuring production, the `Error` object forwarded to the client only includes a generic `message` and `digest` property.\n\nThis is a security precaution to avoid leaking potentially sensitive details included in the error to the client.\n\nThe `message` property contains a generic message about the error and the `digest` property contains an automatically generated hash of the error that can be used to match the corresponding error in server-side logs.\n\nDuring development, the `Error` object forwarded to the client will be serialized and include the `message` of the original error for easier debugging.\n", "01-building-your-application/01-routing/09-colocation.mdx": "---\ntitle: Project Organization and File Colocation\nnav_title: Project Organization\ndescription: Learn how to organize your Next.js project and colocate files.\nrelated:\n  links:\n    - app/building-your-application/routing/defining-routes\n    - app/building-your-application/routing/route-groups\n    - app/building-your-application/configuring/src-directory\n    - app/building-your-application/configuring/absolute-imports-and-module-aliases\n---\n\nApart from [routing folder and file conventions](/docs/getting-started/project-structure#app-routing-conventions), Next.js is **unopinionated** about how you organize and colocate your project files.\n\nThis page shares default behavior and features you can use to organize your project.\n\n- [Safe colocation by default](#safe-colocation-by-default)\n- [Project organization features](#project-organization-features)\n- [Project organization strategies](#project-organization-strategies)\n\n## Safe colocation by default\n\nIn the `app` directory, [nested folder hierarchy](/docs/app/building-your-application/routing#route-segments) defines route structure.\n\nEach folder represents a route segment that is mapped to a corresponding segment in a URL path.\n\nHowever, even though route structure is defined through folders, a route is **not publicly accessible** until a `page.js` or `route.js` file is added to a route segment.\n\n<Image\n  alt=\"A diagram showing how a route is not publicly accessible until a page.js or route.js file is added to a route segment.\"\n  srcLight=\"/docs/light/project-organization-not-routable.png\"\n  srcDark=\"/docs/dark/project-organization-not-routable.png\"\n  width=\"1600\"\n  height=\"444\"\n/>\n\nAnd, even when a route is made publicly accessible, only the **content returned** by `page.js` or `route.js` is sent to the client.\n\n<Image\n  alt=\"A diagram showing how page.js and route.js files make routes publicly accessible.\"\n  srcLight=\"/docs/light/project-organization-routable.png\"\n  srcDark=\"/docs/dark/project-organization-routable.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nThis means that **project files** can be **safely colocated** inside route segments in the `app` directory without accidentally being routable.\n\n<Image\n  alt=\"A diagram showing colocated project files are not routable even when a segment contains a page.js or route.js file.\"\n  srcLight=\"/docs/light/project-organization-colocation.png\"\n  srcDark=\"/docs/dark/project-organization-colocation.png\"\n  width=\"1600\"\n  height=\"1011\"\n/>\n\n> **Good to know**:\n>\n> - This is different from the `pages` directory, where any file in `pages` is considered a route.\n> - While you **can** colocate your project files in `app` you don't **have** to. If you prefer, you can [keep them outside the `app` directory](#store-project-files-outside-of-app).\n\n## Project organization features\n\nNext.js provides several features to help you organize your project.\n\n### Private Folders\n\nPrivate folders can be created by prefixing a folder with an underscore: `_folderName`\n\nThis indicates the folder is a private implementation detail and should not be considered by the routing system, thereby **opting the folder and all its subfolders** out of routing.\n\n<Image\n  alt=\"An example folder structure using private folders\"\n  srcLight=\"/docs/light/project-organization-private-folders.png\"\n  srcDark=\"/docs/dark/project-organization-private-folders.png\"\n  width=\"1600\"\n  height=\"849\"\n/>\n\nSince files in the `app` directory can be [safely colocated by default](#safe-colocation-by-default), private folders are not required for colocation. However, they can be useful for:\n\n- Separating UI logic from routing logic.\n- Consistently organizing internal files across a project and the Next.js ecosystem.\n- Sorting and grouping files in code editors.\n- Avoiding potential naming conflicts with future Next.js file conventions.\n\n> **Good to know**\n>\n> - While not a framework convention, you might also consider marking files outside private folders as \"private\" using the same underscore pattern.\n> - You can create URL segments that start with an underscore by prefixing the folder name with `%5F` (the URL-encoded form of an underscore): `%5FfolderName`.\n> - If you don't use private folders, it would be helpful to know Next.js [special file conventions](/docs/getting-started/project-structure#routing-files) to prevent unexpected naming conflicts.\n\n### Route Groups\n\nRoute groups can be created by wrapping a folder in parenthesis: `(folderName)`\n\nThis indicates the folder is for organizational purposes and should **not be included** in the route's URL path.\n\n<Image\n  alt=\"An example folder structure using route groups\"\n  srcLight=\"/docs/light/project-organization-route-groups.png\"\n  srcDark=\"/docs/dark/project-organization-route-groups.png\"\n  width=\"1600\"\n  height=\"849\"\n/>\n\nRoute groups are useful for:\n\n- [Organizing routes into groups](/docs/app/building-your-application/routing/route-groups#organize-routes-without-affecting-the-url-path) e.g. by site section, intent, or team.\n- Enabling nested layouts in the same route segment level:\n  - [Creating multiple nested layouts in the same segment, including multiple root layouts](/docs/app/building-your-application/routing/route-groups#creating-multiple-root-layouts)\n  - [Adding a layout to a subset of routes in a common segment](/docs/app/building-your-application/routing/route-groups#opting-specific-segments-into-a-layout)\n\n### `src` Directory\n\nNext.js supports storing application code (including `app`) inside an optional [`src` directory](/docs/app/building-your-application/configuring/src-directory). This separates application code from project configuration files which mostly live in the root of a project.\n\n<Image\n  alt=\"An example folder structure with the `src` directory\"\n  srcLight=\"/docs/light/project-organization-src-directory.png\"\n  srcDark=\"/docs/dark/project-organization-src-directory.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\n### Module Path Aliases\n\nNext.js supports [Module Path Aliases](/docs/app/building-your-application/configuring/absolute-imports-and-module-aliases) which make it easier to read and maintain imports across deeply nested project files.\n\n```jsx filename=\"app/dashboard/settings/analytics/page.js\"\n// before\nimport { Button } from '../../../components/button'\n\n// after\nimport { Button } from '@/components/button'\n```\n\n## Project organization strategies\n\nThere is no \"right\" or \"wrong\" way when it comes to organizing your own files and folders in a Next.js project.\n\nThe following section lists a very high-level overview of common strategies. The simplest takeaway is to choose a strategy that works for you and your team and be consistent across the project.\n\n> **Good to know**: In our examples below, we're using `components` and `lib` folders as generalized placeholders, their naming has no special framework significance and your projects might use other folders like `ui`, `utils`, `hooks`, `styles`, etc.\n\n### Store project files outside of `app`\n\nThis strategy stores all application code in shared folders in the **root of your project** and keeps the `app` directory purely for routing purposes.\n\n<Image\n  alt=\"An example folder structure with project files outside of app\"\n  srcLight=\"/docs/light/project-organization-project-root.png\"\n  srcDark=\"/docs/dark/project-organization-project-root.png\"\n  width=\"1600\"\n  height=\"849\"\n/>\n\n### Store project files in top-level folders inside of `app`\n\nThis strategy stores all application code in shared folders in the **root of the `app` directory**.\n\n<Image\n  alt=\"An example folder structure with project files inside app\"\n  srcLight=\"/docs/light/project-organization-app-root.png\"\n  srcDark=\"/docs/dark/project-organization-app-root.png\"\n  width=\"1600\"\n  height=\"849\"\n/>\n\n### Split project files by feature or route\n\nThis strategy stores globally shared application code in the root `app` directory and **splits** more specific application code into the route segments that use them.\n\n<Image\n  alt=\"An example folder structure with project files split by feature or route\"\n  srcLight=\"/docs/light/project-organization-app-root-split.png\"\n  srcDark=\"/docs/dark/project-organization-app-root-split.png\"\n  width=\"1600\"\n  height=\"1011\"\n/>\n", "01-building-your-application/01-routing/13-route-handlers.mdx": "---\ntitle: Route Handlers\ndescription: Create custom request handlers for a given route using the Web's Request and Response APIs.\nrelated:\n  title: API Reference\n  description: Learn more about the route.js file.\n  links:\n    - app/api-reference/file-conventions/route\n---\n\nRoute Handlers allow you to create custom request handlers for a given route using the Web [Request](https://developer.mozilla.org/docs/Web/API/Request) and [Response](https://developer.mozilla.org/docs/Web/API/Response) APIs.\n\n<Image\n  alt=\"Route.js Special File\"\n  srcLight=\"/docs/light/route-special-file.png\"\n  srcDark=\"/docs/dark/route-special-file.png\"\n  width=\"1600\"\n  height=\"444\"\n/>\n\n> **Good to know**: Route Handlers are only available inside the `app` directory. They are the equivalent of [API Routes](/docs/pages/building-your-application/routing/api-routes) inside the `pages` directory meaning you **do not** need to use API Routes and Route Handlers together.\n\n## Convention\n\nRoute Handlers are defined in a [`route.js|ts` file](/docs/app/api-reference/file-conventions/route) inside the `app` directory:\n\n```ts filename=\"app/api/route.ts\" switcher\nexport const dynamic = 'force-dynamic' // defaults to auto\nexport async function GET(request: Request) {}\n```\n\n```js filename=\"app/api/route.js\" switcher\nexport const dynamic = 'force-dynamic' // defaults to auto\nexport async function GET(request) {}\n```\n\nRoute Handlers can be nested inside the `app` directory, similar to `page.js` and `layout.js`. But there **cannot** be a `route.js` file at the same route segment level as `page.js`.\n\n### Supported HTTP Methods\n\nThe following [HTTP methods](https://developer.mozilla.org/docs/Web/HTTP/Methods) are supported: `GET`, `POST`, `PUT`, `PATCH`, `DELETE`, `HEAD`, and `OPTIONS`. If an unsupported method is called, Next.js will return a `405 Method Not Allowed` response.\n\n### Extended `NextRequest` and `NextResponse` APIs\n\nIn addition to supporting native [Request](https://developer.mozilla.org/docs/Web/API/Request) and [Response](https://developer.mozilla.org/docs/Web/API/Response). Next.js extends them with\n[`NextRequest`](/docs/app/api-reference/functions/next-request) and [`NextResponse`](/docs/app/api-reference/functions/next-response) to provide convenient helpers for advanced use cases.\n\n## Behavior\n\n### Caching\n\nRoute Handlers are cached by default when using the `GET` method with the `Response` object.\n\n```ts filename=\"app/items/route.ts\" switcher\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\n```js filename=\"app/items/route.js\" switcher\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const data = await res.json()\n\n  return Response.json({ data })\n}\n```\n\n> **TypeScript Warning:** `Response.json()` is only valid from TypeScript 5.2. If you use a lower TypeScript version, you can use [`NextResponse.json()`](/docs/app/api-reference/functions/next-response#json) for typed responses instead.\n\n### Opting out of caching\n\nYou can opt out of caching by:\n\n- Using the `Request` object with the `GET` method.\n- Using any of the other HTTP methods.\n- Using [Dynamic Functions](#dynamic-functions) like `cookies` and `headers`.\n- The [Segment Config Options](#segment-config-options) manually specifies dynamic mode.\n\nFor example:\n\n```ts filename=\"app/products/api/route.ts\" switcher\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const id = searchParams.get('id')\n  const res = await fetch(`https://data.mongodb-api.com/product/${id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY!,\n    },\n  })\n  const product = await res.json()\n\n  return Response.json({ product })\n}\n```\n\n```js filename=\"app/products/api/route.js\" switcher\nexport async function GET(request) {\n  const { searchParams } = new URL(request.url)\n  const id = searchParams.get('id')\n  const res = await fetch(`https://data.mongodb-api.com/product/${id}`, {\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n  })\n  const product = await res.json()\n\n  return Response.json({ product })\n}\n```\n\nSimilarly, the `POST` method will cause the Route Handler to be evaluated dynamically.\n\n```ts filename=\"app/items/route.ts\" switcher\nexport async function POST() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY!,\n    },\n    body: JSON.stringify({ time: new Date().toISOString() }),\n  })\n\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\n```js filename=\"app/items/route.js\" switcher\nexport async function POST() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'API-Key': process.env.DATA_API_KEY,\n    },\n    body: JSON.stringify({ time: new Date().toISOString() }),\n  })\n\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\n> **Good to know**: Like API Routes, Route Handlers can be used for cases like handling form submissions. A new abstraction for [handling forms and mutations](/docs/app/building-your-application/data-fetching/server-actions-and-mutations) that integrates deeply with React is being worked on.\n\n### Route Resolution\n\nYou can consider a `route` the lowest level routing primitive.\n\n- They **do not** participate in layouts or client-side navigations like `page`.\n- There **cannot** be a `route.js` file at the same route as `page.js`.\n\n| Page                 | Route              | Result                       |\n| -------------------- | ------------------ | ---------------------------- |\n| `app/page.js`        | `app/route.js`     | <Cross size={18} /> Conflict |\n| `app/page.js`        | `app/api/route.js` | <Check size={18} /> Valid    |\n| `app/[user]/page.js` | `app/api/route.js` | <Check size={18} /> Valid    |\n\nEach `route.js` or `page.js` file takes over all HTTP verbs for that route.\n\n```jsx filename=\"app/page.js\"\nexport default function Page() {\n  return <h1>Hello, Next.js!</h1>\n}\n\n// \u274c Conflict\n// `app/route.js`\nexport async function POST(request) {}\n```\n\n## Examples\n\nThe following examples show how to combine Route Handlers with other Next.js APIs and features.\n\n### Revalidating Cached Data\n\nYou can [revalidate cached data](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data) using the [`next.revalidate`](/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating#revalidating-data) option:\n\n```ts filename=\"app/items/route.ts\" switcher\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    next: { revalidate: 60 }, // Revalidate every 60 seconds\n  })\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\n```js filename=\"app/items/route.js\" switcher\nexport async function GET() {\n  const res = await fetch('https://data.mongodb-api.com/...', {\n    next: { revalidate: 60 }, // Revalidate every 60 seconds\n  })\n  const data = await res.json()\n\n  return Response.json(data)\n}\n```\n\nAlternatively, you can use the [`revalidate` segment config option](/docs/app/api-reference/file-conventions/route-segment-config#revalidate):\n\n```ts\nexport const revalidate = 60\n```\n\n### Dynamic Functions\n\nRoute Handlers can be used with dynamic functions from Next.js, like [`cookies`](/docs/app/api-reference/functions/cookies) and [`headers`](/docs/app/api-reference/functions/headers).\n\n#### Cookies\n\nYou can read or set cookies with [`cookies`](/docs/app/api-reference/functions/cookies) from `next/headers`. This server function can be called directly in a Route Handler, or nested inside of another function.\n\nAlternatively, you can return a new `Response` using the [`Set-Cookie`](https://developer.mozilla.org/docs/Web/HTTP/Headers/Set-Cookie) header.\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { cookies } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token.value}` },\n  })\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nimport { cookies } from 'next/headers'\n\nexport async function GET(request) {\n  const cookieStore = cookies()\n  const token = cookieStore.get('token')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { 'Set-Cookie': `token=${token}` },\n  })\n}\n```\n\nYou can also use the underlying Web APIs to read cookies from the request ([`NextRequest`](/docs/app/api-reference/functions/next-request)):\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { type NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const token = request.cookies.get('token')\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {\n  const token = request.cookies.get('token')\n}\n```\n\n#### Headers\n\nYou can read headers with [`headers`](/docs/app/api-reference/functions/headers) from `next/headers`. This server function can be called directly in a Route Handler, or nested inside of another function.\n\nThis `headers` instance is read-only. To set headers, you need to return a new `Response` with new `headers`.\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { headers } from 'next/headers'\n\nexport async function GET(request: Request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nimport { headers } from 'next/headers'\n\nexport async function GET(request) {\n  const headersList = headers()\n  const referer = headersList.get('referer')\n\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: { referer: referer },\n  })\n}\n```\n\nYou can also use the underlying Web APIs to read headers from the request ([`NextRequest`](/docs/app/api-reference/functions/next-request)):\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { type NextRequest } from 'next/server'\n\nexport async function GET(request: NextRequest) {\n  const requestHeaders = new Headers(request.headers)\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nexport async function GET(request) {\n  const requestHeaders = new Headers(request.headers)\n}\n```\n\n### Redirects\n\n```ts filename=\"app/api/route.ts\" switcher\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request: Request) {\n  redirect('https://nextjs.org/')\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nimport { redirect } from 'next/navigation'\n\nexport async function GET(request) {\n  redirect('https://nextjs.org/')\n}\n```\n\n### Dynamic Route Segments\n\n> We recommend reading the [Defining Routes](/docs/app/building-your-application/routing/defining-routes) page before continuing.\n\nRoute Handlers can use [Dynamic Segments](/docs/app/building-your-application/routing/dynamic-routes) to create request handlers from dynamic data.\n\n```ts filename=\"app/items/[slug]/route.ts\" switcher\nexport async function GET(\n  request: Request,\n  { params }: { params: { slug: string } }\n) {\n  const slug = params.slug // 'a', 'b', or 'c'\n}\n```\n\n```js filename=\"app/items/[slug]/route.js\" switcher\nexport async function GET(request, { params }) {\n  const slug = params.slug // 'a', 'b', or 'c'\n}\n```\n\n| Route                       | Example URL | `params`        |\n| --------------------------- | ----------- | --------------- |\n| `app/items/[slug]/route.js` | `/items/a`  | `{ slug: 'a' }` |\n| `app/items/[slug]/route.js` | `/items/b`  | `{ slug: 'b' }` |\n| `app/items/[slug]/route.js` | `/items/c`  | `{ slug: 'c' }` |\n\n### URL Query Parameters\n\nThe request object passed to the Route Handler is a `NextRequest` instance, which has [some additional convenience methods](/docs/app/api-reference/functions/next-request#nexturl), including for more easily handling query parameters.\n\n```ts filename=\"app/api/search/route.ts\" switcher\nimport { type NextRequest } from 'next/server'\n\nexport function GET(request: NextRequest) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n```\n\n```js filename=\"app/api/search/route.js\" switcher\nexport function GET(request) {\n  const searchParams = request.nextUrl.searchParams\n  const query = searchParams.get('query')\n  // query is \"hello\" for /api/search?query=hello\n}\n```\n\n### Streaming\n\nStreaming is commonly used in combination with Large Language Models (LLMs), such as OpenAI, for AI-generated content. Learn more about the [AI SDK](https://sdk.vercel.ai/docs/introduction).\n\n```ts filename=\"app/api/chat/route.ts\" switcher\nimport { openai } from '@ai-sdk/openai'\nimport { StreamingTextResponse, streamText } from 'ai'\n\nexport async function POST(req) {\n  const { messages } = await req.json()\n  const result = await streamText({\n    model: openai('gpt-4-turbo'),\n    messages,\n  })\n\n  return new StreamingTextResponse(result.toAIStream())\n}\n```\n\n```js filename=\"app/api/chat/route.js\" switcher\nimport { openai } from '@ai-sdk/openai'\nimport { StreamingTextResponse, streamText } from 'ai'\n\nexport async function POST(req: Request) {\n  const { messages } = await req.json()\n  const result = await streamText({\n    model: openai('gpt-4-turbo'),\n    messages,\n  })\n\n  return new StreamingTextResponse(result.toAIStream())\n}\n```\n\nThese abstractions use the Web APIs to create a stream. You can also use the underlying Web APIs directly.\n\n```ts filename=\"app/api/route.ts\" switcher\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator: any) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\n// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream\nfunction iteratorToStream(iterator) {\n  return new ReadableStream({\n    async pull(controller) {\n      const { value, done } = await iterator.next()\n\n      if (done) {\n        controller.close()\n      } else {\n        controller.enqueue(value)\n      }\n    },\n  })\n}\n\nfunction sleep(time) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time)\n  })\n}\n\nconst encoder = new TextEncoder()\n\nasync function* makeIterator() {\n  yield encoder.encode('<p>One</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Two</p>')\n  await sleep(200)\n  yield encoder.encode('<p>Three</p>')\n}\n\nexport async function GET() {\n  const iterator = makeIterator()\n  const stream = iteratorToStream(iterator)\n\n  return new Response(stream)\n}\n```\n\n### Request Body\n\nYou can read the `Request` body using the standard Web API methods:\n\n```ts filename=\"app/items/route.ts\" switcher\nexport async function POST(request: Request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n```\n\n```js filename=\"app/items/route.js\" switcher\nexport async function POST(request) {\n  const res = await request.json()\n  return Response.json({ res })\n}\n```\n\n### Request Body FormData\n\nYou can read the `FormData` using the `request.formData()` function:\n\n```ts filename=\"app/items/route.ts\" switcher\nexport async function POST(request: Request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n```\n\n```js filename=\"app/items/route.js\" switcher\nexport async function POST(request) {\n  const formData = await request.formData()\n  const name = formData.get('name')\n  const email = formData.get('email')\n  return Response.json({ name, email })\n}\n```\n\nSince `formData` data are all strings, you may want to use [`zod-form-data`](https://www.npmjs.com/zod-form-data) to validate the request and retrieve data in the format you prefer (e.g. `number`).\n\n### CORS\n\nYou can set CORS headers for a specific Route Handler using the standard Web API methods:\n\n```ts filename=\"app/api/route.ts\" switcher\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET(request: Request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET(request) {\n  return new Response('Hello, Next.js!', {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  })\n}\n```\n\n> **Good to know**:\n>\n> - To add CORS headers to multiple Route Handlers, you can use [Middleware](/docs/app/building-your-application/routing/middleware#cors) or the [`next.config.js` file](/docs/app/api-reference/next-config-js/headers#cors).\n> - Alternatively, see our [CORS example](https://github.com/vercel/examples/blob/main/edge-functions/cors/lib/cors.ts) package.\n\n### Webhooks\n\nYou can use a Route Handler to receive webhooks from third-party services:\n\n```ts filename=\"app/api/route.ts\" switcher\nexport async function POST(request: Request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n```\n\n```js filename=\"app/api/route.js\" switcher\nexport async function POST(request) {\n  try {\n    const text = await request.text()\n    // Process the webhook payload\n  } catch (error) {\n    return new Response(`Webhook error: ${error.message}`, {\n      status: 400,\n    })\n  }\n\n  return new Response('Success!', {\n    status: 200,\n  })\n}\n```\n\nNotably, unlike API Routes with the Pages Router, you do not need to use `bodyParser` to use any additional configuration.\n\n### Non-UI Responses\n\nYou can use Route Handlers to return non-UI content. Note that [`sitemap.xml`](/docs/app/api-reference/file-conventions/metadata/sitemap#generating-a-sitemap-using-code-js-ts), [`robots.txt`](/docs/app/api-reference/file-conventions/metadata/robots#generate-a-robots-file), [`app icons`](/docs/app/api-reference/file-conventions/metadata/app-icons#generate-icons-using-code-js-ts-tsx), and [open graph images](/docs/app/api-reference/file-conventions/metadata/opengraph-image) all have built-in support.\n\n```ts filename=\"app/rss.xml/route.ts\" switcher\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET() {\n  return new Response(\n    `<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n\n</rss>`,\n    {\n      headers: {\n        'Content-Type': 'text/xml',\n      },\n    }\n  )\n}\n```\n\n```js filename=\"app/rss.xml/route.js\" switcher\nexport const dynamic = 'force-dynamic' // defaults to auto\n\nexport async function GET() {\n  return new Response(`<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<rss version=\"2.0\">\n\n<channel>\n  <title>Next.js Documentation</title>\n  <link>https://nextjs.org/docs</link>\n  <description>The React Framework for the Web</description>\n</channel>\n\n</rss>`)\n}\n```\n\n### Segment Config Options\n\nRoute Handlers use the same [route segment configuration](/docs/app/api-reference/file-conventions/route-segment-config) as pages and layouts.\n\n```ts filename=\"app/items/route.ts\" switcher\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n```\n\n```js filename=\"app/items/route.js\" switcher\nexport const dynamic = 'auto'\nexport const dynamicParams = true\nexport const revalidate = false\nexport const fetchCache = 'auto'\nexport const runtime = 'nodejs'\nexport const preferredRegion = 'auto'\n```\n\nSee the [API reference](/docs/app/api-reference/file-conventions/route-segment-config) for more details.\n", "01-building-your-application/01-routing/11-parallel-routes.mdx": "---\ntitle: Parallel Routes\ndescription: Simultaneously render one or more pages in the same view that can be navigated independently. A pattern for highly dynamic applications.\nrelated:\n  links:\n    - app/api-reference/file-conventions/default\n---\n\nParallel Routes allows you to simultaneously or conditionally render one or more pages within the same layout. They are useful for highly dynamic sections of an app, such as dashboards and feeds on social sites.\n\nFor example, considering a dashboard, you can use parallel routes to simultaneously render the `team` and `analytics` pages:\n\n<Image\n  alt=\"Parallel Routes Diagram\"\n  srcLight=\"/docs/light/parallel-routes.png\"\n  srcDark=\"/docs/dark/parallel-routes.png\"\n  width=\"1600\"\n  height=\"942\"\n/>\n\n## Slots\n\nParallel routes are created using named **slots**. Slots are defined with the `@folder` convention. For example, the following file structure defines two slots: `@analytics` and `@team`:\n\n<Image\n  alt=\"Parallel Routes File-system Structure\"\n  srcLight=\"/docs/light/parallel-routes-file-system.png\"\n  srcDark=\"/docs/dark/parallel-routes-file-system.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nSlots are passed as props to the shared parent layout. For the example above, the component in `app/layout.js` now accepts the `@analytics` and `@team` slots props, and can render them in parallel alongside the `children` prop:\n\n```tsx filename=\"app/layout.tsx\" switcher\nexport default function Layout({\n  children,\n  team,\n  analytics,\n}: {\n  children: React.ReactNode\n  analytics: React.ReactNode\n  team: React.ReactNode\n}) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nexport default function Layout({ children, team, analytics }) {\n  return (\n    <>\n      {children}\n      {team}\n      {analytics}\n    </>\n  )\n}\n```\n\nHowever, slots are **not** [route segments](/docs/app/building-your-application/routing#route-segments) and do not affect the URL structure. For example, for `/@analytics/views`, the URL will be `/views` since `@analytics` is a slot.\n\n> **Good to know**:\n>\n> - The `children` prop is an implicit slot that does not need to be mapped to a folder. This means `app/page.js` is equivalent to `app/@children/page.js`.\n\n## Active state and navigation\n\nBy default, Next.js keeps track of the active _state_ (or subpage) for each slot. However, the content rendered within a slot will depend on the type of navigation:\n\n- [**Soft Navigation**](/docs/app/building-your-application/routing/linking-and-navigating#5-soft-navigation): During client-side navigation, Next.js will perform a [partial render](/docs/app/building-your-application/routing/linking-and-navigating#4-partial-rendering), changing the subpage within the slot, while maintaining the other slot's active subpages, even if they don't match the current URL.\n- **Hard Navigation**: After a full-page load (browser refresh), Next.js cannot determine the active state for the slots that don't match the current URL. Instead, it will render a [`default.js`](#defaultjs) file for the unmatched slots, or `404` if `default.js` doesn't exist.\n\n> **Good to know**:\n>\n> - The `404` for unmatched routes helps ensure that you don't accidentally render a parallel route on a page that it was not intended for.\n\n### `default.js`\n\nYou can define a `default.js` file to render as a fallback for unmatched slots during the initial load or full-page reload.\n\nConsider the following folder structure. The `@team` slot has a `/settings` page, but `@analytics` does not.\n\n<Image\n  alt=\"Parallel Routes unmatched routes\"\n  srcLight=\"/docs/light/parallel-routes-unmatched-routes.png\"\n  srcDark=\"/docs/dark/parallel-routes-unmatched-routes.png\"\n  width=\"1600\"\n  height=\"930\"\n/>\n\nWhen navigating to `/settings`, the `@team` slot will render the `/settings` page while maintaining the currently active page for the `@analytics` slot.\n\nOn refresh, Next.js will render a `default.js` for `@analytics`. If `default.js` doesn't exist, a `404` is rendered instead.\n\nAdditionally, since `children` is an implicit slot, you also need to create a `default.js` file to render a fallback for `children` when Next.js cannot recover the active state of the parent page.\n\n### `useSelectedLayoutSegment(s)`\n\nBoth [`useSelectedLayoutSegment`](/docs/app/api-reference/functions/use-selected-layout-segment) and [`useSelectedLayoutSegments`](/docs/app/api-reference/functions/use-selected-layout-segments) accept a `parallelRoutesKey` parameter, which allows you to read the active route segment within a slot.\n\n```tsx filename=\"app/layout.tsx\" switcher\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function Layout({ auth }: { auth: React.ReactNode }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\n'use client'\n\nimport { useSelectedLayoutSegment } from 'next/navigation'\n\nexport default function Layout({ auth }) {\n  const loginSegment = useSelectedLayoutSegment('auth')\n  // ...\n}\n```\n\nWhen a user navigates to `app/@auth/login` (or `/login` in the URL bar), `loginSegment` will be equal to the string `\"login\"`.\n\n## Examples\n\n### Conditional Routes\n\nYou can use Parallel Routes to conditionally render routes based on certain conditions, such as user role. For example, to render a different dashboard page for the `/admin` or `/user` roles:\n\n<Image\n  alt=\"Conditional routes diagram\"\n  srcLight=\"/docs/light/conditional-routes-ui.png\"\n  srcDark=\"/docs/dark/conditional-routes-ui.png\"\n  width=\"1600\"\n  height=\"898\"\n/>\n\n```tsx filename=\"app/dashboard/layout.tsx\" switcher\nimport { checkUserRole } from '@/lib/auth'\n\nexport default function Layout({\n  user,\n  admin,\n}: {\n  user: React.ReactNode\n  admin: React.ReactNode\n}) {\n  const role = checkUserRole()\n  return <>{role === 'admin' ? admin : user}</>\n}\n```\n\n```jsx filename=\"app/dashboard/layout.js\" switcher\nimport { checkUserRole } from '@/lib/auth'\n\nexport default function Layout({ user, admin }) {\n  const role = checkUserRole()\n  return <>{role === 'admin' ? admin : user}</>\n}\n```\n\n### Tab Groups\n\nYou can add a `layout` inside a slot to allow users to navigate the slot independently. This is useful for creating tabs.\n\nFor example, the `@analytics` slot has two subpages: `/page-views` and `/visitors`.\n\n<Image\n  alt=\"Analytics slot with two subpages and a layout\"\n  srcLight=\"/docs/light/parallel-routes-tab-groups.png\"\n  srcDark=\"/docs/dark/parallel-routes-tab-groups.png\"\n  width=\"1600\"\n  height=\"768\"\n/>\n\nWithin `@analytics`, create a [`layout`](/docs/app/building-your-application/routing/layouts-and-templates) file to share the tabs between the two pages:\n\n```tsx filename=\"app/@analytics/layout.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/@analytics/layout.js\" switcher\nimport Link from 'next/link'\n\nexport default function Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/page-views\">Page Views</Link>\n        <Link href=\"/visitors\">Visitors</Link>\n      </nav>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n### Modals\n\nParallel Routes can be used together with [Intercepting Routes](/docs/app/building-your-application/routing/intercepting-routes) to create modals. This allows you to solve common challenges when building modals, such as:\n\n- Making the modal content **shareable through a URL**.\n- **Preserving context** when the page is refreshed, instead of closing the modal.\n- **Closing the modal on backwards navigation** rather than going to the previous route.\n- **Reopening the modal on forwards navigation**.\n\nConsider the following UI pattern, where a user can open a login modal from a layout using client-side navigation, or access a separate `/login` page:\n\n<Image\n  alt=\"Parallel Routes Diagram\"\n  srcLight=\"/docs/light/parallel-routes-auth-modal.png\"\n  srcDark=\"/docs/dark/parallel-routes-auth-modal.png\"\n  width=\"1600\"\n  height=\"687\"\n/>\n\nTo implement this pattern, start by creating a `/login` route that renders your **main** login page.\n\n<Image\n  alt=\"Parallel Routes Diagram\"\n  srcLight=\"/docs/light/parallel-routes-modal-login-page.png\"\n  srcDark=\"/docs/dark/parallel-routes-modal-login-page.png\"\n  width=\"1600\"\n  height=\"768\"\n/>\n\n```tsx filename=\"app/login/page.tsx\" switcher\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return <Login />\n}\n```\n\n```jsx filename=\"app/login/page.js\" switcher\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return <Login />\n}\n```\n\nThen, inside the `@auth` slot, add [`default.js`](/docs/app/api-reference/file-conventions/default) file that returns `null`. This ensures that the modal is not rendered when it's not active.\n\n```tsx filename=\"app/@auth/default.tsx\" switcher\nexport default function Default() {\n  return null\n}\n```\n\n```jsx filename=\"app/@auth/default.js\" switcher\nexport default function Default() {\n  return null\n}\n```\n\nInside your `@auth` slot, intercept the `/login` route by updating the `/(.)login` folder. Import the `<Modal>` component and its children into the `/(.)login/page.tsx` file:\n\n```tsx filename=\"app/@auth/(.)login/page.tsx\" switcher\nimport { Modal } from '@/app/ui/modal'\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return (\n    <Modal>\n      <Login />\n    </Modal>\n  )\n}\n```\n\n```jsx filename=\"app/@auth/(.)login/page.js\" switcher\nimport { Modal } from '@/app/ui/modal'\nimport { Login } from '@/app/ui/login'\n\nexport default function Page() {\n  return (\n    <Modal>\n      <Login />\n    </Modal>\n  )\n}\n```\n\n> **Good to know:**\n>\n> - The convention used to intercept the route, e.g. `(.)`, depends on your file-system structure. See [Intercepting Routes convention](/docs/app/building-your-application/routing/intercepting-routes#convention).\n> - By separating the `<Modal>` functionality from the modal content (`<Login>`), you can ensure any content inside the modal, e.g. [forms](/docs/app/building-your-application/data-fetching/server-actions-and-mutations#forms), are Server Components. See [Interleaving Client and Server Components](/docs/app/building-your-application/rendering/composition-patterns#supported-pattern-passing-server-components-to-client-components-as-props) for more information.\n\n#### Opening the modal\n\nNow, you can leverage the Next.js router to open and close the modal. This ensures the URL is correctly updated when the modal is open, and when navigating backwards and forwards.\n\nTo open the modal, pass the `@auth` slot as a prop to the parent layout and render it alongside the `children` prop.\n\n```tsx filename=\"app/layout.tsx\" switcher\nimport Link from 'next/link'\n\nexport default function Layout({\n  auth,\n  children,\n}: {\n  auth: React.ReactNode\n  children: React.ReactNode\n}) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/login\">Open modal</Link>\n      </nav>\n      <div>{auth}</div>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/layout.js\" switcher\nimport Link from 'next/link'\n\nexport default function Layout({ auth, children }) {\n  return (\n    <>\n      <nav>\n        <Link href=\"/login\">Open modal</Link>\n      </nav>\n      <div>{auth}</div>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\nWhen the user clicks the `<Link>`, the modal will open instead of navigating to the `/login` page. However, on refresh or initial load, navigating to `/login` will take the user to the main login page.\n\n#### Closing the modal\n\nYou can close the modal by calling `router.back()` or by using the `Link` component.\n\n```tsx filename=\"app/ui/modal.tsx\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      </button>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/ui/modal.js\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport function Modal({ children }) {\n  const router = useRouter()\n\n  return (\n    <>\n      <button\n        onClick={() => {\n          router.back()\n        }}\n      >\n        Close modal\n      </button>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\nWhen using the `Link` component to navigate away from a page that shouldn't render the `@auth` slot anymore, we use a catch-all route that returns `null`.\n\n```tsx filename=\"app/ui/modal.tsx\" switcher\nimport Link from 'next/link'\n\nexport function Modal({ children }: { children: React.ReactNode }) {\n  return (\n    <>\n      <Link href=\"/\">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n```jsx filename=\"app/ui/modal.js\" switcher\nimport Link from 'next/link'\n\nexport function Modal({ children }) {\n  return (\n    <>\n      <Link href=\"/\">Close modal</Link>\n      <div>{children}</div>\n    </>\n  )\n}\n```\n\n```tsx filename=\"app/@auth/[...catchAll]/page.tsx\" switcher\nexport default function CatchAll() {\n  return null\n}\n```\n\n```jsx filename=\"app/@auth/[...catchAll]/page.js\" switcher\nexport default function CatchAll() {\n  return null\n}\n```\n\n> **Good to know:**\n>\n> - We use a catch-all route in our `@auth` slot to close the modal because of the behavior described in [Active state and navigation](#active-state-and-navigation). Since client-side navigations to a route that no longer match the slot will remain visible, we need to match the slot to a route that returns `null` to close the modal.\n> - Other examples could include opening a photo modal in a gallery while also having a dedicated `/photo/[id]` page, or opening a shopping cart in a side modal.\n> - [View an example](https://github.com/vercel-labs/nextgram) of modals with Intercepted and Parallel Routes.\n\n### Loading and Error UI\n\nParallel Routes can be streamed independently, allowing you to define independent error and loading states for each route:\n\n<Image\n  alt=\"Parallel routes enable custom error and loading states\"\n  srcLight=\"/docs/light/parallel-routes-cinematic-universe.png\"\n  srcDark=\"/docs/dark/parallel-routes-cinematic-universe.png\"\n  width=\"1600\"\n  height=\"1218\"\n/>\n\nSee the [Loading UI](/docs/app/building-your-application/routing/loading-ui-and-streaming) and [Error Handling](/docs/app/building-your-application/routing/error-handling) documentation for more information.\n", "01-building-your-application/01-routing/06-loading-ui-and-streaming.mdx": "---\ntitle: Loading UI and Streaming\ndescription: Built on top of Suspense, Loading UI allows you to create a fallback for specific route segments, and automatically stream content as it becomes ready.\n---\n\nThe special file `loading.js` helps you create meaningful Loading UI with [React Suspense](https://react.dev/reference/react/Suspense). With this convention, you can show an [instant loading state](#instant-loading-states) from the server while the content of a route segment loads. The new content is automatically swapped in once rendering is complete.\n\n<Image\n  alt=\"Loading UI\"\n  srcLight=\"/docs/light/loading-ui.png\"\n  srcDark=\"/docs/dark/loading-ui.png\"\n  width=\"1600\"\n  height=\"691\"\n/>\n\n## Instant Loading States\n\nAn instant loading state is fallback UI that is shown immediately upon navigation. You can pre-render loading indicators such as skeletons and spinners, or a small but meaningful part of future screens such as a cover photo, title, etc. This helps users understand the app is responding and provides a better user experience.\n\nCreate a loading state by adding a `loading.js` file inside a folder.\n\n<Image\n  alt=\"loading.js special file\"\n  srcLight=\"/docs/light/loading-special-file.png\"\n  srcDark=\"/docs/dark/loading-special-file.png\"\n  width=\"1600\"\n  height=\"606\"\n/>\n\n```tsx filename=\"app/dashboard/loading.tsx\" switcher\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n```\n\n```jsx filename=\"app/dashboard/loading.js\" switcher\nexport default function Loading() {\n  // You can add any UI inside Loading, including a Skeleton.\n  return <LoadingSkeleton />\n}\n```\n\nIn the same folder, `loading.js` will be nested inside `layout.js`. It will automatically wrap the `page.js` file and any children below in a `<Suspense>` boundary.\n\n<Image\n  alt=\"loading.js overview\"\n  srcLight=\"/docs/light/loading-overview.png\"\n  srcDark=\"/docs/dark/loading-overview.png\"\n  width=\"1600\"\n  height=\"768\"\n/>\n\n> **Good to know**:\n>\n> - Navigation is immediate, even with [server-centric routing](/docs/app/building-your-application/routing/linking-and-navigating#how-routing-and-navigation-works).\n> - Navigation is interruptible, meaning changing routes does not need to wait for the content of the route to fully load before navigating to another route.\n> - Shared layouts remain interactive while new route segments load.\n\n> **Recommendation:** Use the `loading.js` convention for route segments (layouts and pages) as Next.js optimizes this functionality.\n\n## Streaming with Suspense\n\nIn addition to `loading.js`, you can also manually create Suspense Boundaries for your own UI components. The App Router supports streaming with [Suspense](https://react.dev/reference/react/Suspense) for both [Node.js and Edge runtimes](/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes).\n\n> **Good to know**:\n>\n> - [Some browsers](https://bugs.webkit.org/show_bug.cgi?id=252413) buffer a streaming response. You may not see the streamed response until the response exceeds 1024 bytes. This typically only affects \u201chello world\u201d applications, but not real applications.\n\n### What is Streaming?\n\nTo learn how Streaming works in React and Next.js, it's helpful to understand **Server-Side Rendering (SSR)** and its limitations.\n\nWith SSR, there's a series of steps that need to be completed before a user can see and interact with a page:\n\n1. First, all data for a given page is fetched on the server.\n2. The server then renders the HTML for the page.\n3. The HTML, CSS, and JavaScript for the page are sent to the client.\n4. A non-interactive user interface is shown using the generated HTML, and CSS.\n5. Finally, React [hydrates](https://react.dev/reference/react-dom/client/hydrateRoot#hydrating-server-rendered-html) the user interface to make it interactive.\n\n<Image\n  alt=\"Chart showing Server Rendering without Streaming\"\n  srcLight=\"/docs/light/server-rendering-without-streaming-chart.png\"\n  srcDark=\"/docs/dark/server-rendering-without-streaming-chart.png\"\n  width=\"1600\"\n  height=\"612\"\n/>\n\nThese steps are sequential and blocking, meaning the server can only render the HTML for a page once all the data has been fetched. And, on the client, React can only hydrate the UI once the code for all components in the page has been downloaded.\n\nSSR with React and Next.js helps improve the perceived loading performance by showing a non-interactive page to the user as soon as possible.\n\n<Image\n  alt=\"Server Rendering without Streaming\"\n  srcLight=\"/docs/light/server-rendering-without-streaming.png\"\n  srcDark=\"/docs/dark/server-rendering-without-streaming.png\"\n  width=\"1600\"\n  height=\"748\"\n/>\n\nHowever, it can still be slow as all data fetching on server needs to be completed before the page can be shown to the user.\n\n**Streaming** allows you to break down the page's HTML into smaller chunks and progressively send those chunks from the server to the client.\n\n<Image\n  alt=\"How Server Rendering with Streaming Works\"\n  srcLight=\"/docs/light/server-rendering-with-streaming.png\"\n  srcDark=\"/docs/dark/server-rendering-with-streaming.png\"\n  width=\"1600\"\n  height=\"785\"\n/>\n\nThis enables parts of the page to be displayed sooner, without waiting for all the data to load before any UI can be rendered.\n\nStreaming works well with React's component model because each component can be considered a chunk. Components that have higher priority (e.g. product information) or that don't rely on data can be sent first (e.g. layout), and React can start hydration earlier. Components that have lower priority (e.g. reviews, related products) can be sent in the same server request after their data has been fetched.\n\n<Image\n  alt=\"Chart showing Server Rendering with Streaming\"\n  srcLight=\"/docs/light/server-rendering-with-streaming-chart.png\"\n  srcDark=\"/docs/dark/server-rendering-with-streaming-chart.png\"\n  width=\"1600\"\n  height=\"730\"\n/>\n\nStreaming is particularly beneficial when you want to prevent long data requests from blocking the page from rendering as it can reduce the [Time To First Byte (TTFB)](https://web.dev/ttfb/) and [First Contentful Paint (FCP)](https://web.dev/first-contentful-paint/). It also helps improve [Time to Interactive (TTI)](https://developer.chrome.com/en/docs/lighthouse/performance/interactive/), especially on slower devices.\n\n### Example\n\n`<Suspense>` works by wrapping a component that performs an asynchronous action (e.g. fetch data), showing fallback UI (e.g. skeleton, spinner) while it's happening, and then swapping in your component once the action completes.\n\n```tsx filename=\"app/dashboard/page.tsx\" switcher\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n\nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\n```jsx filename=\"app/dashboard/page.js\" switcher\nimport { Suspense } from 'react'\nimport { PostFeed, Weather } from './Components'\n\nexport default function Posts() {\n  return (\n    <section>\n      <Suspense fallback={<p>Loading feed...</p>}>\n        <PostFeed />\n      </Suspense>\n      <Suspense fallback={<p>Loading weather...</p>}>\n        <Weather />\n      </Suspense>\n    </section>\n  )\n}\n```\n\nBy using Suspense, you get the benefits of:\n\n1. **Streaming Server Rendering** - Progressively rendering HTML from the server to the client.\n2. **Selective Hydration** - React prioritizes what components to make interactive first based on user interaction.\n\nFor more Suspense examples and use cases, please see the [React Documentation](https://react.dev/reference/react/Suspense).\n\n### SEO\n\n- Next.js will wait for data fetching inside [`generateMetadata`](/docs/app/api-reference/functions/generate-metadata) to complete before streaming UI to the client. This guarantees the first part of a streamed response includes `<head>` tags.\n- Since streaming is server-rendered, it does not impact SEO. You can use the [Rich Results Test](https://search.google.com/test/rich-results) tool from Google to see how your page appears to Google's web crawlers and view the serialized HTML ([source](https://web.dev/rendering-on-the-web/#seo-considerations)).\n\n### Status Codes\n\nWhen streaming, a `200` status code will be returned to signal that the request was successful.\n\nThe server can still communicate errors or issues to the client within the streamed content itself, for example, when using [`redirect`](/docs/app/api-reference/functions/redirect) or [`notFound`](/docs/app/api-reference/functions/not-found). Since the response headers have already been sent to the client, the status code of the response cannot be updated. This does not affect SEO.\n", "01-building-your-application/01-routing/07-redirecting.mdx": "---\ntitle: Redirecting\ndescription: Learn the different ways to handle redirects in Next.js.\nrelated:\n  links:\n    - app/api-reference/functions/redirect\n    - app/api-reference/functions/permanentRedirect\n    - app/building-your-application/routing/middleware\n    - app/api-reference/next-config-js/redirects\n---\n\nThere are a few ways you can handle redirects in Next.js. This page will go through each available option, use cases, and how to manage large numbers of redirects.\n\n<AppOnly>\n\n| API                                                            | Purpose                                           | Where                                             | Status Code                            |\n| -------------------------------------------------------------- | ------------------------------------------------- | ------------------------------------------------- | -------------------------------------- |\n| [`redirect`](#redirect-function)                               | Redirect user after a mutation or event           | Server Components, Server Actions, Route Handlers | 307 (Temporary) or 303 (Server Action) |\n| [`permanentRedirect`](#permanentredirect-function)             | Redirect user after a mutation or event           | Server Components, Server Actions, Route Handlers | 308 (Permanent)                        |\n| [`useRouter`](#userouter-hook)                                 | Perform a client-side navigation                  | Event Handlers in Client Components               | N/A                                    |\n| [`redirects` in `next.config.js`](#redirects-in-nextconfigjs)  | Redirect an incoming request based on a path      | `next.config.js` file                             | 307 (Temporary) or 308 (Permanent)     |\n| [`NextResponse.redirect`](#nextresponseredirect-in-middleware) | Redirect an incoming request based on a condition | Middleware                                        | Any                                    |\n\n</AppOnly>\n\n<PagesOnly>\n\n| API                                                            | Purpose                                           | Where                 | Status Code                        |\n| -------------------------------------------------------------- | ------------------------------------------------- | --------------------- | ---------------------------------- |\n| [`useRouter`](#userouter-hook)                                 | Perform a client-side navigation                  | Components            | N/A                                |\n| [`redirects` in `next.config.js`](#redirects-in-nextconfigjs)  | Redirect an incoming request based on a path      | `next.config.js` file | 307 (Temporary) or 308 (Permanent) |\n| [`NextResponse.redirect`](#nextresponseredirect-in-middleware) | Redirect an incoming request based on a condition | Middleware            | Any                                |\n\n</PagesOnly>\n\n<AppOnly>\n\n## `redirect` function\n\nThe `redirect` function allows you to redirect the user to another URL. You can call `redirect` in [Server Components](/docs/app/building-your-application/rendering/server-components), [Route Handlers](/docs/app/building-your-application/routing/route-handlers), and [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\n`redirect` is often used after a mutation or event. For example, creating a post:\n\n```tsx filename=\"app/actions.tsx\" switcher\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id: string) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n```jsx filename=\"app/actions.js\" switcher\n'use server'\n\nimport { redirect } from 'next/navigation'\nimport { revalidatePath } from 'next/cache'\n\nexport async function createPost(id) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidatePath('/posts') // Update cached posts\n  redirect(`/post/${id}`) // Navigate to the new post page\n}\n```\n\n> **Good to know**:\n>\n> - `redirect` returns a 307 (Temporary Redirect) status code by default. When used in a Server Action, it returns a 303 (See Other), which is commonly used for redirecting to a success page as a result of a POST request.\n> - `redirect` internally throws an error so it should be called outside of `try/catch` blocks.\n> - `redirect` can be called in Client Components during the rendering process but not in event handlers. You can use the [`useRouter` hook](#userouter-hook) instead.\n> - `redirect` also accepts absolute URLs and can be used to redirect to external links.\n> - If you'd like to redirect before the render process, use [`next.config.js`](#redirects-in-nextconfigjs) or [Middleware](#nextresponseredirect-in-middleware).\n\nSee the [`redirect` API reference](/docs/app/api-reference/functions/redirect) for more information.\n\n## `permanentRedirect` function\n\nThe `permanentRedirect` function allows you to **permanently** redirect the user to another URL. You can call `permanentRedirect` in [Server Components](/docs/app/building-your-application/rendering/server-components), [Route Handlers](/docs/app/building-your-application/routing/route-handlers), and [Server Actions](/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n\n`permanentRedirect` is often used after a mutation or event that changes an entity's canonical URL, such as updating a user's profile URL after they change their username:\n\n```tsx filename=\"app/actions.ts\" switcher\n'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username: string, formData: FormData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n```\n\n```jsx filename=\"app/actions.js\" switcher\n'use server'\n\nimport { permanentRedirect } from 'next/navigation'\nimport { revalidateTag } from 'next/cache'\n\nexport async function updateUsername(username, formData) {\n  try {\n    // Call database\n  } catch (error) {\n    // Handle errors\n  }\n\n  revalidateTag('username') // Update all references to the username\n  permanentRedirect(`/profile/${username}`) // Navigate to the new user profile\n}\n```\n\n> **Good to know**:\n>\n> - `permanentRedirect` returns a 308 (permanent redirect) status code by default.\n> - `permanentRedirect` also accepts absolute URLs and can be used to redirect to external links.\n> - If you'd like to redirect before the render process, use [`next.config.js`](#redirects-in-nextconfigjs) or [Middleware](#nextresponseredirect-in-middleware).\n\nSee the [`permanentRedirect` API reference](/docs/app/api-reference/functions/permanentRedirect) for more information.\n\n</AppOnly>\n\n## `useRouter()` hook\n\n<AppOnly>\n\nIf you need to redirect inside an event handler in a Client Component, you can use the `push` method from the `useRouter` hook. For example:\n\n```tsx filename=\"app/page.tsx\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\n'use client'\n\nimport { useRouter } from 'next/navigation'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nIf you need to redirect inside a component, you can use the `push` method from the `useRouter` hook. For example:\n\n```tsx filename=\"app/page.tsx\" switcher\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n```jsx filename=\"app/page.js\" switcher\nimport { useRouter } from 'next/router'\n\nexport default function Page() {\n  const router = useRouter()\n\n  return (\n    <button type=\"button\" onClick={() => router.push('/dashboard')}>\n      Dashboard\n    </button>\n  )\n}\n```\n\n</PagesOnly>\n\n> **Good to know**:\n>\n> - If you don't need to programmatically navigate a user, you should use a [`<Link>`](/docs/app/api-reference/components/link) component.\n\n<AppOnly>\n\nSee the [`useRouter` API reference](/docs/app/api-reference/functions/use-router) for more information.\n\n</AppOnly>\n\n<PagesOnly>\n\nSee the [`useRouter` API reference](/docs/pages/api-reference/functions/use-router) for more information.\n\n</PagesOnly>\n\n## `redirects` in `next.config.js`\n\nThe `redirects` option in the `next.config.js` file allows you to redirect an incoming request path to a different destination path. This is useful when you change the URL structure of pages or have a list of redirects that are known ahead of time.\n\n`redirects` supports [path](/docs/app/api-reference/next-config-js/redirects#path-matching), [header, cookie, and query matching](/docs/app/api-reference/next-config-js/redirects#header-cookie-and-query-matching), giving you the flexibility to redirect users based on an incoming request.\n\nTo use `redirects`, add the option to your `next.config.js` file:\n\n```js filename=\"next.config.js\"\nmodule.exports = {\n  async redirects() {\n    return [\n      // Basic redirect\n      {\n        source: '/about',\n        destination: '/',\n        permanent: true,\n      },\n      // Wildcard path matching\n      {\n        source: '/blog/:slug',\n        destination: '/news/:slug',\n        permanent: true,\n      },\n    ]\n  },\n}\n```\n\nSee the [`redirects` API reference](/docs/app/api-reference/next-config-js/redirects) for more information.\n\n> **Good to know**:\n>\n> - `redirects` can return a 307 (Temporary Redirect) or 308 (Permanent Redirect) status code with the `permanent` option.\n> - `redirects` may have a limit on platforms. For example, on Vercel, there's a limit of 1,024 redirects. To manage a large number of redirects (1000+), consider creating a custom solution using [Middleware](/docs/app/building-your-application/routing/middleware). See [managing redirects at scale](#managing-redirects-at-scale-advanced) for more.\n> - `redirects` runs **before** Middleware.\n\n## `NextResponse.redirect` in Middleware\n\nMiddleware allows you to run code before a request is completed. Then, based on the incoming request, redirect to a different URL using `NextResponse.redirect`. This is useful if you want to redirect users based on a condition (e.g. authentication, session management, etc) or have [a large number of redirects](#managing-redirects-at-scale-advanced).\n\nFor example, to redirect the user to a `/login` page if they are not authenticated:\n\n```tsx filename=\"middleware.ts\" switcher\nimport { NextResponse, NextRequest } from 'next/server'\nimport { authenticate } from 'auth-provider'\n\nexport function middleware(request: NextRequest) {\n  const isAuthenticated = authenticate(request)\n\n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n\n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n\nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\nimport { authenticate } from 'auth-provider'\n\nexport function middleware(request) {\n  const isAuthenticated = authenticate(request)\n\n  // If the user is authenticated, continue as normal\n  if (isAuthenticated) {\n    return NextResponse.next()\n  }\n\n  // Redirect to login page if not authenticated\n  return NextResponse.redirect(new URL('/login', request.url))\n}\n\nexport const config = {\n  matcher: '/dashboard/:path*',\n}\n```\n\n> **Good to know**:\n>\n> - Middleware runs **after** `redirects` in `next.config.js` and **before** rendering.\n\nSee the [Middleware](/docs/app/building-your-application/routing/middleware) documentation for more information.\n\n## Managing redirects at scale (advanced)\n\nTo manage a large number of redirects (1000+), you may consider creating a custom solution using Middleware. This allows you to handle redirects programmatically without having to redeploy your application.\n\nTo do this, you'll need to consider:\n\n1. Creating and storing a redirect map.\n2. Optimizing data lookup performance.\n\n> **Next.js Example**: See our [Middleware with Bloom filter](https://redirects-bloom-filter.vercel.app/) example for an implementation of the recommendations below.\n\n### 1. Creating and storing a redirect map\n\nA redirect map is a list of redirects that you can store in a database (usually a key-value store) or JSON file.\n\nConsider the following data structure:\n\n```json\n{\n  \"/old\": {\n    \"destination\": \"/new\",\n    \"permanent\": true\n  },\n  \"/blog/post-old\": {\n    \"destination\": \"/blog/post-new\",\n    \"permanent\": true\n  }\n}\n```\n\nIn [Middleware](/docs/app/building-your-application/routing/middleware), you can read from a database such as Vercel's [Edge Config](https://vercel.com/docs/storage/edge-config/get-started?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) or [Redis](https://vercel.com/docs/storage/vercel-kv?utm_source=next-site&utm_medium=docs&utm_campaign=next-website), and redirect the user based on the incoming request:\n\n```tsx filename=\"middleware.ts\" switcher\nimport { NextResponse, NextRequest } from 'next/server'\nimport { get } from '@vercel/edge-config'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport async function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n\n  if (redirectData && typeof redirectData === 'string') {\n    const redirectEntry: RedirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n\n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\nimport { get } from '@vercel/edge-config'\n\nexport async function middleware(request) {\n  const pathname = request.nextUrl.pathname\n  const redirectData = await get(pathname)\n\n  if (redirectData) {\n    const redirectEntry = JSON.parse(redirectData)\n    const statusCode = redirectEntry.permanent ? 308 : 307\n    return NextResponse.redirect(redirectEntry.destination, statusCode)\n  }\n\n  // No redirect found, continue without redirecting\n  return NextResponse.next()\n}\n```\n\n### 2. Optimizing data lookup performance\n\nReading a large dataset for every incoming request can be slow and expensive. There are two ways you can optimize data lookup performance:\n\n- Use a database that is optimized for fast reads, such as [Vercel Edge Config](https://vercel.com/docs/storage/edge-config/get-started?utm_source=next-site&utm_medium=docs&utm_campaign=next-website) or [Redis](https://vercel.com/docs/storage/vercel-kv?utm_source=next-site&utm_medium=docs&utm_campaign=next-website).\n- Use a data lookup strategy such as a [Bloom filter](https://en.wikipedia.org/wiki/Bloom_filter) to efficiently check if a redirect exists **before** reading the larger redirects file or database.\n\nConsidering the previous example, you can import a generated bloom filter file into Middleware, then, check if the incoming request pathname exists in the bloom filter.\n\nIf it does, forward the request to a <AppOnly>[Route Handler](/docs/app/building-your-application/routing/route-handlers)</AppOnly> <PagesOnly>[API Routes](/docs/pages/building-your-application/routing/api-routes)</PagesOnly> which will check the actual file and redirect the user to the appropriate URL. This avoids importing a large redirects file into Middleware, which can slow down every incoming request.\n\n```tsx filename=\"middleware.ts\" switcher\nimport { NextResponse, NextRequest } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter as any)\n\nexport async function middleware(request: NextRequest) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n\n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n\n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n\n      if (redirectData.ok) {\n        const redirectEntry: RedirectEntry | undefined =\n          await redirectData.json()\n\n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n\n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n```\n\n```js filename=\"middleware.js\" switcher\nimport { NextResponse } from 'next/server'\nimport { ScalableBloomFilter } from 'bloom-filters'\nimport GeneratedBloomFilter from './redirects/bloom-filter.json'\n\n// Initialize bloom filter from a generated JSON file\nconst bloomFilter = ScalableBloomFilter.fromJSON(GeneratedBloomFilter)\n\nexport async function middleware(request) {\n  // Get the path for the incoming request\n  const pathname = request.nextUrl.pathname\n\n  // Check if the path is in the bloom filter\n  if (bloomFilter.has(pathname)) {\n    // Forward the pathname to the Route Handler\n    const api = new URL(\n      `/api/redirects?pathname=${encodeURIComponent(request.nextUrl.pathname)}`,\n      request.nextUrl.origin\n    )\n\n    try {\n      // Fetch redirect data from the Route Handler\n      const redirectData = await fetch(api)\n\n      if (redirectData.ok) {\n        const redirectEntry = await redirectData.json()\n\n        if (redirectEntry) {\n          // Determine the status code\n          const statusCode = redirectEntry.permanent ? 308 : 307\n\n          // Redirect to the destination\n          return NextResponse.redirect(redirectEntry.destination, statusCode)\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  // No redirect found, continue the request without redirecting\n  return NextResponse.next()\n}\n```\n\n<AppOnly>\n\nThen, in the Route Handler:\n\n```tsx filename=\"app/redirects/route.ts\" switcher\nimport { NextRequest, NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport function GET(request: NextRequest) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n\n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n```\n\n```js filename=\"app/redirects/route.js\" switcher\nimport { NextResponse } from 'next/server'\nimport redirects from '@/app/redirects/redirects.json'\n\nexport function GET(request) {\n  const pathname = request.nextUrl.searchParams.get('pathname')\n  if (!pathname) {\n    return new Response('Bad Request', { status: 400 })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = redirects[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return new Response('No redirect', { status: 400 })\n  }\n\n  // Return the redirect entry\n  return NextResponse.json(redirect)\n}\n```\n\n</AppOnly>\n\n<PagesOnly>\n\nThen, in the API Route:\n\n```tsx filename=\"pages/api/redirects.ts\" switcher\nimport { NextApiRequest, NextApiResponse } from 'next'\nimport redirects from '@/app/redirects/redirects.json'\n\ntype RedirectEntry = {\n  destination: string\n  permanent: boolean\n}\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n\n  // Return the redirect entry\n  return res.json(redirect)\n}\n```\n\n```js filename=\"pages/api/redirects.js\" switcher\nimport redirects from '@/app/redirects/redirects.json'\n\nexport default function handler(req, res) {\n  const pathname = req.query.pathname\n  if (!pathname) {\n    return res.status(400).json({ message: 'Bad Request' })\n  }\n\n  // Get the redirect entry from the redirects.json file\n  const redirect = redirects[pathname]\n\n  // Account for bloom filter false positives\n  if (!redirect) {\n    return res.status(400).json({ message: 'No redirect' })\n  }\n\n  // Return the redirect entry\n  return res.json(redirect)\n}\n```\n\n</PagesOnly>\n\n> **Good to know:**\n>\n> - To generate a bloom filter, you can use a library like [`bloom-filters`](https://www.npmjs.com/package/bloom-filters).\n> - You should validate requests made to your Route Handler to prevent malicious requests.\n", "01-building-your-application/01-routing/10-dynamic-routes.mdx": "---\ntitle: Dynamic Routes\ndescription: Dynamic Routes can be used to programmatically generate route segments from dynamic data.\nrelated:\n  title: Next Steps\n  description: For more information on what to do next, we recommend the following sections\n  links:\n    - app/building-your-application/routing/linking-and-navigating\n    - app/api-reference/functions/generate-static-params\n---\n\nWhen you don't know the exact segment names ahead of time and want to create routes from dynamic data, you can use Dynamic Segments that are filled in at request time or [prerendered](#generating-static-params) at build time.\n\n## Convention\n\nA Dynamic Segment can be created by wrapping a folder's name in square brackets: `[folderName]`. For example, `[id]` or `[slug]`.\n\nDynamic Segments are passed as the `params` prop to [`layout`](/docs/app/api-reference/file-conventions/layout), [`page`](/docs/app/api-reference/file-conventions/page), [`route`](/docs/app/building-your-application/routing/route-handlers), and [`generateMetadata`](/docs/app/api-reference/functions/generate-metadata#generatemetadata-function) functions.\n\n## Example\n\nFor example, a blog could include the following route `app/blog/[slug]/page.js` where `[slug]` is the Dynamic Segment for blog posts.\n\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <div>My Post: {params.slug}</div>\n}\n```\n\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\nexport default function Page({ params }) {\n  return <div>My Post: {params.slug}</div>\n}\n```\n\n| Route                     | Example URL | `params`        |\n| ------------------------- | ----------- | --------------- |\n| `app/blog/[slug]/page.js` | `/blog/a`   | `{ slug: 'a' }` |\n| `app/blog/[slug]/page.js` | `/blog/b`   | `{ slug: 'b' }` |\n| `app/blog/[slug]/page.js` | `/blog/c`   | `{ slug: 'c' }` |\n\nSee the [generateStaticParams()](#generating-static-params) page to learn how to generate the params for the segment.\n\n> **Good to know**: Dynamic Segments are equivalent to [Dynamic Routes](/docs/app/building-your-application/routing/dynamic-routes) in the `pages` directory.\n\n## Generating Static Params\n\nThe `generateStaticParams` function can be used in combination with [dynamic route segments](/docs/app/building-your-application/routing/dynamic-routes) to [**statically generate**](/docs/app/building-your-application/rendering/server-components#static-rendering-default) routes at build time instead of on-demand at request time.\n\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\nexport async function generateStaticParams() {\n  const posts = await fetch('https://.../posts').then((res) => res.json())\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }))\n}\n```\n\nThe primary benefit of the `generateStaticParams` function is its smart retrieval of data. If content is fetched within the `generateStaticParams` function using a `fetch` request, the requests are [automatically memoized](/docs/app/building-your-application/caching#request-memoization). This means a `fetch` request with the same arguments across multiple `generateStaticParams`, Layouts, and Pages will only be made once, which decreases build times.\n\nUse the [migration guide](/docs/app/building-your-application/upgrading/app-router-migration#dynamic-paths-getstaticpaths) if you are migrating from the `pages` directory.\n\nSee [`generateStaticParams` server function documentation](/docs/app/api-reference/functions/generate-static-params) for more information and advanced use cases.\n\n## Catch-all Segments\n\nDynamic Segments can be extended to **catch-all** subsequent segments by adding an ellipsis inside the brackets `[...folderName]`.\n\nFor example, `app/shop/[...slug]/page.js` will match `/shop/clothes`, but also `/shop/clothes/tops`, `/shop/clothes/tops/t-shirts`, and so on.\n\n| Route                        | Example URL   | `params`                    |\n| ---------------------------- | ------------- | --------------------------- |\n| `app/shop/[...slug]/page.js` | `/shop/a`     | `{ slug: ['a'] }`           |\n| `app/shop/[...slug]/page.js` | `/shop/a/b`   | `{ slug: ['a', 'b'] }`      |\n| `app/shop/[...slug]/page.js` | `/shop/a/b/c` | `{ slug: ['a', 'b', 'c'] }` |\n\n## Optional Catch-all Segments\n\nCatch-all Segments can be made **optional** by including the parameter in double square brackets: `[[...folderName]]`.\n\nFor example, `app/shop/[[...slug]]/page.js` will **also** match `/shop`, in addition to `/shop/clothes`, `/shop/clothes/tops`, `/shop/clothes/tops/t-shirts`.\n\nThe difference between **catch-all** and **optional catch-all** segments is that with optional, the route without the parameter is also matched (`/shop` in the example above).\n\n| Route                          | Example URL   | `params`                    |\n| ------------------------------ | ------------- | --------------------------- |\n| `app/shop/[[...slug]]/page.js` | `/shop`       | `{}`                        |\n| `app/shop/[[...slug]]/page.js` | `/shop/a`     | `{ slug: ['a'] }`           |\n| `app/shop/[[...slug]]/page.js` | `/shop/a/b`   | `{ slug: ['a', 'b'] }`      |\n| `app/shop/[[...slug]]/page.js` | `/shop/a/b/c` | `{ slug: ['a', 'b', 'c'] }` |\n\n## TypeScript\n\nWhen using TypeScript, you can add types for `params` depending on your configured route segment.\n\n```tsx filename=\"app/blog/[slug]/page.tsx\" switcher\nexport default function Page({ params }: { params: { slug: string } }) {\n  return <h1>My Page</h1>\n}\n```\n\n```jsx filename=\"app/blog/[slug]/page.js\" switcher\nexport default function Page({ params }) {\n  return <h1>My Page</h1>\n}\n```\n\n| Route                               | `params` Type Definition                 |\n| ----------------------------------- | ---------------------------------------- |\n| `app/blog/[slug]/page.js`           | `{ slug: string }`                       |\n| `app/shop/[...slug]/page.js`        | `{ slug: string[] }`                     |\n| `app/shop/[[...slug]]/page.js`      | `{ slug?: string[] }`                    |\n| `app/[categoryId]/[itemId]/page.js` | `{ categoryId: string, itemId: string }` |\n\n> **Good to know**: This may be done automatically by the [TypeScript plugin](/docs/app/building-your-application/configuring/typescript#typescript-plugin) in the future.\n"}